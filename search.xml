<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Apache CollectionUtils 常用方法总结</title>
    <url>/2019/03/01/apache-common-collection-utils/</url>
    <content><![CDATA[<p>CollectionUtils在真实项目中，是一个非常好用的工具类，使用非常频繁。它可以使代码更加简洁和安全。</p>
<h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><ul>
<li>maven</li>
</ul>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<ul>
<li>gradle</li>
</ul>
<pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// https://mvnrepository.com/artifact/commons-collections/commons-collections</span>
compile group<span class="token punctuation">:</span> <span class="token string">'commons-collections'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'commons-collections'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'3.2.1'</span></code></pre>
<h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h3 id="非空判断"><a href="#非空判断" class="headerlink" title="非空判断"></a>非空判断</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 判断集合是否为空:</span>
CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span>
CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span>　　
CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">false</span>

<span class="token comment" spellcheck="true">// 判断集合是否不为空:</span>
CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">false</span>
CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">false</span>
CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span></code></pre>
<h3 id="并集、交集、交集的补集、差集"><a href="#并集、交集、交集的补集、差集" class="headerlink" title="并集、交集、交集的补集、差集"></a>并集、交集、交集的补集、差集</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span><span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 并集</span>
    Collection union <span class="token operator">=</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"union:{}"</span><span class="token punctuation">,</span> union<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 交集</span>
    Collection intersection <span class="token operator">=</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">intersection</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"intersection:{}"</span><span class="token punctuation">,</span> intersection<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 交集的补集（析取）</span>
    Collection disjunction <span class="token operator">=</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">disjunction</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"disjunction:{}"</span><span class="token punctuation">,</span> disjunction<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 差集（扣除）list1扣除list2</span>
    Collection subtract <span class="token operator">=</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"subtract:{}"</span><span class="token punctuation">,</span> subtract<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 结果</span>
union<span class="token operator">:</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> C<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> z<span class="token punctuation">]</span>
intersection<span class="token operator">:</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> e<span class="token punctuation">]</span>
disjunction<span class="token operator">:</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> C<span class="token punctuation">,</span> d<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> z<span class="token punctuation">]</span>
subtract<span class="token operator">:</span><span class="token punctuation">[</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">]</span></code></pre>
<h3 id="判断相等"><a href="#判断相等" class="headerlink" title="判断相等"></a>判断相等</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEqual</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"f"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 比较值 false</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"isEqualCollection:{}"</span><span class="token punctuation">,</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">isEqualCollection</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list3 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list4 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 比较值 true</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"isEqualCollection:{}"</span><span class="token punctuation">,</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">isEqualCollection</span><span class="token punctuation">(</span>list3<span class="token punctuation">,</span> list4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@NoArgsConstructor</span>
    <span class="token annotation punctuation">@AllArgsConstructor</span>
    <span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    String name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    List<span class="token operator">&lt;</span>Person<span class="token operator">></span> boy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boy1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token string">"阿牛"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Person<span class="token operator">></span> boy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boy2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token string">"阿牛"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 比较集合中不同对象 false</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"isEqualCollection:{}"</span><span class="token punctuation">,</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">isEqualCollection</span><span class="token punctuation">(</span>boy1<span class="token punctuation">,</span> boy2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    Boy boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Boy<span class="token operator">></span> boy3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boy3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Boy<span class="token operator">></span> boy4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    boy4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 比较集合中相同对象 true</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"isEqualCollection:{}"</span><span class="token punctuation">,</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">isEqualCollection</span><span class="token punctuation">(</span>boy3<span class="token punctuation">,</span> boy4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUnmodifiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 抓换为不可变集合，添加数据会报错</span>
    Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> collection <span class="token operator">=</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">unmodifiableCollection</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"collection:{}"</span><span class="token punctuation">,</span> collection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true">// Collections.unmodifiableCollection可以得到一个集合的镜像，它的返回结果是不可直接被改变，否则会提示错误</span>
java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>UnsupportedOperationException
at org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>UnmodifiableCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UnmodifiableCollection<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">75</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Comparable和Comparator的区别</title>
    <url>/2019/02/17/chinese-sort/</url>
    <content><![CDATA[<h2 id="Comparable"><a href="#Comparable" class="headerlink" title="Comparable"></a><strong>Comparable</strong></h2><p>Comparable可以认为是一个<strong>内比较器</strong>，实现了Comparable接口的类有一个特点，就是这些类是可以和自己比较的，至于具体和另一个实现了Comparable接口的类如何比较，则依赖compareTo方法的实现，compareTo方法也被称为<strong>自然比较方法</strong>。如果开发者add进入一个Collection的对象想要Collections的sort方法帮你自动进行排序的话，那么这个对象必须实现Comparable接口。compareTo方法的返回值是int，有三种情况：</p>
<p>1、比较者大于被比较者（也就是compareTo方法里面的对象），那么返回正整数</p>
<p>2、比较者等于被比较者，那么返回0</p>
<p>3、比较者小于被比较者，那么返回负整数</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Domain</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Domain<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String str<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Domain</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Domain domain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>domain<span class="token punctuation">.</span>str<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>domain<span class="token punctuation">.</span>str<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> String <span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> str<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Domain d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Domain d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Domain d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Domain d4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>d4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 输出结果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token operator">-</span><span class="token number">1</span></code></pre>
<h2 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h2><p>Comparator可以认为是是一个<strong>外比较器</strong>，个人认为有两种情况可以使用实现Comparator接口的方式：</p>
<p>1、一个对象不支持自己和自己比较（没有实现Comparable接口），但是又想对两个对象进行比较</p>
<p>2、一个对象实现了Comparable接口，但是开发者认为compareTo方法中的比较方式并不是自己想要的那种比较方式</p>
<p>Comparator接口里面有一个compare方法，方法有两个参数T o1和T o2，是泛型的表示方式，分别表示待比较的两个对象，方法返回值和Comparable接口一样是int，有三种情况：</p>
<p>1、o1大于o2，返回正整数</p>
<p>2、o1等于o2，返回0</p>
<p>3、o1小于o3，返回负整数</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DomainComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Domain<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Domain domain1<span class="token punctuation">,</span> Domain domain2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>domain1<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>domain2<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>domain1<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>domain2<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Domain d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Domain d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Domain d3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Domain d4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Domain</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    DomainComparator dc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DomainComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 输出结果</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token operator">-</span><span class="token number">1</span></code></pre>
<p>因为泛型指定死了，所以实现Comparator接口的实现类只能是两个相同的对象（不能一个Domain、一个String）进行比较了，因此实现Comparator接口的实现类一般都会以”待比较的实体类+Comparator”来命名</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、如果实现类没有实现Comparable接口，又想对两个类进行比较（或者实现类实现了Comparable接口，但是对compareTo方法内的比较算法不满意），那么可以实现Comparator接口，自定义一个比较器，写比较算法</p>
<p>2、实现Comparable接口的方式比实现Comparator接口的耦合性 要强一些，如果要修改比较算法，要修改Comparable接口的实现类，而实现Comparator的类是在外部进行比较的，不需要对实现类有任何修 改。从这个角度说，其实有些不太好，尤其在我们将实现类的.class文件打成一个.jar文件提供给开发者使用的时候。实际上实现Comparator 接口的方式后面会写到就是一种典型的<strong>策略模式</strong>。</p>
<h2 id="中文实现排序"><a href="#中文实现排序" class="headerlink" title="中文实现排序"></a>中文实现排序</h2><h4 id="treeMap-方式"><a href="#treeMap-方式" class="headerlink" title="treeMap 方式"></a>treeMap 方式</h4><pre class=" language-java"><code class="language-java">
<span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CollatorComparator comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollatorComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    TreeMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> sortMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sortMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"500"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sortMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"安徽"</span><span class="token punctuation">,</span> <span class="token string">"100000000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sortMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"中山"</span><span class="token punctuation">,</span> <span class="token string">"9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sortMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"潮州"</span><span class="token punctuation">,</span> <span class="token string">"8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//注意：每次对TreeMap进行put()时，TreeMap都会自动调用它的compare(key,Entry.key)</span>
    <span class="token comment" spellcheck="true">//按照key进行排序</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sortMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CollatorComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>
    Collator collator <span class="token operator">=</span> Collator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Object element1<span class="token punctuation">,</span> Object element2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        CollationKey key1 <span class="token operator">=</span> collator<span class="token punctuation">.</span><span class="token function">getCollationKey</span><span class="token punctuation">(</span>element1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CollationKey key2 <span class="token operator">=</span> collator<span class="token punctuation">.</span><span class="token function">getCollationKey</span><span class="token punctuation">(</span>element2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> key1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="Comparator-方式"><a href="#Comparator-方式" class="headerlink" title="Comparator 方式"></a>Comparator 方式</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Comparator<span class="token operator">&lt;</span>Object<span class="token operator">></span> com <span class="token operator">=</span> Collator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    String<span class="token punctuation">[</span><span class="token punctuation">]</span> newArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"中山"</span><span class="token punctuation">,</span> <span class="token string">"汕头"</span><span class="token punctuation">,</span> <span class="token string">"广州"</span><span class="token punctuation">,</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"安庆"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"阳江"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">,</span> <span class="token string">"武汉"</span><span class="token punctuation">,</span> <span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"安阳"</span><span class="token punctuation">,</span> <span class="token string">"北方"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>com<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>String i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>使用wget或者curl下载github release文件</title>
    <url>/2020/02/14/cmd-download-file/</url>
    <content><![CDATA[<p>有时候需要在服务器下载GitHub上的release资源，这时候我们可以使用<code>wget</code>或者<code>curl</code>进行处理，这里拿携程开源的配置中心<a href="https://github.com/ctripcorp/apollo">Apollo</a>为例，下载他的release版本</p>
<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p><code>wget --no-check-certificate --content-disposition https://github.com/ctripcorp/apollo/releases/download/v1.5.1/apollo-adminservice-1.5.1-github.zip</code></p>
<h2 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h2><p><code>curl -LJO https://github.com/ctripcorp/apollo/releases/download/v1.5.1/apollo-adminservice-1.5.1-github.zip</code></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose-基础</title>
    <url>/2018/07/11/docker-compose-start/</url>
    <content><![CDATA[<h3 id="docker-compose介绍"><a href="#docker-compose介绍" class="headerlink" title="docker-compose介绍"></a>docker-compose介绍</h3><p>Docker-Compose 是 Docker 的一种编排服务，是一个用于在 Docker 上定义并运行复杂应用的工具，可以让用户在集群中部署分布式应用。</p>
<p> Compose 中有两个重要的概念：</p>
<ul>
<li>服务 (service) ：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 (project) ：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</li>
</ul>
<p>一个项目可以由多个服务（容器）关联而成，Compose 面向项目进行管理，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>
<p>Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 Compose 来进行编排管理。</p>
<h3 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h3><p>docker-compose 是 Docker 的独立产品，因此需要安装 Docker 之后在单独安装 Docker Compose 。</p>
<pre class=" language-shell"><code class="language-shell">#下载
sudo curl -L https://github.com/docker/compose/releases/download/1.20.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

#安装
chmod +x /usr/local/bin/docker-compose

# 显示docker-compose版本
docker-compose version</code></pre>
<p>docker-compose补全工具安装</p>
<pre class=" language-shell"><code class="language-shell">#安装
yum install bash-completion

#下载docker-compose脚本
curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose version --short)/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose</code></pre>
<p>docker-compose常用命令</p>
<pre class=" language-shell"><code class="language-shell">#查看帮助
docker-compose -h

# -f  指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定。
docker-compose -f docker-compose.yml up -d 

#启动所有容器，-d 将会在后台启动并运行所有的容器
docker-compose up -d

#停用移除所有容器以及网络相关
docker-compose down

#查看服务容器的输出
docker-compose logs

#列出项目中目前的所有容器
docker-compose ps

#构建（重新构建）项目中的服务容器。服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。可以随时在项目目录下运行 docker-compose build 来重新构建服务
docker-compose build

#拉取服务依赖的镜像
docker-compose pull

#重启项目中的服务
docker-compose restart

#删除所有（停止状态的）服务容器。推荐先执行 docker-compose stop 命令来停止容器。
docker-compose rm 

#在指定服务上执行一个命令。
docker-compose run ubuntu ping docker.com

#设置指定服务运行的容器个数。通过 service=num 的参数来设置数量
docker-compose scale web=3 db=2

#启动已经存在的服务容器。
docker-compose start

#停止已经处于运行状态的容器，但不删除它。通过 docker-compose start 可以再次启动这些容器。
docker-compose stop</code></pre>
<p>本篇全是基本的安装和命令，下篇通过docker和docker-compose构建一些常用的软件运行环境</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.ityouknow.com/docker/2018/03/22/docker-compose.html">Docker(四)：Docker 三剑客之 Docker Compose</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docke-安装</title>
    <url>/2018/07/10/docker-start/</url>
    <content><![CDATA[<h3 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h3><p>建议在linux环境下安装Docker，window环境搭建比较复杂且容易出错，使用Centos7+yum来安装Docker环境很方便。</p>
<pre class=" language-shell"><code class="language-shell"># 卸载旧版本docker
sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-selinux \
                  docker-engine-selinux \
                  docker-engine

# 安装yum-utils
sudo yum install -y yum-utils \
  device-mapper-persistent-data \
  lvm2

 # 配置docker-ce.repo
sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

# 安装docker-ce
sudo yum install docker-ce

# 启动docker
sudo systemctl start docker

# Docker守护进程自启动
sudo systemctl enable docker.service

# 显示docker版本
docker --version</code></pre>
<h3 id="设置中国镜像加速器"><a href="#设置中国镜像加速器" class="headerlink" title="设置中国镜像加速器"></a>设置中国镜像加速器</h3><pre class=" language-shell"><code class="language-shell"># 编辑daemon.json文件
vim /etc/docker/daemon.json

# 添加加速内容
{
    "registry-mirrors": ["https://registry.docker-cn.com"],
    "live-restore": true
}</code></pre>
<h3 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h3><ul>
<li>拉取镜像 <strong>docker pull [image_name]</strong></li>
</ul>
<pre class=" language-shell"><code class="language-shell"># 获取redis镜像
docker pull redis
Using default tag: latest
latest: Pulling from library/redis
683abbb4ea60: Pull complete
259238e792d8: Pull complete
78399601c709: Pull complete
f397da474601: Pull complete
c57de4edc390: Pull complete
b2ea05c9d9a1: Pull complete
Digest: sha256:5534b92530acc653f0721ebfa14f31bc718f68bf9070cbba25bb00bc7aacfabb
Status: Downloaded newer image for redis:latest</code></pre>
<ul>
<li>查看所有镜像**docker images **</li>
</ul>
<pre class=" language-shell"><code class="language-shell"># 查看所有镜像
docker images
REPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZE
jenkins                                             latest              e2541428ed0d        7 days ago          696MB
redis                                               latest              71a81cb279e3        13 days ago         83.4MB
zookeeper                                           latest              397be0d8fa45        3 weeks ago         146MB</code></pre>
<ul>
<li>删除镜像</li>
</ul>
<pre><code>docker rmi  redis  或者  docker rmi 71a81cb279e3</code></pre>
<ul>
<li>查看所有运行的容器<strong>docker ps</strong></li>
</ul>
<pre class=" language-shell"><code class="language-shell">docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES
eb5abaa4710a        mysql:5.7.20        "docker-entrypoint.s…"   6 weeks ago         Up 6 minutes        0.0.0.0:10100->3306/tcp   mysql

# 这里可以添加 -a 参数，查看所有容器，包括没有运行的</code></pre>
<ul>
<li>查看容器运行日志 **docker logs  -f –tail  20 [container_name] **</li>
</ul>
<pre class=" language-shell"><code class="language-shell"># -f 表示跟踪日志输出  --tail 表示持续输出 20表示第一次查看的行数 最后是容器名称
docker logs  -f --tail  20 [container_name]
2018-07-10T14:49:21.476230Z 0 [Warning] CA certificate ca.pem is self signed.
2018-07-10T14:49:21.481000Z 0 [Note] InnoDB: Buffer pool(s) load completed at 180710 </code></pre>
<ul>
<li>进入运行的容器**docker exec -it [container_name] bash **</li>
</ul>
<p>当然进入容器的方式很多，但是官方推荐此方式，其他方式感兴趣可以参考此文章：  </p>
<p><a href="https://github.com/cloudfstrife/note/blob/develop/docker/nsenter%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%9A%84Docker%E5%AE%B9%E5%99%A8.md"><strong>nsenter进入后台运行的Docker容器</strong></a></p>
<pre class=" language-shell"><code class="language-shell"># 进入容器
docker exec -it redis bash

# 退出容器
exit</code></pre>
<ul>
<li>删除所有停止的容器</li>
</ul>
<pre class=" language-shell"><code class="language-shell">docker rm $(docker ps -a -q)</code></pre>
<ul>
<li>删除容器</li>
</ul>
<pre class=" language-shell"><code class="language-shell">docker rm container_name/container_id</code></pre>
<ul>
<li>启动、停止、重启容器</li>
</ul>
<pre class=" language-shell"><code class="language-shell">docker start container_name/container_id
docker stop container_name/container_id
docker restart container_name/container_id</code></pre>
<h3 id="docker安装常见问题"><a href="#docker安装常见问题" class="headerlink" title="docker安装常见问题"></a>docker安装常见问题</h3><p>启动报错</p>
<pre><code>Job for docker.service failed. See 'systemctl status docker.service' and 'journalctl -xn' for details.</code></pre>
<p>解决方案1:</p>
<pre class=" language-shell"><code class="language-shell"># 查看SELinux状态：
/usr/sbin/sestatus -v ##如果SELinux status参数为enabled即为开启状态
SELinux status: enabled

getenforce ##也可以用这个命令检查
# 关闭SELinux：
1、临时关闭（不用重启机器）：
setenforce 0 ##设置SELinux 成为permissive模式
##setenforce 1 设置SELinux 成为enforcing模式
2、修改配置文件需要重启机器：
修改/etc/selinux/config 文件
将SELINUX=enforcing改为SELINUX=disabled
重启机器即可</code></pre>
<p>解决方案2:</p>
<pre class=" language-shell"><code class="language-shell"># 升级yum，重新安装docker
yum update

# 卸载docker
sudo yum -y remove docker-ce
sudo rm -rf /var/lib/docker
# 重新安装</code></pre>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/">docker官网</a></p>
<p><a href="http://blog.51cto.com/bguncle/957315">关闭SELinux</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>eclipse 使用 maven 构建web项目</title>
    <url>/2017/09/28/eclipse-mvn-build-web-project/</url>
    <content><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li><a href="http://maven.apache.org/download.cgi">apache-maven-3.3.9</a></li>
<li><a href="http://tomcat.apache.org/download-80.cgi">apache-tomcat-8.5.20</a></li>
<li><a href="https://www.eclipse.org/downloads/eclipse-packages/">eclipse-jee-neon-3</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html">jdk1.8.0_131</a></li>
</ul>
<h1 id="Maven基本配置-修改-setting-xml-文件"><a href="#Maven基本配置-修改-setting-xml-文件" class="headerlink" title="Maven基本配置 修改 setting.xml 文件"></a>Maven基本配置 修改 setting.xml 文件</h1><p>apache-tomcat-8.5.20/conf/settings.xml</p>
<blockquote>
<p>1.仓库本地存储位置 </p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-c8fb765b2c991b72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本地仓库位置"></p>
<blockquote>
<p>2.配置阿里云国内的中央仓库，提升下载速度  mirrors 节点内</p>
</blockquote>
<pre><code>&lt;mirror&gt;
        &lt;!-- 配置 阿里云 maven 镜像仓库，提升国内下载速度 --&gt;
        &lt;id&gt;alimaven&lt;/id&gt;
            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
            &lt;name&gt;aliyun maven&lt;/name&gt;
            &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;
        &lt;/mirror&gt;

        &lt;mirror&gt;
            &lt;id&gt;repo1&lt;/id&gt;
            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;
            &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;
        &lt;/mirror&gt;

        &lt;mirror&gt;
            &lt;id&gt;repo2&lt;/id&gt;
            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;
            &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;
        &lt;/mirror&gt;
  &lt;/mirrors&gt;</code></pre>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-fdbaf1e3853ed100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="阿里云maven镜像"></p>
<blockquote>
<p>3.配置编译时的jdk版本，可以在这里配置全局，也可以根据项目配置  profiles 节点内</p>
</blockquote>
<pre><code>&lt;profile&gt;
    &lt;!-- 配置全局的jdk --&gt;
        &lt;id&gt;jdk1.8&lt;/id&gt;    
        &lt;activation&gt;   
            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;    
            &lt;jdk&gt;1.8&lt;/jdk&gt;   
        &lt;/activation&gt;    
        &lt;properties&gt;   
            &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;    
            &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;    
            &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;   
        &lt;/properties&gt; 
    &lt;/profile&gt;</code></pre>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-e1f345185ced9580.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="全局的jdk版本配置"></p>
<h1 id="eclipse-集成maven插件"><a href="#eclipse-集成maven插件" class="headerlink" title="eclipse 集成maven插件"></a>eclipse 集成maven插件</h1><p><img src="http://upload-images.jianshu.io/upload_images/7779890-28a74e4a3f382413.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eclipse配置maven"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-88b11320dd52174c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置全局参数"></p>
<h1 id="新建maven项目"><a href="#新建maven项目" class="headerlink" title="新建maven项目"></a>新建maven项目</h1><p><img src="http://upload-images.jianshu.io/upload_images/7779890-6604d11226479dcf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建maven项目"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-997fc5ccae6f10b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建maven项目"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-99ce19045b39d6e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建maven项目"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-9909613ef55aadd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构"></p>
<h1 id="将项目转换成maven-web-项目"><a href="#将项目转换成maven-web-项目" class="headerlink" title="将项目转换成maven web 项目"></a>将项目转换成maven web 项目</h1><p>右键打开项目设置</p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-ee1c890c8ecfe527.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改项目结构"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-a498a41384ef79f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成web.xml"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-20c12ea65ea902f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改以后的项目结构"></p>
<ul>
<li>但是现在这个不是一个标准的web项目，继续修改项目结构，将WebContent目录下的文件拷贝到main/webapp目录下面，删除WebContent目录，结构如下</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-bc62b88cce18515e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除WebContent目录以后"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-6cd7c408aea55e6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除WebContent"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-0589e69ddc98be2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="指定 webapp 目录"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-0c5d4e9d5aeecea0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择 webapp "></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-7d291661d94d9456.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择 webapp"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-6731709025e9acdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改完成以后的目录结构"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-b47340bc89895406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更新项目maven配置"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-1ec60f2529acf211.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提示更新"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-6a9678cfb6fa765a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误解决以后成为一个标准的web项目"></p>
<h1 id="配置运行该项目"><a href="#配置运行该项目" class="headerlink" title="配置运行该项目"></a>配置运行该项目</h1><blockquote>
<ol>
<li>在webapp右键新建一个html 文件</li>
</ol>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-081eca38dc3869be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建 html 文件，编写内容"></p>
<blockquote>
<p>2.配置 tomcat</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-ebc8d197b81f8a55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置运行项目"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-628a5eaeca05c239.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择tomcat对应的版本"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-97c2fb6d82f0dd12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择 tomcat 安装路径"></p>
<blockquote>
<p>3.运行</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/7779890-ef7e7c1fcba3897b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行项目"></p>
<h1 id="eclipse-集成-maven-构建-web-项目完成"><a href="#eclipse-集成-maven-构建-web-项目完成" class="headerlink" title="eclipse 集成 maven 构建 web 项目完成"></a>eclipse 集成 maven 构建 web 项目完成</h1><ul>
<li>最后推荐一篇文章：在 idea 中如何使用 maven 构建项目<br><a href="https://yq.aliyun.com/articles/111053">https://yq.aliyun.com/articles/111053</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>FTP 常用命令</title>
    <url>/2019/12/12/ftp-command/</url>
    <content><![CDATA[<p>FTP是可用于许多不同操作系统上的协议。如果 FTP 服务器端允许 PASV 被动模式，可以用浏览器访问 FTP ，也可以使用FTP命令，直接与远程计算机连接。</p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>Linux 终端直接敲入 ftp 回车，或者按照下面模式，直接连入 FTP 服务器：</p>
<p>   *~&gt;ftp 服务器地址（IP或URL）<br>      …<br>      Name …:用户名<br>      …<br>      Password:密码<br>      …<br>      ftp&gt;<br>     连接成功<br>如果希望匿名登录，使用用户名密码全部是ftp，或者用户 Anonymous 密码为空。</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="目录命令"><a href="#目录命令" class="headerlink" title="目录命令"></a>目录命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>pwd</td>
<td>显示远程计算机上的当前目录</td>
</tr>
<tr>
<td>ls/dir</td>
<td>列出当前远程目录的内容，可以使用该命令在Linux下的任何合法的ls选项</td>
</tr>
<tr>
<td>cd</td>
<td>移动到cd 后的目录</td>
</tr>
<tr>
<td>cdup/cd ..</td>
<td>返回上一级目录</td>
</tr>
<tr>
<td>lcd</td>
<td>列出当前本地目录路径</td>
</tr>
</tbody></table>
<h2 id="需要权限的命令"><a href="#需要权限的命令" class="headerlink" title="需要权限的命令"></a>需要权限的命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>mkdir</td>
<td>在远程系统中创建目录</td>
</tr>
<tr>
<td>rname</td>
<td>重命名一个文件或目录</td>
</tr>
<tr>
<td>redir</td>
<td>删除远程目录</td>
</tr>
<tr>
<td>delete</td>
<td>删除远程文件</td>
</tr>
<tr>
<td>mdelete</td>
<td>删除多个远程文件</td>
</tr>
</tbody></table>
<h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>binary/bin</td>
<td>用于二进制文件传送（图像文件等）</td>
</tr>
<tr>
<td>ascii</td>
<td>用于文本文件传送</td>
</tr>
<tr>
<td>get/mget</td>
<td>在当前远程目录下复制（一个/多个）文件到本地文件系统当前目录</td>
</tr>
<tr>
<td>put/mput</td>
<td>从当前目录把文件复制到当前远程目录</td>
</tr>
<tr>
<td>prompt</td>
<td>关闭二次确认时的提示</td>
</tr>
</tbody></table>
<h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>临时退出ftp模式，返回本地Linux Shell模式，键入exit返回</td>
</tr>
<tr>
<td>close</td>
<td>关闭当前连接</td>
</tr>
<tr>
<td>bye</td>
<td>关闭连接并退出ftp命令模式</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2019/01/29/git-command/</url>
    <content><![CDATA[<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h3 id="使用Git生成ssh密钥"><a href="#使用Git生成ssh密钥" class="headerlink" title="使用Git生成ssh密钥:"></a>使用Git生成ssh密钥:</h3><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "email@example.com"</code></pre>
<h3 id="设置全局用户名和邮箱"><a href="#设置全局用户名和邮箱" class="headerlink" title="设置全局用户名和邮箱:"></a>设置全局用户名和邮箱:</h3><pre class=" language-shell"><code class="language-shell">git config --global user.name "YourName"
git config --global user.email "email@example.com"</code></pre>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><pre class=" language-shell"><code class="language-shell">git init</code></pre>
<h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><pre class=" language-shell"><code class="language-shell">git add <filename>    #添加指定文件到暂存区
git add .    #添加工作区所有文件到暂存区
git add -i    #交互方式添加文件到暂存区
git add -u    #将工作区中已经变动的文件添加到暂存区，当新增加的文件不会被添加</code></pre>
<h3 id="提交文件到仓库"><a href="#提交文件到仓库" class="headerlink" title="提交文件到仓库"></a>提交文件到仓库</h3><pre class=" language-shell"><code class="language-shell">git commit -m "描述信息"        #提交更新
git commit -am "描述信息"    #如果工作目录中仅是已跟踪的文件被修改或被删除，使用此提交命令</code></pre>
<h3 id="分支的创建、删除、和平、切换、查看"><a href="#分支的创建、删除、和平、切换、查看" class="headerlink" title="分支的创建、删除、和平、切换、查看"></a>分支的创建、删除、和平、切换、查看</h3><pre class=" language-shell"><code class="language-shell">git branch    #查看Git仓库中已有的分支
git branch 新分支名 [分支起点]    #创建分支，如果没有分支起点的话，则默认在当前分支的最新提交上创建分支
git checkout 分支名    #切换分支
git checkout -b 新分支名        #创建同时切换到新分支
git merge 要被合并的分支名    #合并分支
git branch -d 要删除的分支名    #删除指定分支（如果分支没有被合并过，该命令会执行失败）
git branch -D 要删除的分支名    #删除指定分支，不管有没有被合并过
gitk                #用图形界面查看分支提交历史</code></pre>
<blockquote>
<p>合并分支过程中如果发生冲突则需要自己手动解决冲突，然后再提交。有冲突时，Git会显示哪个文件有冲突，并在冲突的文件中加上特殊的标识符号，解决完冲突后，要手动去掉这些被添加的标识符号。如果冲突比较复杂的话，最好使用其他工具来协助，通过git mergetool来启动。冲突一般是在不同的分支上对同一文件的同一位置内容进行了改动，并已提交到仓库中，这样在合并的时候就会发生冲突。</p>
</blockquote>
<h3 id="标签的添加、删除、查看"><a href="#标签的添加、删除、查看" class="headerlink" title="标签的添加、删除、查看"></a>标签的添加、删除、查看</h3><pre class=" language-shell"><code class="language-shell">git tag        #查看标签
git tag 标签名    #创建简单的标签
git tag -a 标签名 -m '附加信息'    #创建附加信息的标签
git show 标签名    #通过标签查看信息
git tag -d 标签名    #删除标签</code></pre>
<blockquote>
<p>标签可以在需要的地方，为某个提交对象创建别名，这样以后我们就可以通过标签来查看一些信息，创建分支等。</p>
</blockquote>
<h3 id="查看工作目录状态"><a href="#查看工作目录状态" class="headerlink" title="查看工作目录状态"></a>查看工作目录状态</h3><pre class=" language-shell"><code class="language-shell">git status</code></pre>
<blockquote>
<p>在git命令执行后，要养成通过git status查看git状态的习惯，以便及时了解文件变化的情况。通过git status可以知道文件的状态（已修改未暂存、已删除、已修改并已暂存等待提交、未跟踪）。</p>
</blockquote>
<h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><pre class=" language-shell"><code class="language-shell">git log
git log -p    #显示每次提交文件变化</code></pre>
<blockquote>
<p>通过git log可以查看当前分支的所有提交历史，知道每次提交的commit对象的ID以及提交时附加的描述信息等。要显示更多的信息，需要使用其支持的选项，如git log -p可以将每次提交的文件变化也显示出来。</p>
</blockquote>
<h3 id="查看指定的提交对象"><a href="#查看指定的提交对象" class="headerlink" title="查看指定的提交对象"></a>查看指定的提交对象</h3><pre class=" language-shell"><code class="language-shell">git show commit_id    #查看指定的某次提交内容
git show --all        #显示所有的提交历史内容
git shortlog -s -n    #显示总的提交次数</code></pre>
<blockquote>
<p>通过<code>git log</code>可以显示整个提交历史，而通过<code>git show commit-id</code>则可以查看指定的某次提交内容，当然<code>git show -all</code>也可以显示出提交历史，另外还可以格式化显示内容。</p>
</blockquote>
<p><strong>Note : commit-id可以是commit对象对应的ID，也可以是HEAD，分支名，tag等。</strong></p>
<h3 id="查看工作区、暂存区、仓库之间的差异"><a href="#查看工作区、暂存区、仓库之间的差异" class="headerlink" title="查看工作区、暂存区、仓库之间的差异"></a>查看工作区、暂存区、仓库之间的差异</h3><pre class=" language-shell"><code class="language-shell">git diff        #比较工作区与暂存区的差异
git diff HEAD        #比较工作区与仓库中最近一次的提交间的差异
git diff --cached    #比较暂存区与仓库中最近一次提交的差异
git blame filename    #可以列出该文件每次被修改的时间和内容。</code></pre>
<h3 id="版本回退、撤销操作"><a href="#版本回退、撤销操作" class="headerlink" title="版本回退、撤销操作"></a>版本回退、撤销操作</h3><pre class=" language-shell"><code class="language-shell">git reflog    #显示提交历史的简介
git checkout -- filename    #丢弃工作区的修改
git reset --hard HEAD^        #回退到上一个版本
git reset --hard commit_id    #回退到指定版本
git checkout -- filename    #恢复工作区被删除的指定文件（文件之前被提交到仓库中）
git checkout -f         #恢复工作区中所有被删除的文件(文件之前被提交到仓库中)
git ls-files -d            #列出工作区被删除的文件（文件之前被提交到仓库中）</code></pre>
<blockquote>
<p>有时候，由于我们的误操作，产生了一些错误，我们发现后希望能够及时纠正这些因为误操作而产生的结果，将工作目录恢复到某个正常状态。</p>
</blockquote>
<ul>
<li>撤销修改，但还没有添加到暂存区： <code>git checkout -- filename</code> 修改的文件会被恢复到上次提交时的状态，修改的内容会丢失。</li>
<li>版本回退：先通过<code>git reflog</code>找到某个版本的<code>commit_id</code>，然后用<code>git reset --hard commit_id</code>将工作目录的文件恢复到指定的版本。</li>
<li>恢复工作区中被删除的文件（文件之前被提交到仓库中）：<code>git checkout -- filename</code> 或 <code>git checkout -f</code></li>
</ul>
<h3 id="备份工作区"><a href="#备份工作区" class="headerlink" title="备份工作区"></a>备份工作区</h3><pre class=" language-shell"><code class="language-shell">git stash            #将工作区文件保存在Git内部栈中
git stash list            #列出Git内部栈中保存的工作区文件列表
git stash apply stash_id    #恢复工作区到指定的内部栈状态
git stash pop            #恢复工作区到上一个内部栈状态
git stash clear            #清空Git内部栈</code></pre>
<blockquote>
<p>如果正在一个develop分支上正在开发新功能，但这时master分支(稳定版本)突然发现了bug，并需要及时修复，而develop分支此时的工作还没有完成，且不希望将之前的工作就这样提交到仓库中时，这时就可以用<code>git stash</code>来暂时保存这些状态到Git内部栈中，并用当前分支上一次的提交内容来恢复工作目录，然后切换到master分支进行bug修复工作，等修复完毕并提交到仓库上后，再使用<code>git stash apply [stash@{0}]</code>或者<code>git stash pop</code>将工作目录恢复到之前的状态，继续之前的工作。</p>
</blockquote>
<blockquote>
<p>同时也可以多次使用git stash将未提交的代码压入到Git栈中，但当多次使用<code>git stash</code>命令后，Git栈里将充满了未提交的代码，这时候到底要用哪个版本来恢复工作目录呢？<code>git stash list</code>命令可以将当前的Git栈信息打印出来，我们只需要将找到对应的版本号，例如使用<code>git stash apply stash@{1}</code>就可以用版本号为stash@{1}的内容来恢复工作目录。</p>
</blockquote>
<blockquote>
<p>当Git栈中所有的内容都被恢复后，可以使用<code>git stash clear</code>来将栈清空。</p>
</blockquote>
<h3 id="将当前工作区目录文件压缩归档"><a href="#将当前工作区目录文件压缩归档" class="headerlink" title="将当前工作区目录文件压缩归档"></a>将当前工作区目录文件压缩归档</h3><pre class=" language-shell"><code class="language-shell">git archive --format=zip -o arch.zip HEAD
git arch --format zip head>arch.zip</code></pre>
<h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><blockquote>
<p>Git相比其他版本控制软件的一个优点就是大多数的操作都可以在本地进行，而不用管远程的仓库，因为操作是在本地，且操作的数据也是在本地，加上指针等原因，所以执行的速度就会比较快。 在多人协作的项目中，就需要涉及与远程仓库交互的问题，主要是如何从远程仓库抓取最新数据合并到自己的本地分支上，将自己的最新成果分享给其他人或让别人审查等 。</p>
</blockquote>
<h3 id="远程仓库的克隆、添加、查看"><a href="#远程仓库的克隆、添加、查看" class="headerlink" title="远程仓库的克隆、添加、查看"></a>远程仓库的克隆、添加、查看</h3><pre class=" language-shell"><code class="language-shell">git remote    #显示已添加的远程仓库名
git remote -v     #显示已添加的远程仓库名和地址
git remote add 远程仓库名 远程仓库地址    #在本地添加远程仓库
git remote rm 远程仓库名            #删除本地添加的远程仓库名
git remote rename 原名 新名        #重命名远程仓库名
git clone 远程仓库地址 [克隆到指定的文件夹]    #克隆远程仓库到本地
git clone -b [branch-name] 远程仓库地址 [克隆到指定的文件夹]    #克隆远程仓库到本地 -b
git fetch 远程仓库名        #从远程仓库抓取最新数据到本地但不与本地分支进行合并 
git pull 远程仓库名    本地要合并的分支名    #从远程仓库抓取最新数据并自动与本地分支进行合并
git push 远程仓库名 本地分支名    #将本地仓库推送到远程仓库中
git remote show 远程仓库名    #查看远程仓库信息
git remote show            #查看所有远程仓库
git push 远程仓库名 标签名    #将标签推送到远程仓库（Git默认不推送标签）</code></pre>
<h3 id="协同流程"><a href="#协同流程" class="headerlink" title="协同流程"></a>协同流程</h3><ul>
<li>Fork远程项目</li>
<li>把Fork的项目clone到本地</li>
<li>执行以下命令，将别人的库添加为远端库</li>
</ul>
<pre class=" language-shell"><code class="language-shell">git remote add 远端仓库名 远端的分支</code></pre>
<ul>
<li>运行以下命令，拉去合并到本地</li>
</ul>
<pre class=" language-shell"><code class="language-shell">git pull 远端仓库名 远端分支名</code></pre>
<ul>
<li>编辑内容</li>
<li>commit之后push到自己的库</li>
<li>登录Github，在你的首页可以看到一个<code>pull request</code>按钮，点击它，填写一些说明信息，提交即可。</li>
</ul>
<blockquote>
<p>在本地编辑内容前必须执行pull操作同步别人的远端库（这样避免冲突）</p>
</blockquote>
<h3 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h3><blockquote>
<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再使用<code>git stash pop</code>，回到工作现场.</p>
</blockquote>
<h3 id="多人协作技巧"><a href="#多人协作技巧" class="headerlink" title="多人协作技巧"></a>多人协作技巧</h3><blockquote>
<p>查看远程库信息，使用git remote -v；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>从本地推送分支，使用<code>git push 远程仓库名 分支名</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；<br>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；<br>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；<br>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Go服务跨平台交叉编译打包与设置版本号</title>
    <url>/2021/10/11/golang-goarch-goos-mutiple-platform-build/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  最近在负责维护和开发守护进程、运营平台监控、连接池等相关Go服务，首先守护进程服务是部署在客户的windows平台下运行,其它大部分服务都是部署在linux环境下,首先现在面临的一个问题就是如果在一台机器上进行跨平台交叉编译后可以在主流的Mac OS, Linux, Windows上运行。如何让每次发布的时候，自动带上版本号软件包呢？这下就轮到Makefile上场了……<br> 这里主要介绍一下如何用Makefile以及Go本身所支持的编译特性，实现编译时自动生成版本号的功能。<br> 在开始之前，假设我们程序发布的流程是这样：</p>
<blockquote>
<p>1、编码完成，提交测试工程师测试<br>   2、测试工程师测试出的bug都已解决，并重新测试和验证通过<br>   3、工程师把修复好bug的代码合并到release分支，并建立git tag：2020-03011-release，准备用于最终程序的构建，发布和部署</p>
</blockquote>
<p> 在编译生成最终要发布的程序时，我们希望程序可以通过 -v 参数，提供如下的版本信息：</p>
<blockquote>
<p>BTIME: 显示程序编译和构建时的日期<br>  GITHEAD: 显示程序当前代码的git tag，用以在程序出现问题时，查找和定位对应版本的源代码</p>
</blockquote>
<p> 首先，我们需要实现一个demo程序，用于接收 -v 参数，在运行的时候，显示当前程序的编译构建时间，以及代码编译时所使用的git tag名称：   </p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
   <span class="token string">"flag"</span>
   <span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
   GITHEAD    <span class="token operator">=</span> <span class="token string">"2020-03-11-release"</span>
 BTIME <span class="token operator">=</span> <span class="token string">"2020-03-11 16:01:00:080"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   version <span class="token operator">:=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"v"</span><span class="token punctuation">,</span> <span class="token string">"2020-03-12-release"</span><span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">)</span>
   flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

   <span class="token keyword">if</span> version <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"GITHEAD: "</span> <span class="token operator">+</span> GITHEAD<span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"BTIME: "</span> <span class="token operator">+</span> BTIME<span class="token punctuation">)</span>
      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"version: "</span><span class="token punctuation">,</span> <span class="token operator">*</span>version<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>在程序中，我们为GITHEAD和BTIME定义了默认值。运行起来，是这样的：<br><img src="/images/golang-goarch-goos-mutiple-platform-build/golang-goos-build-mutiple-platform-build-set-version.jpg" alt="交叉编译设置版本号"><br>我们已经有了一个程序，接收 -v 参数，并且能输出程序对应的GITHEAD和构建时间。不过不足的地方在于，每一次发布程序的时候，我们需要手动修改这两个值，再进行编译，非常不人性化，而且在发布程序的时候，总会忘掉这一步。于是，得用上Go的build -ldflags所提供的一个功能：-X 参数,使用-X参数，允许我们在编译构建Go程序的时候，传入自定义的值，覆盖对应的import path下的指定变量。于是，我们可以在编译程序的时候这么干: </p>
<p>go build -ldflags “-X main.GITHEAD=2020.03.13.release -X main.BTIME=2020-03-13 16:01:00:080” main.go</p>
<p>编译成功后，运行 ./main -v 程序输出：<br><img src="/images/golang-goarch-goos-mutiple-platform-build/golang-goos-build-mutiple-platform-build-set-time.jpg" alt="交叉编译外部设置编译时间"><br>到目前为止，我们已经成功的实现了”Compile time variables”，这意味着在编译时，动态传入参数和值，让程序在编译的时候，动态生成我们所指定的版本号。不过，这个GITHEAD和BITIME是在我们编译的时候指定的，而且编译的命令很长，作为一个懒惰的程序员，每次编译的时候敲这么长的命令是很磨人的。得用一种更灵活的方法来实现编译时传入参数，可选的方式大概有两种：</p>
<blockquote>
<p>1、写一个shell脚本来实现编译的自动化<br> 2、写一个Makefile文件，用make命令来编译</p>
</blockquote>
<p>shell脚本是一种比较常用的方式，这次我们来体验一下用Makefile实现Go程序的编译。于是，我又折腾出来了一个Makefile文件:</p>
<pre class=" language-shell"><code class="language-shell">NAME=project_nameBINDIR=GITV=BVERSION=BUILDTIME=GOBUILD=  PLATFORM_LIST =                WINDOWS_ARCH_LIST =   all: darwin-amd64:
 GOARCH=amd64 GOOS=darwin $ -o $/$-$@

linux-386:
 GOARCH=386 GOOS=linux $ -o $/$-$@

linux-amd64:
 GOARCH=amd64 GOOS=linux $ -o $/$linux-armv5:
 GOARCH=arm GOOS=linux GOARM=5 $ -o $/$-$@

linux-armv6:
 GOARCH=arm GOOS=linux GOARM=6 $ -o $/$-$@

linux-armv7:
 GOARCH=arm GOOS=linux GOARM=7 $ -o $/$-$@

linux-armv8:
 GOARCH=arm64 GOOS=linux $ -o $/$-$@

linux-mips-softfloat:
 GOARCH=mips GOMIPS=softfloat GOOS=linux $ -o $/$-$@

linux-mips-hardfloat:
 GOARCH=mips GOMIPS=hardfloat GOOS=linux $ -o $/$-$@

linux-mipsle-softfloat:
 GOARCH=mipsle GOMIPS=softfloat GOOS=linux $ -o $/$-$@

linux-mipsle-hardfloat:
 GOARCH=mipsle GOMIPS=hardfloat GOOS=linux $ -o $/$-$@

linux-mips64:
 GOARCH=mips64 GOOS=linux $ -o $/$-$@

linux-mips64le:
 GOARCH=mips64le GOOS=linux $ -o $/$-$@

freebsd-386:
 GOARCH=386 GOOS=freebsd $ -o $/$-$@

freebsd-amd64:
 GOARCH=amd64 GOOS=freebsd $ -o $/$-$@

windows-386:
 GOARCH=386 GOOS=windows $ -o $/$-$@.exe

windows-amd64:
 GOARCH=amd64 GOOS=windows $ -o $/$-$@.exe

gz_releases=zip_releases=$(gz_releases): %.gz :   +x $/$-$ $@  -f -S -$.gz $/$-$ $@$(zip_releases): %.zip :   -m -j $/$-$ $@-$.zip $/$-$ $@.exe

all-arch: releases: clean:
  $/*</code></pre>
<p>最后，我们直接用make命令传递参数，来编译我们的程序：<br><img src="/images/golang-goarch-goos-mutiple-platform-build/golang-makefile-run-example.jpg" alt="golang makeFile运行示例"><br>其中:</p>
<blockquote>
<p>GOOS：目标平台的操作系统（darwin、freebsd、linux、windows）<br> GOARCH：目标平台的体系架构（386、amd64、arm）交叉编译不支持 CGO 所以要禁用它</p>
</blockquote>
<p>当我们编译运行完成之后会发现在build目录下会生成我们所需要的不同平台下的可执行文件。最后我们需要注意,<code>如果不想在生成完毕的文件名称中带上平台名称的后缀,那么需要在执行不同平台命令的后面去掉 "-$@"</code> 相关配置信息。<br>后续还会继续在分享出来更多关于Go相关的文章内容,希望能与大家共同成长,一起进步。</p>
]]></content>
      <categories>
        <category>golang跨平台交叉编译</category>
      </categories>
      <tags>
        <tag>Goarch、Goos、Cgo</tag>
      </tags>
  </entry>
  <entry>
    <title>golang日志篇-log与fmt区别</title>
    <url>/2021/10/08/golang-log-with-fmt-different/</url>
    <content><![CDATA[<p>最近在排查golang服务上报丢失日志的问题。发现服务中记录日志的操作大部分使用都是golang log包下的工具类进行操作的,那么log与fmt二者有什么区别？通过下面的样例来具体了解下二者的区别。</p>
<h2 id="1-线程安全层面"><a href="#1-线程安全层面" class="headerlink" title="1:线程安全层面"></a>1:线程安全层面</h2><p>我们可以运行以下示例</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestFmtlog</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    group <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>
    group<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" %s\n"</span><span class="token punctuation">,</span> <span class="token string">"变量1"</span><span class="token punctuation">)</span>
            log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" %s\n"</span><span class="token punctuation">,</span> <span class="token string">"变量2"</span><span class="token punctuation">)</span>

            sigTerm <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
           log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>sigTerm<span class="token punctuation">)</span><span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"变量3"</span><span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"变量4"</span><span class="token punctuation">)</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>
            group<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    group<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>输出结果:<br><img src="/images/golang-log-with-fmt-different/golang-thread-safe-console.png" alt="golang线程安全控制台输出.png"><br>从中我们可以看到程序中由于使用fmt输出的顺序并不是一致的,也就是fm并不是线程安全的,那么我们试下去掉fmt的输出效果呢?<br>代码:</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestFmtlog</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    group <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>
    group<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" %s\n"</span><span class="token punctuation">,</span> <span class="token string">"变量1"</span><span class="token punctuation">)</span>
            log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" %s\n"</span><span class="token punctuation">,</span> <span class="token string">"变量2"</span><span class="token punctuation">)</span>
            group<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    group<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>输出效果:<br><img src="/images/golang-log-with-fmt-different/golang-log-println-console-example.png" alt="log-Println-safe.png"><br>从演示样例中我们可以看到,log.Println是线程安全的。到底是不是这样呢？我们先看下</p>
<h3 id="1、1-Logger的定义结构"><a href="#1、1-Logger的定义结构" class="headerlink" title="1、1 Logger的定义结构"></a>1、1 Logger的定义结构</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Logger <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    mu     sync<span class="token punctuation">.</span>Mutex <span class="token comment" spellcheck="true">// ensures atomic writes; protects the following fields</span>
    prefix <span class="token builtin">string</span>     <span class="token comment" spellcheck="true">// prefix to write at beginning of each line</span>
    flag   <span class="token builtin">int</span>        <span class="token comment" spellcheck="true">// properties</span>
    out    io<span class="token punctuation">.</span>Writer  <span class="token comment" spellcheck="true">// destination for output</span>
    buf    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>     <span class="token comment" spellcheck="true">// for accumulating text to write</span>
<span class="token punctuation">}</span></code></pre>
<p>主要有5个成员,分别的含义:<br>prefix:表示Log前缀的.<br>flag:表示Log头标签的<br>out:Log的输出目的地。<br>buf是一个字节数组，主要用来存放即将刷入out的内容，相当于一个临时缓存，在对输出内容进行序列化时作为存储目的地。<br>mu是一个mutex主要用来作线程安全的实习，当有多个goroutine同时往一个目的刷内容的时候，通过mutex保证每次写入是一条完整的信息。</p>
<h3 id="1-2-std及整体结构"><a href="#1-2-std及整体结构" class="headerlink" title="1.2 std及整体结构"></a>1.2 std及整体结构</h3><p>log模块提供了一套包级别的简单接口,使用该接口可以直接将日志内容打印到标准错误。那么该过程是怎么实现的呢？其实就是通过一个内置的Logger类型的变量”std” 来实现的。该变量使用：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> std <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> LstdFlags<span class="token punctuation">)</span></code></pre>
<p>进行初始化，默认输出到系统的标准输出 “os.Stderr” ,前缀为空，使用日期加时间作为Log抬头。<br>当我们调用 log.Print的时候是怎么执行的呢？我们看其代码：<br><img src="/images/golang-log-with-fmt-different/golang-os-stderr-information-example.png" alt="golang-os-stderr-information.png"><br>这里实际就是调用了Logger对象的 Output方法，将日志内容按照fmt包中约定的格式转义后传给Output。Output定义如下 :</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Logger<span class="token punctuation">)</span> <span class="token function">Output</span><span class="token punctuation">(</span>calldepth <span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> </code></pre>
<p>其中s为日志没有加前缀和Log抬头的具体内容，xxxxx 。该函数执行具体的将日志刷入到对应的位置。</p>
<h3 id="1-3-核心函数的实现"><a href="#1-3-核心函数的实现" class="headerlink" title="1.3 核心函数的实现"></a>1.3 核心函数的实现</h3><p>Logger.Output是执行具体的将日志刷入到对应位置的方法。<br>该方法首先根据需要获得当前时间和调用该方法的文件及行号信息。然后调用formatHeader方法将Log的前缀和Log抬头先格式化好 放入Logger.buf中，然后再将Log的内容存入到Logger.buf中，最后调用Logger.out.Write方法将完整的日志写入到输出目的地中。<br>由于写入文件以及拼接buf的过程是线程非安全的，因此使用mutex保证每次写入的原子性。</p>
<pre class=" language-go"><code class="language-go">l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">defer</span> l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>将buf的拼接和文件的写入放入这个后面，使得在多个goroutine使用同一个Logger对象是，不会弄乱buf，也不会杂糅的写入。</p>
<p>该方法的第一个参数最终会传递给runtime.Caller的skip，指的是跳过的栈的深度。这里我记住给2就可以了。这样就会得到我们调用log 是所处的位置。<br>在golang的注释中说锁住runtime.Caller的过程比较重,这里的Logger里带有一个Mutex锁，方便在高并发或者多协程的时候保护上下文数据一致,只是从代码中看到其在这里把锁打开了。</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">defer</span> l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> l<span class="token punctuation">.</span>flag<span class="token operator">&amp;</span><span class="token punctuation">(</span>Lshortfile<span class="token operator">|</span>Llongfile<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// Release lock while getting caller info - it's expensive.</span>
        l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">var</span> ok <span class="token builtin">bool</span>
        <span class="token boolean">_</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">,</span> ok <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span>calldepth<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>
            file <span class="token operator">=</span> <span class="token string">"???"</span>
            line <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
        l<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span></code></pre>
<p>在formatHeader里面首先将前缀直接复制到Logger.buf中,然后根据flag选择Log抬头的内容，这里用到了一个log模块实现的itoa的方法，作用类似c的itoa,将一个整数转换成一个字符串。只是其转换后将结果直接追加到了buf的尾部。<br>纵观整个实现，最值得学习的就是线程安全的部分。在什么位置合适做怎样的同步操作。</p>
<h3 id="1-4-对外接口的实现"><a href="#1-4-对外接口的实现" class="headerlink" title="1.4 对外接口的实现"></a>1.4 对外接口的实现</h3><p>在了解了核心格式化和输出结构后，在看其封装就非常简单了，几乎都是首先用Output进行日志的记录，然后在必要的时候 做os.exit或者panic的操作，这里看下Fatal的实现。</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Logger<span class="token punctuation">)</span> <span class="token function">Fatal</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Logger<span class="token punctuation">)</span> <span class="token function">Fatalf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>Logger<span class="token punctuation">)</span> <span class="token function">Fatalln</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    l<span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintln</span><span class="token punctuation">(</span>v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>这里也验证了我们之前做的Panic的结果，先做输出日志操作。再进行panic。</p>
<h2 id="2-制定指定的日志内容输出格式"><a href="#2-制定指定的日志内容输出格式" class="headerlink" title="2:制定指定的日志内容输出格式"></a>2:制定指定的日志内容输出格式</h2><p>我们可以通过以下代码进行对log输出的日志进行输出详细的日志信息</p>
<pre class=" language-go"><code class="language-go">#指定输出date与time输出以及执行代码日志的行号
log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>LstdFlags <span class="token operator">|</span> log<span class="token punctuation">.</span>Llongfile<span class="token punctuation">)</span>
具体更多选项设置可以参见log中源码
<span class="token keyword">const</span> <span class="token punctuation">(</span>
    Ldate         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>     <span class="token comment" spellcheck="true">// the date in the local time zone: 2009/01/23</span>
    Ltime                         <span class="token comment" spellcheck="true">// the time in the local time zone: 01:23:23</span>
    Lmicroseconds                 <span class="token comment" spellcheck="true">// microsecond resolution: 01:23:23.123123.  assumes Ltime.</span>
    Llongfile                     <span class="token comment" spellcheck="true">// full file name and line number: /a/b/c/d.go:23</span>
    Lshortfile                    <span class="token comment" spellcheck="true">// final file name element and line number: d.go:23. overrides Llongfile</span>
    LUTC                          <span class="token comment" spellcheck="true">// if Ldate or Ltime is set, use UTC rather than the local time zone</span>
    LstdFlags     <span class="token operator">=</span> Ldate <span class="token operator">|</span> Ltime <span class="token comment" spellcheck="true">// initial values for the standard logger</span>
<span class="token punctuation">)</span></code></pre>
<p>输出格式样例:<br><img src="/images/golang-log-with-fmt-different/golang-log-flags-format-console-example.png" alt="golang-log-flags-format.png"></p>
<h2 id="3-将日志信息进行转存-形成日志文件"><a href="#3-将日志信息进行转存-形成日志文件" class="headerlink" title="3:将日志信息进行转存,形成日志文件"></a>3:将日志信息进行转存,形成日志文件</h2><p>具体我们可以查看log的new方法</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>out io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> prefix <span class="token builtin">string</span><span class="token punctuation">,</span> flag <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Logger <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Logger<span class="token punctuation">{</span>out<span class="token punctuation">:</span> out<span class="token punctuation">,</span> prefix<span class="token punctuation">:</span> prefix<span class="token punctuation">,</span> flag<span class="token punctuation">:</span> flag<span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="/images/golang-log-with-fmt-different/golang-log-writer-file-show-code.png" alt="log-writer-file-show-code.png"><br>然后直接调用log中的Println的方法输出日志即可,就会将日志内容追加到日志文件中。</p>
<h2 id="4-结论"><a href="#4-结论" class="headerlink" title="4:结论"></a>4:结论</h2><p>最后,打印信息的话 一般也不用fmt,fmt一般用来格式化. 所以特殊需求也就不要用fmt了.希望大家有其它方面的个人见解随时私聊我,我们公共成长,一起进步。</p>
]]></content>
      <categories>
        <category>Golang日志输出</category>
      </categories>
      <tags>
        <tag>Golang log Golang fmt</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】How can I prevent gson from converting integers to doubles</title>
    <url>/2020/06/28/gson-how-can-i-prevent-gson-from-converting-integers-to-doubles/</url>
    <content><![CDATA[<p>处理Gson中，json转换map造成的int变double的问题。</p>
<p><a href="https://stackoverflow.com/questions/36508323/how-can-i-prevent-gson-from-converting-integers-to-doubles">原文链接</a></p>
<p>MapDeserializerDoubleAsIntFix.java</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
*最近在研究网络请求数据解析的问题，发现json数据被强制转换为map结构的时候，会出现int变成double的问题
*在stackoverflow上看到了一个这个How can I prevent gson from converting integers to doubles 的问题，采用了这个答案
*https://stackoverflow.com/a/36529534/5279354答案
*/</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>JsonArray<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>JsonDeserializationContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>JsonDeserializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>JsonElement<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>JsonObject<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>JsonParseException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>JsonPrimitive<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>LinkedTreeMap<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDeserializerDoubleAsIntFix</span> <span class="token keyword">implements</span> <span class="token class-name">JsonDeserializer</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonElement jsonElement<span class="token punctuation">,</span> Type type<span class="token punctuation">,</span> JsonDeserializationContext jsonDeserializationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonParseException <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>jsonElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Object <span class="token function">read</span><span class="token punctuation">(</span>JsonElement in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            JsonArray arr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>JsonElement anArr <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>anArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedTreeMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            JsonObject obj <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> JsonElement<span class="token operator">>></span> entitySet <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> JsonElement<span class="token operator">></span> entry<span class="token operator">:</span> entitySet<span class="token punctuation">)</span><span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">read</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> map<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> in<span class="token punctuation">.</span><span class="token function">isJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            JsonPrimitive prim <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> prim<span class="token punctuation">.</span><span class="token function">getAsBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> prim<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                Number num <span class="token operator">=</span> prim<span class="token punctuation">.</span><span class="token function">getAsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// here you can handle double int/long values</span>
                <span class="token comment" spellcheck="true">// and return any type you want</span>
                <span class="token comment" spellcheck="true">// this solution will transform 3.0 float to long values</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">==</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String json <span class="token operator">=</span> <span class="token string">"{\"data\":[{\"id\":1,\"quantity\":2,\"name\":\"apple\"}, {\"id\":3,\"quantity\":4,\"name\":\"orange\"}]}"</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"json == "</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//        Map&lt;String, Object> map = new LinkedTreeMap&lt;>();</span>
<span class="token comment" spellcheck="true">//        map = new Gson().fromJson(json, map.getClass());</span>
<span class="token comment" spellcheck="true">//        System.out.println(map);</span>

        GsonBuilder gsonBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        gsonBuilder<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>Map <span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">new</span> <span class="token class-name">MapDeserializerDoubleAsIntFix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Gson gson <span class="token operator">=</span> gsonBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>参考文章</p>
<p><a href="https://gist.github.com/xingstarx/5ddc14ff6ca68ba4097815c90d1c47cc">https://gist.github.com/xingstarx/5ddc14ff6ca68ba4097815c90d1c47cc</a></p>
<p><a href="https://blog.csdn.net/ligeforrent/article/details/93759524">https://blog.csdn.net/ligeforrent/article/details/93759524</a></p>
]]></content>
      <categories>
        <category>Gson</category>
      </categories>
      <tags>
        <tag>Gson</tag>
      </tags>
  </entry>
  <entry>
    <title>当Gson遇上Java8中的日期API</title>
    <url>/2020/06/23/gson-java8-datetime/</url>
    <content><![CDATA[<p> Java8开始，JDK中提供了一组新的日期<code>API</code>，当我们需要序列化数据成json时，经常会用到<code>Gson</code>。当<code>Java8</code>中的日期<code>API</code>遇上<code>Gson</code>时，能否按照预期的想法正常的处理我们的数据呢？</p>
<h2 id="使用Gson序列化与反序列化"><a href="#使用Gson序列化与反序列化" class="headerlink" title="使用Gson序列化与反序列化"></a>使用Gson序列化与反序列化</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  LocalDateTime dateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  String json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"dateTime Serialization:{}"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"dateTime Deserialization:{}"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date Serialization:{}"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date Deserialization:{}"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> LocalDate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><ul>
<li>序列化的结果</li>
</ul>
<pre class=" language-verilog"><code class="language-verilog">dateTime Serialization<span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"date"</span><span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"year"</span><span class="token punctuation">:</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token string">"month"</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"day"</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token operator">}</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"hour"</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">"minute"</span><span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token string">"second"</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"nano"</span><span class="token punctuation">:</span><span class="token number">987000000</span><span class="token operator">}}</span></code></pre>
<ul>
<li>反序列化结果</li>
</ul>
<pre class=" language-verilog"><code class="language-verilog">dateTime Deserialization<span class="token punctuation">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">23</span>T21<span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">:</span><span class="token number">20.987</span></code></pre>
<h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h3><ul>
<li>序列化的结果</li>
</ul>
<pre class=" language-verilog"><code class="language-verilog">date Serialization<span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"year"</span><span class="token punctuation">:</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token string">"month"</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"day"</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token operator">}</span></code></pre>
<ul>
<li>反序列化结果</li>
</ul>
<pre class=" language-verilog"><code class="language-verilog">date Deserialization<span class="token punctuation">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">23</span></code></pre>
<p>我们会发现，序列化的结果不是我们想要的，正常应该是一个<code>ISO</code>格式的时间才对，但是却成了一个<code>JsonObject</code>。很显然这是不满足我们需求的。</p>
<h2 id="分析序列化结果不是ISO格式的原因"><a href="#分析序列化结果不是ISO格式的原因" class="headerlink" title="分析序列化结果不是ISO格式的原因"></a>分析序列化结果不是<code>ISO</code>格式的原因</h2><p>通过源码分析，<code>LocalDateTime</code>中引用了<code>LocalDate</code></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* The date part.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> LocalDate date<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
* The time part.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> LocalTime time<span class="token punctuation">;</span></code></pre>
<p>其中<code>LocalDate</code>和<code>LocalTime</code>的部分源码如下</p>
<ul>
<li>LocalDate</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* The year.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
* The month-of-year.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">short</span> month<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
* The day-of-month.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">short</span> day<span class="token punctuation">;</span></code></pre>
<ul>
<li>LocalTime</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* The hour.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> hour<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
* The minute.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> minute<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
* The second.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> second<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/**
* The nanosecond.
*/</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> nano<span class="token punctuation">;</span></code></pre>
<p> 可以看到，<code>LocalDate</code>和<code>LocalTime</code>，我们序列化<code>Java8</code>中的日期<code>API</code>，实际上是把成员变量序列化，是正常的一个序列化对象的逻辑。但是我们肯定是不希望这样的结果，对我们来说并不是特别友好。那么怎么解决这个问题呢？</p>
<h2 id="自定义Gson的Adapter解决该问题"><a href="#自定义Gson的Adapter解决该问题" class="headerlink" title="自定义Gson的Adapter解决该问题"></a>自定义<code>Gson</code>的<code>Adapter</code>解决该问题</h2><p><code>Gson</code>本身给我们提供了各种各样的配置，其中有一个就是可以自定义序列化或者反序列化的<code>Adapter</code>，那么既然现在我们序列化不是我们想要的结果，就可以通过自定义<code>Adapter</code>来解决这个问题，废话不说，直接上代码演示。</p>
<h3 id="自定义LocalDateAdapter"><a href="#自定义LocalDateAdapter" class="headerlink" title="自定义LocalDateAdapter"></a>自定义LocalDateAdapter</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* Created by xiaozhangge on 2020/6/23.
* &lt;p>
* 处理LocalDate的序列化与反序列化
*/</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocalDateAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>LocalDate<span class="token operator">></span><span class="token punctuation">,</span> JsonDeserializer<span class="token operator">&lt;</span>LocalDate<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> JsonElement <span class="token function">serialize</span><span class="token punctuation">(</span>LocalDate date<span class="token punctuation">,</span> Type typeOfSrc<span class="token punctuation">,</span> JsonSerializationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonPrimitive</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> LocalDate <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonElement element<span class="token punctuation">,</span> Type type<span class="token punctuation">,</span> JsonDeserializationContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonParseException <span class="token punctuation">{</span>
        String timestamp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="自定义LocalDateTimeAdapter"><a href="#自定义LocalDateTimeAdapter" class="headerlink" title="自定义LocalDateTimeAdapter"></a>自定义LocalDateTimeAdapter</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
* Created by xiaozhangge on 2020/6/23.
* &lt;p>
* 处理LocalDateTime序列化与反序列化
*/</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocalDateTimeAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>LocalDateTime<span class="token operator">></span><span class="token punctuation">,</span> JsonDeserializer<span class="token operator">&lt;</span>LocalDateTime<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> JsonElement <span class="token function">serialize</span><span class="token punctuation">(</span>LocalDateTime date<span class="token punctuation">,</span> Type typeOfSrc<span class="token punctuation">,</span> JsonSerializationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonPrimitive</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> LocalDateTime <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonElement element<span class="token punctuation">,</span> Type type<span class="token punctuation">,</span> JsonDeserializationContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonParseException <span class="token punctuation">{</span>
        String timestamp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="使用自定义Adapter"><a href="#使用自定义Adapter" class="headerlink" title="使用自定义Adapter"></a>使用自定义Adapter</h3><p>既然我们现在自定义了<code>Adapter</code>，那么在使用时就需要将它注册到<code>gson</code>对象中去。在创建<code>gson</code>对象时就不能直接使用<code>Gson gson = new Gson()</code>，而是要使用<code>GsonBuilder</code>去进行构建。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 实例化gson对象时注册Adapter</span>
Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonParse<span class="token punctuation">.</span>LocalDateAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JsonParse<span class="token punctuation">.</span>LocalDateTimeAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上面我们的代码序列化与反序列时就使用注册了Adapter的gson对象即可</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  LocalDateTime dateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JsonParse<span class="token punctuation">.</span>LocalDateAdapter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JsonParse<span class="token punctuation">.</span>LocalDateTimeAdapter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  String json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"dateTime Serialization:{}"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"dateTime Deserialization:{}"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date Serialization:{}"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date Deserialization:{}"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> LocalDate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="LocalDateTime-1"><a href="#LocalDateTime-1" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h4><pre class=" language-verilog"><code class="language-verilog">dateTime Serialization<span class="token punctuation">:</span><span class="token string">"2020-06-23T22:22:10.816"</span>
dateTime Deserialization<span class="token punctuation">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">23</span>T22<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">10.816</span></code></pre>
<h4 id="LocalDate-1"><a href="#LocalDate-1" class="headerlink" title="LocalDate"></a>LocalDate</h4><pre class=" language-verilog"><code class="language-verilog">date Serialization<span class="token punctuation">:</span><span class="token string">"2020-06-23"</span>
date Deserialization<span class="token punctuation">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">23</span></code></pre>
<p>可以看到，在自定义Adapter以后，序列化的结果就是我们想要的<code>ISO</code>类型，当然你也可以根据自己的需求将日期格式序列话成自己想要的任意格式。</p>
<h2 id="Json序列化与反序列化工具类"><a href="#Json序列化与反序列化工具类" class="headerlink" title="Json序列化与反序列化工具类"></a>Json序列化与反序列化工具类</h2><p>分享一个日常使用工具类，除了上文说到的关于日期处理的解决方案，还有另外一个问题的解决方案。这个留着下一篇文章讲。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>LinkedTreeMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>TypeToken<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Type<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span>DateTimeFormatter<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/6/23.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonParse</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Type MAP_STR_OBJ_TYPE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> Gson GSON <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>MAP_STR_OBJ_TYPE<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MapDeserializerDoubleAsIntFix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     * To json string.
     *
     * @param bean the bean
     * @return the string
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">toJson</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> GSON<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * To json string.
     *
     * @param builder the builder
     * @param bean    the bean
     * @return the string
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">toJson</span><span class="token punctuation">(</span>GsonBuilder builder<span class="token punctuation">,</span> Object bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Parse t.
     *
     * @param &lt;T>  the type parameter
     * @param json the json
     * @param clz  the clz
     * @return the t
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parse</span><span class="token punctuation">(</span>String json<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> GSON<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Parse t.
     *
     * @param &lt;T>     the type parameter
     * @param builder the builder
     * @param json    the json
     * @param clz     the clz
     * @return the t
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parse</span><span class="token punctuation">(</span>GsonBuilder builder<span class="token punctuation">,</span> String json<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Parse t.
     *
     * @param &lt;T>  the type parameter
     * @param json the json
     * @param type the type
     * @return the t
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parse</span><span class="token punctuation">(</span>String json<span class="token punctuation">,</span> Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> GSON<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Parse t.
     *
     * @param &lt;T>     the type parameter
     * @param builder the builder
     * @param json    the json
     * @param type    the type
     * @return the t
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">parse</span><span class="token punctuation">(</span>GsonBuilder builder<span class="token punctuation">,</span> String json<span class="token punctuation">,</span> Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * To json bytes byte [ ].
     *
     * @param value the value
     * @return the byte [ ]
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toJsonBytes</span><span class="token punctuation">(</span>Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">toJson</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * Created by xiaozhangge on 2020/6/4.
     * &lt;p>
     * 处理LocalDate的序列化与反序列化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocalDateAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>LocalDate<span class="token operator">></span><span class="token punctuation">,</span> JsonDeserializer<span class="token operator">&lt;</span>LocalDate<span class="token operator">></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> JsonElement <span class="token function">serialize</span><span class="token punctuation">(</span>LocalDate date<span class="token punctuation">,</span> Type typeOfSrc<span class="token punctuation">,</span> JsonSerializationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonPrimitive</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> LocalDate <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonElement element<span class="token punctuation">,</span> Type type<span class="token punctuation">,</span> JsonDeserializationContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonParseException <span class="token punctuation">{</span>
            String timestamp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Created by xiaozhangge on 2020/6/4.
     * &lt;p>
     * 处理LocalDateTime序列化与反序列化
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocalDateTimeAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>LocalDateTime<span class="token operator">></span><span class="token punctuation">,</span> JsonDeserializer<span class="token operator">&lt;</span>LocalDateTime<span class="token operator">></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> JsonElement <span class="token function">serialize</span><span class="token punctuation">(</span>LocalDateTime date<span class="token punctuation">,</span> Type typeOfSrc<span class="token punctuation">,</span> JsonSerializationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonPrimitive</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> LocalDateTime <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonElement element<span class="token punctuation">,</span> Type type<span class="token punctuation">,</span> JsonDeserializationContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonParseException <span class="token punctuation">{</span>
            String timestamp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Created by xiaozhangge on 2020/6/4.
     * &lt;p>
     * https://gist.github.com/xingstarx/5ddc14ff6ca68ba4097815c90d1c47cc
     * &lt;p>
     * https://stackoverflow.com/questions/36508323/how-can-i-prevent-gson-from-converting-integers-to-doubles/36529534#36529534
     * &lt;p>
     * &lt;p>
     * 解决json数据转换为map结构的时候，会出现int变成double的问题
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MapDeserializerDoubleAsIntFix</span> <span class="token keyword">implements</span> <span class="token class-name">JsonDeserializer</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonElement element<span class="token punctuation">,</span> Type type<span class="token punctuation">,</span> JsonDeserializationContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonParseException <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> Object <span class="token function">read</span><span class="token punctuation">(</span>JsonElement in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                JsonArray arr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>JsonElement anArr <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>anArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> list<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedTreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                JsonObject obj <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> JsonElement<span class="token operator">>></span> entitySet <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> JsonElement<span class="token operator">></span> entry <span class="token operator">:</span> entitySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">read</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> map<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                JsonPrimitive prim <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> prim<span class="token punctuation">.</span><span class="token function">getAsBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> prim<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    Number num <span class="token operator">=</span> prim<span class="token punctuation">.</span><span class="token function">getAsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// here you can handle double int/long values</span>
                    <span class="token comment" spellcheck="true">// and return any type you want</span>
                    <span class="token comment" spellcheck="true">// this solution will transform 3.0 float to long values</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>Gson</category>
      </categories>
      <tags>
        <tag>Gson</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Guava中的CaseFormat</title>
    <url>/2020/07/25/guava-case-format/</url>
    <content><![CDATA[<p>在数据库中，按照阿里巴巴java开发手册，数据库字段全部小写并且按照<code>_</code>进行单词之间的分割，但是我们<code>Java</code>中的命名风格又是按照驼峰方式，一般返回给前端的<code>DTO</code>对象也按照驼峰方式，前端同学在对所有列进行排序时，会按照我们返回给他的<code>props</code>发送给后端，这时候后端收到的就是驼峰方式的<code>props</code>，但是拿到数据库查询这肯定是一个不存在的字段，那么有什么好的方式去解决这个问题呢？</p>
<p>这时候发现了<code>guava</code>中的<code>CaseFormat</code>工具类。</p>
<p> com.google.common.base.CaseFormat是一种实用工具类，以提供不同的ASCII字符格式之间的转换。</p>
<h2 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GwtCompatible</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> CaseFormat
   <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token operator">&lt;</span>CaseFormat<span class="token operator">></span></code></pre>
<h2 id="枚举常量"><a href="#枚举常量" class="headerlink" title="枚举常量"></a>枚举常量</h2><table>
<thead>
<tr>
<th>枚举常量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>LOWER_CAMEL</td>
<td>Java变量的命名规则，如 <code>lowerCamel</code></td>
</tr>
<tr>
<td>LOWER_HYPHEN</td>
<td>连字符连接变量的命名规则，如 <code>lower-hyphen</code></td>
</tr>
<tr>
<td>LOWER_UNDERSCORE</td>
<td>C ++变量命名规则，如 <code>lower_underscore</code></td>
</tr>
<tr>
<td>UPPER_CAMEL</td>
<td>Java和C++类的命名规则，如 <code>UpperCamel</code></td>
</tr>
<tr>
<td>UPPER_UNDERSCORE</td>
<td>Java和C++常量的命名规则，如 <code>UPPER_UNDERSCORE</code></td>
</tr>
</tbody></table>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Converter&lt;String,String&gt; converterTo(CaseFormat targetFormat)</td>
<td>返回一个转换，从这个格式转换targetFormat字符串。</td>
</tr>
<tr>
<td>String to(CaseFormat format, String str)</td>
<td>从这一格式指定格式的指定字符串 str 转换。</td>
</tr>
<tr>
<td>static CaseFormat valueOf(String name)</td>
<td>返回此类型具有指定名称的枚举常量。</td>
</tr>
<tr>
<td>static CaseFormat[] values()</td>
<td>返回一个包含该枚举类型的常量数组中的顺序被声明。</td>
</tr>
</tbody></table>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String appCiNum <span class="token operator">=</span> CaseFormat<span class="token punctuation">.</span>LOWER_CAMEL<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>LOWER_UNDERSCORE<span class="token punctuation">,</span> <span class="token string">"appCiNum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>appCiNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>appCiNum<span class="token punctuation">,</span> <span class="token string">"app_ci_num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    appCiNum <span class="token operator">=</span> CaseFormat<span class="token punctuation">.</span>LOWER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>LOWER_CAMEL<span class="token punctuation">,</span> <span class="token string">"app_ci_num"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>appCiNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>appCiNum<span class="token punctuation">,</span> <span class="token string">"appCiNum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>只要我们自己定的<code>DTO</code>是标准的，那么排序是前端同学就按照我们返回给他的字段在传回来，我们只需要用<code>CaseFormat</code>进行转换即可，不然还得依次进行match匹配</p>
]]></content>
      <categories>
        <category>Guava</category>
      </categories>
      <tags>
        <tag>Guava</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop常用运维命令</title>
    <url>/2020/08/03/hadoop-ops-command/</url>
    <content><![CDATA[<h2 id="一、HADOOP集群启动"><a href="#一、HADOOP集群启动" class="headerlink" title="一、HADOOP集群启动"></a>一、HADOOP集群启动</h2><h3 id="1-格式化zk"><a href="#1-格式化zk" class="headerlink" title="1. 格式化zk"></a>1. 格式化zk</h3><p>在zk的leader节点服务器上，Hadoop的bin目录中执行如下命令：<br>改为在 nn的active节点上</p>
<pre><code>sh hdfs zkfc -formatZK</code></pre>
<h3 id="2-启动journalnode集群"><a href="#2-启动journalnode集群" class="headerlink" title="2. 启动journalnode集群"></a>2. 启动journalnode集群</h3><p>hadoop任意节点服务器执行</p>
<pre><code>hadoop-daemons.sh start journalnode</code></pre>
<h3 id="3-格式化namenode"><a href="#3-格式化namenode" class="headerlink" title="3. 格式化namenode"></a>3. 格式化namenode</h3><p>在nn节点执行</p>
<pre><code>hadoop namenode -format</code></pre>
<h3 id="4-启动NameNode"><a href="#4-启动NameNode" class="headerlink" title="4. 启动NameNode"></a>4. 启动NameNode</h3><p>在hdaoop01节点上执行如下命令，启动NameNode节点：</p>
<pre><code>hadoop-daemon.sh start namenode</code></pre>
<p>首先把hdaoop02服务器的 namenode节点变为standby namenode节点。<br>执行命令如下：</p>
<pre><code>hdfs namenode -bootstrapStandby</code></pre>
<p>启动hadoop02服务器的namenode节点，执行命令如下：</p>
<pre><code>hadoop-daemon.sh start namenode</code></pre>
<h3 id="5-启动DataNode"><a href="#5-启动DataNode" class="headerlink" title="5. 启动DataNode"></a>5. 启动DataNode</h3><p>在hadoop01,hadoop02,hadoop03服务器上分别启动datanode节点，在这三台服务器上分别执行如下命令：</p>
<pre><code>hadoop-daemon.sh start datanode</code></pre>
<h3 id="6-启动zkfc"><a href="#6-启动zkfc" class="headerlink" title="6. 启动zkfc"></a>6. 启动zkfc</h3><p>FalioverControllerActive是失败恢复线程。这个线程需要在NameNode节点所在的服务器上启动，在hadoop01,hadoop02服务器上执行如下命令：</p>
<pre><code>hadoop-daemon.sh start zkfc</code></pre>
<h3 id="7-启动Resourcemanager"><a href="#7-启动Resourcemanager" class="headerlink" title="7. 启动Resourcemanager"></a>7. 启动Resourcemanager</h3><p>在<strong>hdaoop01</strong>服务器上启动主Resourcemanager节点，执行如下命令：<br>启动成功后，hadoop01,hadoop02,hadoop03服务器上的nodemanager 也会跟随启动</p>
<pre><code>start-yarn.sh</code></pre>
<p>在<strong>hadoop02</strong>服务器上启动副 Resoucemanager节点，执行如下命令：</p>
<pre><code>yarn-daemon.sh start resourcemanager</code></pre>
<h2 id="二、YARN运维命令"><a href="#二、YARN运维命令" class="headerlink" title="二、YARN运维命令"></a>二、YARN运维命令</h2><h3 id="1-yarn-application"><a href="#1-yarn-application" class="headerlink" title="1. yarn application"></a>1. yarn application</h3><p>1、-list 列出所有 application 信息</p>
<pre><code>yarn application -list</code></pre>
<p>2、-appStates <states>跟-list一起使用，用来筛选不同状态的application，多个用”,”分隔；所有状态ALL,NEW,NEW_SAVING,SUBMITTED,ACCEPTED,RUNNING,FINISHED,FAILED,KILLED</states></p>
<pre><code>yarn application -list -appStates RUNNING</code></pre>
<p>3、-appTypes <types>跟-list一起使用，用来筛选不同类型的application，多个用”,”分隔；如 MAPREDUCE</types></p>
<pre><code>yarn application -list -appTypes MAPREDUCE</code></pre>
<p>4、-kill <application id="">杀死一个application，需要指定一个Application ID</application></p>
<pre><code>yarn  application -kill application_1526100291229_206393</code></pre>
<p>5、-status <application id="">列出 某个application 的状态</application></p>
<pre><code>yarn application -status application_1526100291229_206393</code></pre>
<p>6、-movetoqueue <applicationid>移动application到其他的queue，不能单独使用<br>7、-queue <queue name=""> 与 movetoqueue命令一起使用，指定移动到哪个queue</queue></applicationid></p>
<pre><code>yarn application -movetoqueue application_1526100291229_206393 -queue other</code></pre>
<h3 id="2-yarn-node"><a href="#2-yarn-node" class="headerlink" title="2. yarn node"></a>2. yarn node</h3><p>查看各个node上的任务数</p>
<pre><code>yarn  node --list</code></pre>
<h3 id="3-yarn-logs"><a href="#3-yarn-logs" class="headerlink" title="3. yarn logs"></a>3. yarn logs</h3><pre><code>yarn logs -applicationId application_1583405966138_0013</code></pre>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Matery 常见问题及解决</title>
    <url>/2021/02/07/hexo-matery-problems/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文章非 Hexo + Matery Theme 教程，详细教程见<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md"><code>blinkfox hexo-theme-matery</code></a>，主要记录一些使用中的问题，希望能帮到进来的同学，避免踩坑。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h4 id="1blog检索不生效"><a href="#1blog检索不生效" class="headerlink" title="1blog检索不生效"></a>1blog检索不生效</h4><p>我本地的情况是这样的,在主页面通过检索输入框搜索文章检索是好用的,但是点击进入自己搜索的指定文章之后,在此点击搜索框进行检索,发现搜索到的文章路劲后面多加了一层路径信息,比如<br>我的这篇文章 <a href="https://xiaomozhang.github.io/2021/02/07/spring-boot-lettuce-multi-instance/"><code>SpringBoot2.X使用Lettuce设置多个RedisTemplate实例</code></a>, 点击检索连接跳转到<br>新的tab地址栏发现在地址栏后面多拼接了一层连接信息 <code>/2021/02/07/spring-boot-lettuce-multi-instance/</code> 出现这样的情况我的解决办法是这样的</p>
<h4 id="step1-运行下面命令安装-searchdb"><a href="#step1-运行下面命令安装-searchdb" class="headerlink" title="step1:运行下面命令安装 searchdb"></a>step1:运行下面命令安装 <code>searchdb</code></h4><pre class=" language-shell"><code class="language-shell">cnpm install hexo-generator-search –-save
cnpm install hexo-generator-searchdb --save</code></pre>
<p>这两个都需要安装,只安装第一个不能全文搜索。<br>但是我在 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md"><code>Mastery github源码教程</code></a> 只看到了安装<code>hexo-generator-search</code>即可,<br>但实际的情况是这样install并配置完成之后只对主页的搜索检索是生效的,进入具体的blog中是不生效的。看来实践还是检验真理的唯一标准啊<br><img src="/images/hexo-matery-problems/hexo-generator-search.jpg" alt="hexo-generator-search"></p>
<h4 id="step2-在themes-hexo-theme-matery-config-yml中添加下面配置"><a href="#step2-在themes-hexo-theme-matery-config-yml中添加下面配置" class="headerlink" title="step2: 在themes/hexo-theme-matery/_config.yml中添加下面配置"></a>step2: 在<code>themes/hexo-theme-matery/_config.yml</code>中添加下面配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Local search</span>
<span class="token key atrule">local_search</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> auto
  <span class="token key atrule">top_n_per_article</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">unescape</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre>
<h4 id="step3-在项目的根目录-config-yml中添加下面配置"><a href="#step3-在项目的根目录-config-yml中添加下面配置" class="headerlink" title="step3: 在项目的根目录_config.yml中添加下面配置"></a>step3: 在项目的根目录<code>_config.yml</code>中添加下面配置</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#搜索插件</span>
<span class="token key atrule">search</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml
  <span class="token key atrule">field</span><span class="token punctuation">:</span> post
  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
<p><img src="/images/hexo-matery-problems/hexo-search-config.png" alt="hexo-search-config"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Matery</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 2019 创建maven web项目</title>
    <url>/2020/02/26/idea-web-project/</url>
    <content><![CDATA[<h2 id="IntelliJ-IDEA-2019-创建maven-web项目"><a href="#IntelliJ-IDEA-2019-创建maven-web项目" class="headerlink" title="IntelliJ IDEA 2019 创建maven web项目"></a>IntelliJ IDEA 2019 创建maven web项目</h2><p>本文介绍使用IDEA创建不使用模板的web项目。</p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p><img src="/images/idea/image-20200226210315550.png" alt="image-20200226210315550"></p>
<p><img src="/images/idea/image-20200226210458711.png" alt="image-20200226210458711"></p>
<h3 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h3><h4 id="修改项目结构设置"><a href="#修改项目结构设置" class="headerlink" title="修改项目结构设置"></a>修改项目结构设置</h4><p><img src="/images/idea/image-20200226212549419.png" alt="image-20200226212549419"></p>
<h4 id="添加web-module"><a href="#添加web-module" class="headerlink" title="添加web module"></a>添加web module</h4><p><code>Project</code>那边没有什么需要修改配置的地方，不过需要的话可以修改<code>Project compiler output</code>，这里我们使用默认就可以了。</p>
<p>此项目无任何适配服务组件（因为是手工创建Maven，没有选择任何Maven模板），因此需要我们进行添加。</p>
<p>这里选择一个<code>Web</code>组件就表示这是一个<code>web project</code>了</p>
<p><img src="/images/idea/image-20200226212710033.png" alt="image-20200226212710033"></p>
<h4 id="配置Web-Resource-Directories"><a href="#配置Web-Resource-Directories" class="headerlink" title="配置Web Resource Directories"></a>配置Web Resource Directories</h4><p>这里要选择<code>scr/main</code>目录，并且在后面手动添加一个<code>webapp</code>目录。</p>
<p>点OK，Web的资源目录便设置好了。</p>
<p><img src="/images/idea/image-20200226213027305.png" alt="image-20200226213027305"></p>
<h4 id="配置Deployment-Description"><a href="#配置Deployment-Description" class="headerlink" title="配置Deployment Description"></a>配置Deployment Description</h4><p>这一步是配置<code>web.xml</code>文件的位置，我们需要放在上一步<code>webapp</code>下面去。</p>
<p><img src="/images/idea/image-20200226213229541.png" alt="image-20200226213229541"></p>
<h4 id="修改完成的结果"><a href="#修改完成的结果" class="headerlink" title="修改完成的结果"></a>修改完成的结果</h4><p><img src="/images/idea/image-20200226213254439.png" alt="image-20200226213254439"></p>
<p>到这里我们可以看到底部有一个警告，是我们还没有引入<code>aftifact</code>，接下来配置<code>Aftifacts</code>。</p>
<h3 id="Aftifacts配置"><a href="#Aftifacts配置" class="headerlink" title="Aftifacts配置"></a>Aftifacts配置</h3><p>这个Aftifacts描述了当前项目发布的信息。现在进行添加，从Modeles中选择。</p>
<h4 id="选择Modules"><a href="#选择Modules" class="headerlink" title="选择Modules"></a>选择Modules</h4><p><img src="/images/idea/image-20200226214750810.png" alt="image-20200226214750810"></p>
<p>弹出窗直接选择我们的这个module，然后点击ok就可以了</p>
<p><img src="/images/idea/image-20200226214919063.png" alt="image-20200226214919063"></p>
<h4 id="配置完成以后的结果"><a href="#配置完成以后的结果" class="headerlink" title="配置完成以后的结果"></a>配置完成以后的结果</h4><p><img src="/images/idea/image-20200226215113669.png" alt="image-20200226215113669"></p>
<p>再回过头去看<code>Modules</code>菜单下的警告也没有了。</p>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>这里我们就可以看到我们<code>web</code>项目必须要有的<code>web.xml</code>文件，并且我们在里面添加了一个<code>welcome-file</code>，当项目启动时打开我我们的<code>index.html</code>文件。</p>
<p><img src="/images/idea/image-20200226215406335.png" alt="image-20200226215406335"></p>
<h3 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h3><h4 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h4><p>首先进入<a href="http://tomcat.apache.org/">Tomcat</a>官网，这里我们选择了一个<a href="http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-9/v9.0.31/bin/apache-tomcat-9.0.31.tar.gz">Tomcat-9.0.3</a>的版本进行下载。</p>
<h4 id="配置Tomcat-Server"><a href="#配置Tomcat-Server" class="headerlink" title="配置Tomcat Server"></a>配置Tomcat Server</h4><p><img src="/images/idea/image-20200226215940914.png" alt="image-20200226215940914"></p>
<p><img src="/images/idea/image-20200226220025940.png" alt="image-20200226220025940"></p>
<h5 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h5><p><img src="/images/idea/image-20200226220205638.png" alt="image-20200226220205638"></p>
<p><img src="/images/idea/image-20200226220459166.png" alt="image-20200226220459166"></p>
<h5 id="配置Server"><a href="#配置Server" class="headerlink" title="配置Server"></a>配置Server</h5><p><img src="/images/idea/image-20200226220823555.png" alt="image-20200226220823555"></p>
<h3 id="运行web项目"><a href="#运行web项目" class="headerlink" title="运行web项目"></a>运行web项目</h3><p>在webapp目录下面新建<code>index.html</code>文件，项目结构如下。</p>
<p><img src="/images/idea/image-20200226221200309.png" alt="image-20200226221200309"></p>
<p>接下来启动项目</p>
<p><img src="/images/idea/image-20200226221359622.png" alt="image-20200226221359622"></p>
<p>然后我们访问<a href="http://localhost:8080/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%98%BE%E7%A4%BA%E4%BA%86%E6%88%91%E4%BB%AC%60index.html%60%E7%9A%84%E5%86%85%E5%AE%B9%E4%BA%86%E3%80%82">http://localhost:8080/，就可以看到显示了我们`index.html`的内容了。</a></p>
<h3 id="新建Servlet"><a href="#新建Servlet" class="headerlink" title="新建Servlet"></a>新建Servlet</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>servlet<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/2/26.
 */</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
        <span class="token function">doPost</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 解决乱码</span>
        request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>然后重启项目我们在地址栏输入<code>http://localhost:8080/index?name=哈哈哈</code>就可以看到页面输出了<code>哈哈哈</code></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul>
<li><p>无法使用<code>servlet</code>包下面的类</p>
<p>解决方案：在Modules加入Tomcat依赖</p>
</li>
</ul>
<p><img src="/images/idea/image-20200226223033946.png" alt="image-20200226223033946"></p>
<p><img src="/images/idea/image-20200226223106321.png" alt="image-20200226223106321"></p>
<p><img src="/images/idea/image-20200226223154510.png" alt="image-20200226223154510"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java拆分shell命令成数组</title>
    <url>/2019/01/29/java-spilt-command/</url>
    <content><![CDATA[<h1 id="命令行拆分成string数组"><a href="#命令行拆分成string数组" class="headerlink" title="命令行拆分成string数组"></a>命令行拆分成string数组</h1><ul>
<li>原始命令如下</li>
</ul>
<pre class=" language-shell"><code class="language-shell">-p /path -d "here's my description" --verbose other args</code></pre>
<ul>
<li>需要的拆分结果如下</li>
</ul>
<pre><code>Array[0] = -p
Array[1] = /path
Array[2] = -d
Array[3] = here's my description
Array[4] = --verbose
Array[5] = other
Array[6] = args</code></pre>
<p><a href="https://stackoverflow.com/questions/3259143/split-a-string-containing-command-line-parameters-into-a-string-in-java#">stackoverflow上的问题以及解决方案</a></p>
<p><a href="https://mvnrepository.com/artifact/org.apache.ant/ant">依赖的ant jar</a></p>
<p>scala 可以直接使用scala.tools.cmd提供的api</p>
<ul>
<li>解决方案</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * [code borrowed from ant.jar]
 * Crack a command line.
 * @param toProcess the command line to process.
 * @return the command line broken into strings.
 * An empty or null toProcess parameter results in a zero sized array.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">translateCommandline</span><span class="token punctuation">(</span>String toProcess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>toProcess <span class="token operator">==</span> null <span class="token operator">||</span> toProcess<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//no command? no string</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// parse with a simple finite state machine</span>

    <span class="token keyword">final</span> <span class="token keyword">int</span> normal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> inQuote <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> inDoubleQuote <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> state <span class="token operator">=</span> normal<span class="token punctuation">;</span>
    <span class="token keyword">final</span> StringTokenizer tok <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>toProcess<span class="token punctuation">,</span> <span class="token string">"\"\' "</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">final</span> StringBuilder current <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> lastTokenHasBeenQuoted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>tok<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String nextTok <span class="token operator">=</span> tok<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> inQuote<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"\'"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nextTok<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lastTokenHasBeenQuoted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                state <span class="token operator">=</span> normal<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                current<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>nextTok<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> inDoubleQuote<span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nextTok<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                lastTokenHasBeenQuoted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                state <span class="token operator">=</span> normal<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                current<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>nextTok<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"\'"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nextTok<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                state <span class="token operator">=</span> inQuote<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nextTok<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                state <span class="token operator">=</span> inDoubleQuote<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nextTok<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTokenHasBeenQuoted <span class="token operator">||</span> current<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    current<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                current<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>nextTok<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            lastTokenHasBeenQuoted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTokenHasBeenQuoted <span class="token operator">||</span> current<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> inQuote <span class="token operator">||</span> state <span class="token operator">==</span> inDoubleQuote<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"unbalanced quotes in "</span> <span class="token operator">+</span> toProcess<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中使用元组</title>
    <url>/2020/01/09/java-tuple/</url>
    <content><![CDATA[<p>元组（Tuple）是固定数量的不同类型的元素的组合。元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。元组的好处在于可以把多个元素作为一个单元传递。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。根据元素数量的不同，Vavr 总共提供了 Tuple0、Tuple1 到 Tuple8 等 9 个类。每个元组类都需要声明其元素类型。如 Tuple2&lt;String, Integer&gt;表示的是两个元素的元组，第一个元素的类型为 String，第二个元素的类型为 Integer。对于元组对象，可以使用 _1、_2 到 _8 来访问其中的元素。所有元组对象都是不可变的，在创建之后不能更改。</p>
<p>元组通过接口 Tuple 的静态方法 of 来创建。元组类也提供了一些方法对它们进行操作。由于元组是不可变的，所有相关的操作都返回一个新的元组对象。在 清单 1 中，使用 Tuple.of 创建了一个 Tuple2 对象。Tuple2 的 map 方法用来转换元组中的每个元素，返回新的元组对象。而 apply 方法则把元组转换成单个值。其他元组类也有类似的方法。除了 map 方法之外，还有 map1、map2、map3 等方法来转换第 N 个元素；update1、update2 和 update3 等方法用来更新单个元素。</p>
<br>



<p>Python和Scala语言中有自带元组，Jdk中是没有这个数据类型的，虽然使用数组或者map也能达到想要的效果，但总归是没有元组方便。</p>
<p>比如说一个方法有多个返回值时，虽然可以用<code>Object[]</code>或者<code>Map</code>进行封装，但是在拆箱的时候类型会缺失，所以还是不太方便。Java中有很多元组库，这里推荐一个我经常使用的<a href="https://www.vavr.io/">vavr</a>，当然<code>Tuple</code>只是这个库中的一小部分，该库提供了强大的函数式编程的能力，可以像写Scala一样写Java</p>
<h2 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h2><p>目前最新的稳定版是<code>0.10.2</code></p>
<pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/io.vavr/vavr --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.vavr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>vavr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="常用方法使用"><a href="#常用方法使用" class="headerlink" title="常用方法使用"></a>常用方法使用</h2><h3 id="创建元组对象"><a href="#创建元组对象" class="headerlink" title="创建元组对象"></a>创建元组对象</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Tuple3<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">,</span> Long<span class="token operator">></span> tuple3 <span class="token operator">=</span> Tuple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"TupleTests"</span><span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>

  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>可以看到我们通过<code>Tuple.of</code>创建了一个有三个元素的元组对象，输出结果</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">(</span>TupleTests<span class="token punctuation">,</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">09</span>T20<span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">:</span><span class="token number">26.137</span><span class="token punctuation">,</span> <span class="token number">9223372036854775807</span><span class="token punctuation">)</span></code></pre>
<h3 id="更新元组内容"><a href="#更新元组内容" class="headerlink" title="更新元组内容"></a>更新元组内容</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Tuple3<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">,</span> Long<span class="token operator">></span> tuple3 <span class="token operator">=</span> Tuple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"TupleTests"</span><span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>

  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token punctuation">;</span>

  tuple3 <span class="token operator">=</span> tuple3<span class="token punctuation">.</span><span class="token function">update1</span><span class="token punctuation">(</span><span class="token string">"哈哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>通过<code>update1-n</code>方法，可以实现元组内容的更新，更新结果</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">(</span>TupleTests<span class="token punctuation">,</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">09</span>T20<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token number">27.623</span><span class="token punctuation">,</span> <span class="token number">9223372036854775807</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>哈哈哈哈<span class="token punctuation">,</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">09</span>T20<span class="token punctuation">:</span><span class="token number">42</span><span class="token punctuation">:</span><span class="token number">27.623</span><span class="token punctuation">,</span> <span class="token number">9223372036854775807</span><span class="token punctuation">)</span></code></pre>
<h3 id="方法多个返回值使用元组接收"><a href="#方法多个返回值使用元组接收" class="headerlink" title="方法多个返回值使用元组接收"></a>方法多个返回值使用元组接收</h3><p>这个需求其实之前在<a href="https://xiaomozhang.github.io/2020/01/04/java8-date-cycle/">Java8 处理常见的日期周期</a>这篇文章已经用过了，比如我们需要获取一个周期数据，有开始和结束，那么元组无疑是最好的选择。比如我们需要封装一个方法获取今天的最小时间和最大时间，那么这里就需要两个返回值，虽然我们可以用<code>Object[]</code>或者<code>Map</code>之类的容器达到我们的效果，但是如果我返回值得类型都不尽想同，那么在获取的时候就要进行类型转换，加到了转换出错的概率，但是使用元组就不会有这个问题。</p>
<ul>
<li><p>获取一天的开始和结束时间</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>LocalDateTime<span class="token punctuation">,</span> LocalDateTime<span class="token operator">></span> <span class="token function">getNowRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  LocalDate now <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 一天中从零时开始</span>
  LocalDateTime startTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span>MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 一天到23:59:59秒结束</span>
  LocalDateTime endTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Tuple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>startTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
</li>
<li><p>获取返回值</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Tuple2<span class="token operator">&lt;</span>LocalDateTime<span class="token punctuation">,</span> LocalDateTime<span class="token operator">></span> tuple2 <span class="token operator">=</span> <span class="token function">getNowRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// 这里通过 _n 或者 _n() 获取每一个元组中的一列数据</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始时间:"</span> <span class="token operator">+</span> tuple2<span class="token punctuation">.</span><span class="token function">_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束时间:"</span> <span class="token operator">+</span> tuple2<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>我们可以看到<code>getNowRange</code>同时有两个放回值，通过<code>Tuple2</code>进行保存，过 _n 或者 _n() 获取每一个元组中的一列数据。最后获取的结果为</p>
<pre><code>开始时间:2020-01-09T00:00
结束时间:2020-01-09T23:59:59.999999999</code></pre>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是元组最常用的一些方法，其实我理解的元组就是一种列式存储的数据容器，和我们平时用的<code>Collection</code>接口下的一些<code>List</code>，<code>Set</code>不同，他们都是以行的形式存储，有了<code>Tuple</code>以后，在日常开发中也多了一种数据在内存中存储的选择。</p>
<p>当然元组只是<code>vavr</code>库中的一小部分，更多使用方法还是要看官方文档</p>
<p>参考文章：<a href="https://www.ibm.com/developerworks/cn/java/j-understanding-functional-programming-4/index.html">使用 Vavr 进行函数式编程</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 处理常见的日期周期</title>
    <url>/2020/01/04/java8-date-cycle/</url>
    <content><![CDATA[<p>日常开发中，经常会有获取周、月、季度的开始和结束时间的需求，Java8之前的date类和Calendar结合也可以实现，但是还是比较复杂，下面使用Java8的日期api获取周月季的周期。</p>
<h2 id="获取当前是周几"><a href="#获取当前是周几" class="headerlink" title="获取当前是周几"></a>获取当前是周几</h2><pre class=" language-java"><code class="language-java">LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 输出结果</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>04T14<span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">15.870</span>
<span class="token number">6</span></code></pre>
<h2 id="获取当前周的开始和结束时间"><a href="#获取当前周的开始和结束时间" class="headerlink" title="获取当前周的开始和结束时间"></a>获取当前周的开始和结束时间</h2><pre class=" language-java"><code class="language-java">LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间:"</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//当前时间减去今天是周几()</span>
LocalDateTime startTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//当前时间加上（8-今天周几）</span>
LocalDateTime endTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> now<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本周开始时间:"</span> <span class="token operator">+</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本周结束时间:"</span> <span class="token operator">+</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 输出结果</span>
当前时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>04T14<span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">56.110</span>

本周开始时间<span class="token operator">:</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>29T14<span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">56.110</span>
本周结束时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>06T14<span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">56.110</span></code></pre>
<p>但是发现一个问题，以上获取到的结果一周开始是从周天开始的，并不是我们日常的习惯从周一开始，那么要从周一开始可以使用<code>WeekFields</code>设置一周的开始是周几</p>
<pre class=" language-java"><code class="language-java">LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间:"</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 使用WeekFields设置一周的开始为周一</span>
TemporalField fieldISO <span class="token operator">=</span> WeekFields<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>MONDAY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime startTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>fieldISO<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime endTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>fieldISO<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本周开始时间:"</span> <span class="token operator">+</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本周结束时间:"</span> <span class="token operator">+</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 输出结果</span>
当前时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>04T14<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">13.176</span>

本周开始时间<span class="token operator">:</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>30T14<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">13.176</span>
本周结束时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>05T14<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">13.176</span></code></pre>
<p>以上两种方式可以获取到本周的开始和结束时间，但是如果我们需要一周从00点开始，到23:59:59秒结束，又该如何设置呢？</p>
<p>其实也很简单，只需要在<code>LocalDateTime</code>对象的 <code>LocalTime</code>即可</p>
<pre class=" language-java"><code class="language-java">LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间:"</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 使用WeekFields设置一周的开始为周一</span>
TemporalField fieldISO <span class="token operator">=</span> WeekFields<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>MONDAY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 设置开始时间为LocalTime.MIN</span>
LocalDateTime startTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>fieldISO<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span>MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 设置结束时间为LocalTime.MAX</span>
LocalDateTime endTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>fieldISO<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本周开始时间:"</span> <span class="token operator">+</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本周结束时间:"</span> <span class="token operator">+</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 输出结果</span>
当前时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>04T14<span class="token operator">:</span><span class="token number">22</span><span class="token operator">:</span><span class="token number">01.291</span>

本周开始时间<span class="token operator">:</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>30T00<span class="token operator">:</span><span class="token number">00</span>
本周结束时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>05T23<span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">59.999999999</span></code></pre>
<h2 id="获取本月的开始和结束时间"><a href="#获取本月的开始和结束时间" class="headerlink" title="获取本月的开始和结束时间"></a>获取本月的开始和结束时间</h2><p>如果不需要时间归到00点和23:59:59，则不设置<code>LocalTime</code>即可</p>
<pre class=" language-java"><code class="language-java">LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间:"</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime startTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">firstDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span>MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime endTime <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">lastDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本月开始时间:"</span> <span class="token operator">+</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本月结束时间:"</span> <span class="token operator">+</span> endTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 输出结果</span>
当前时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>04T14<span class="token operator">:</span><span class="token number">27</span><span class="token operator">:</span><span class="token number">33.706</span>

本月开始时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>01T00<span class="token operator">:</span><span class="token number">00</span>
本月结束时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>31T23<span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">59.999999999</span></code></pre>
<h2 id="获取一个季度的开始和结果"><a href="#获取一个季度的开始和结果" class="headerlink" title="获取一个季度的开始和结果"></a>获取一个季度的开始和结果</h2><p>获取季度的开始和结束Java8并没有提供直接的api使用，但是我们可以使用<code>TemporalQuery</code>进行自定义查询获取，而且季度和月度以及周有些许不同，每年的季度开始和结束都是固定的</p>
<ul>
<li>一季度的始终是每年的<code>01.01-03.31</code></li>
<li>二季度的始终是每年的<code>04.01-06.30</code></li>
<li>三季度的始终是每年的<code>07.01-09.30</code></li>
<li>四季度的始终是每年的<code>10.01-12.31</code></li>
</ul>
<p>废话不多说，直接上代码，先定义了一个<code>QuarterCycle</code>类</p>
<p><code>getQuarterRange</code>方法中使用了<code>Tuple</code>，主要是为了方便存储开始和结束时间，也可以使用<code>LocalDateTime[]</code>存储，并没有特殊意义</p>
<h3 id="QuarterCycle"><a href="#QuarterCycle" class="headerlink" title="QuarterCycle"></a>QuarterCycle</h3><pre class=" language-java"><code class="language-java">
<span class="token keyword">import</span> io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Month<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span>TemporalAccessor<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span>TemporalQuery<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-03.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuarterCycle</span> <span class="token punctuation">{</span>


    <span class="token comment" spellcheck="true">/**
     * 定义四个季度枚举值
     */</span>
    <span class="token keyword">enum</span> QuarterEnum <span class="token punctuation">{</span>
        FIRST<span class="token punctuation">,</span> SECOND<span class="token punctuation">,</span> THIRD<span class="token punctuation">,</span> FOURTH
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">QuarterOfYearQuery</span> <span class="token keyword">implements</span> <span class="token class-name">TemporalQuery</span><span class="token operator">&lt;</span>QuarterEnum<span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> QuarterEnum <span class="token function">queryFrom</span><span class="token punctuation">(</span>TemporalAccessor temporal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            LocalDate now <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>temporal<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Month<span class="token punctuation">.</span>APRIL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> QuarterEnum<span class="token punctuation">.</span>FIRST<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Month<span class="token punctuation">.</span>JULY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> QuarterEnum<span class="token punctuation">.</span>SECOND<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>Month<span class="token punctuation">.</span>OCTOBER<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> QuarterEnum<span class="token punctuation">.</span>THIRD<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> QuarterEnum<span class="token punctuation">.</span>FOURTH<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 根据 LocalDateTime 获取季度
     *
     * @param dateTime
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQuarter</span><span class="token punctuation">(</span>LocalDateTime dateTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getQuarter</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 根据 LocalDate 获取季度
     *
     * @param date
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQuarter</span><span class="token punctuation">(</span>LocalDate date<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        TemporalQuery<span class="token operator">&lt;</span>QuarterEnum<span class="token operator">></span> quarterOfYearQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuarterOfYearQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        QuarterEnum quarter <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>quarterOfYearQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>quarter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> FIRST<span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> SECOND<span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> THIRD<span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> FOURTH<span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>LocalDateTime<span class="token punctuation">,</span> LocalDateTime<span class="token operator">></span> <span class="token function">getQuarterRange</span><span class="token punctuation">(</span>LocalDateTime dateTime<span class="token punctuation">,</span> <span class="token keyword">int</span> quarter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getQuarterRange</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quarter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>LocalDateTime<span class="token punctuation">,</span> LocalDateTime<span class="token operator">></span> <span class="token function">getQuarterRange</span><span class="token punctuation">(</span>LocalDate dateTime<span class="token punctuation">,</span> <span class="token keyword">int</span> quarter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">getQuarterRange</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> quarter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取某年某季度的第一天和最后一天
     *
     * @param year    哪一年
     * @param quarter 第几季度
     */</span>
    <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>LocalDateTime<span class="token punctuation">,</span> LocalDateTime<span class="token operator">></span> <span class="token function">getQuarterRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> quarter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        LocalDate startDate<span class="token punctuation">,</span> endDate<span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>quarter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                <span class="token comment" spellcheck="true">// 01.01-03.31</span>
                startDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                endDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                <span class="token comment" spellcheck="true">// 04.01-06.30</span>
                startDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                endDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                <span class="token comment" spellcheck="true">// 07.01-09.30</span>
                startDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                endDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
                <span class="token comment" spellcheck="true">// 10.01-12.31</span>
                startDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                endDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"quarter range [1-4]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> Tuple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span>MIN<span class="token punctuation">)</span><span class="token punctuation">,</span> endDate<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class=" language-java"><code class="language-java">QuarterCycle quarterCycle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuarterCycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间:"</span> <span class="token operator">+</span> now <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> quarter <span class="token operator">=</span> quarterCycle<span class="token punctuation">.</span><span class="token function">getQuarter</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前季度:"</span> <span class="token operator">+</span> quarter <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Tuple2<span class="token operator">&lt;</span>LocalDateTime<span class="token punctuation">,</span> LocalDateTime<span class="token operator">></span> tuple2 <span class="token operator">=</span> quarterCycle<span class="token punctuation">.</span><span class="token function">getQuarterRange</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> quarter<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前季度开始和结束时间:"</span> <span class="token operator">+</span> tuple2 <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 输出结果</span>
当前时间<span class="token operator">:</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>04T15<span class="token operator">:</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">43.949</span>

当前季度<span class="token operator">:</span><span class="token number">1</span>

当前季度开始和结束时间<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>01T00<span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">,</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span>31T23<span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">59.999999999</span><span class="token punctuation">)</span></code></pre>
<h2 id="常用方法整理"><a href="#常用方法整理" class="headerlink" title="常用方法整理"></a>常用方法整理</h2><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>adjustInto</td>
<td>调整指定的Temporal和当前LocalDateTime对</td>
</tr>
<tr>
<td>atOffset</td>
<td>结合LocalDateTime和ZoneOffset创建一个</td>
</tr>
<tr>
<td>atZone</td>
<td>结合LocalDateTime和指定时区创建一个ZonedD</td>
</tr>
<tr>
<td>compareTo</td>
<td>比较两个LocalDateTime</td>
</tr>
<tr>
<td>format</td>
<td>格式化LocalDateTime生成一个字符串</td>
</tr>
<tr>
<td>from</td>
<td>转换TemporalAccessor为LocalDateTime</td>
</tr>
<tr>
<td>get</td>
<td>得到LocalDateTime的指定字段的值</td>
</tr>
<tr>
<td>getDayOfMonth</td>
<td>得到LocalDateTime是月的第几天</td>
</tr>
<tr>
<td>getDayOfWeek</td>
<td>得到LocalDateTime是星期几</td>
</tr>
<tr>
<td>getDayOfYear</td>
<td>得到LocalDateTime是年的第几天</td>
</tr>
<tr>
<td>getHour</td>
<td>得到LocalDateTime的小时</td>
</tr>
<tr>
<td>getLong</td>
<td>得到LocalDateTime指定字段的值</td>
</tr>
<tr>
<td>getMinute</td>
<td>得到LocalDateTime的分钟</td>
</tr>
<tr>
<td>getMonth</td>
<td>得到LocalDateTime的月份</td>
</tr>
<tr>
<td>getMonthValue</td>
<td>得到LocalDateTime的月份，从1到12</td>
</tr>
<tr>
<td>getNano</td>
<td>得到LocalDateTime的纳秒数</td>
</tr>
<tr>
<td>getSecond</td>
<td>得到LocalDateTime的秒数</td>
</tr>
<tr>
<td>getYear</td>
<td>得到LocalDateTime的年份</td>
</tr>
<tr>
<td>isAfter</td>
<td>判断LocalDateTime是否在指定LocalDateTime之后</td>
</tr>
<tr>
<td>isBefore</td>
<td>判断LocalDateTime是否在指定LocalDateTime之前</td>
</tr>
<tr>
<td>isEqual</td>
<td>判断两个LocalDateTime是否相等</td>
</tr>
<tr>
<td>isSupported</td>
<td>判断LocalDateTime是否支持指定时间字段或单元</td>
</tr>
<tr>
<td>minus</td>
<td>返回LocalDateTime减去指定数量的时间得到的值</td>
</tr>
<tr>
<td>minusDays</td>
<td>返回LocalDateTime减去指定天数得到的值</td>
</tr>
<tr>
<td>minusHours</td>
<td>返回LocalDateTime减去指定小时数得到的值</td>
</tr>
<tr>
<td>minusMinutes</td>
<td>返回LocalDateTime减去指定分钟数得到的值</td>
</tr>
<tr>
<td>minusMonths</td>
<td>返回LocalDateTime减去指定月数得到的值</td>
</tr>
<tr>
<td>minusNanos</td>
<td>返回LocalDateTime减去指定纳秒数得到的值</td>
</tr>
<tr>
<td>minusSeconds</td>
<td>返回LocalDateTime减去指定秒数得到的值</td>
</tr>
<tr>
<td>minusWeeks</td>
<td>返回LocalDateTime减去指定星期数得到的值</td>
</tr>
<tr>
<td>minusYears</td>
<td>返回LocalDateTime减去指定年数得到的值</td>
</tr>
<tr>
<td>now</td>
<td>返回指定时钟的当前LocalDateTime</td>
</tr>
<tr>
<td>of</td>
<td>根据年、月、日、时、分、秒、纳秒等创建LocalDateTime</td>
</tr>
<tr>
<td>ofEpochSecond</td>
<td>根据秒数(从1970-01-0100:00:00开始)创建LocalDateTime</td>
</tr>
<tr>
<td>ofInstant</td>
<td>根据Instant和ZoneId创建LocalDateTime</td>
</tr>
<tr>
<td>parse</td>
<td>解析字符串得到LocalDateTime</td>
</tr>
<tr>
<td>plus</td>
<td>返回LocalDateTime加上指定数量的时间得到的值</td>
</tr>
<tr>
<td>plusDays</td>
<td>返回LocalDateTime加上指定天数得到的值</td>
</tr>
<tr>
<td>plusHours</td>
<td>返回LocalDateTime加上指定小时数得到的值</td>
</tr>
<tr>
<td>plusMinutes</td>
<td>返回LocalDateTime加上指定分钟数得到的值</td>
</tr>
<tr>
<td>plusMonths</td>
<td>返回LocalDateTime加上指定月数得到的值</td>
</tr>
<tr>
<td>plusNanos</td>
<td>返回LocalDateTime加上指定纳秒数得到的值</td>
</tr>
<tr>
<td>plusSeconds</td>
<td>返回LocalDateTime加上指定秒数得到的值</td>
</tr>
<tr>
<td>plusWeeks</td>
<td>返回LocalDateTime加上指定星期数得到的值</td>
</tr>
<tr>
<td>plusYears</td>
<td>返回LocalDateTime加上指定年数得到的值</td>
</tr>
<tr>
<td>query</td>
<td>查询LocalDateTime</td>
</tr>
<tr>
<td>range</td>
<td>返回指定时间字段的范围</td>
</tr>
<tr>
<td>toLocalDate</td>
<td>返回LocalDateTime的LocalDate部分</td>
</tr>
<tr>
<td>toLocalTime</td>
<td>返回LocalDateTime的LocalTime部分</td>
</tr>
<tr>
<td>toString</td>
<td>返回LocalDateTime的字符串表示</td>
</tr>
<tr>
<td>truncatedTo</td>
<td>返回LocalDateTime截取到指定时间单位的拷贝</td>
</tr>
<tr>
<td>until</td>
<td>计算LocalDateTime和另一个LocalDateTime</td>
</tr>
<tr>
<td>with</td>
<td>返回LocalDateTime指定字段更改为新值后的拷贝</td>
</tr>
<tr>
<td>withDayOfMonth</td>
<td>返回LocalDateTime月的第几天更改为新值后的拷贝</td>
</tr>
<tr>
<td>withDayOfYear</td>
<td>返回LocalDateTime年的第几天更改为新值后的拷贝</td>
</tr>
<tr>
<td>withHour</td>
<td>返回LocalDateTime的小时数更改为新值后的拷贝</td>
</tr>
<tr>
<td>withMinute</td>
<td>返回LocalDateTime的分钟数更改为新值后的拷贝</td>
</tr>
<tr>
<td>withMonth</td>
<td>返回LocalDateTime的月份更改为新值后的拷贝</td>
</tr>
<tr>
<td>withNano</td>
<td>返回LocalDateTime的纳秒数更改为新值后的拷贝</td>
</tr>
<tr>
<td>withSecond</td>
<td>返回LocalDateTime的秒数更改为新值后的拷贝</td>
</tr>
<tr>
<td>withYear</td>
<td>返回LocalDateTime年份更改为新值后的拷贝</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 中的日期类序列化问题</title>
    <url>/2020/01/07/java8-date-gson/</url>
    <content><![CDATA[<p>自从习惯了使用Java8 中的日期类以后，就已经完全抛弃了<code>java.sql</code>、<code>java.util</code>中的日期处理类，但是Java8中的日期类在序列化与反序列化时不是我们正常看到的标准格式，这里记录一下如何使用<code>Gson</code>进行序列化和反序列化时正常对Java8的日期类进行处理</p>
<h2 id="默认序列化结果"><a href="#默认序列化结果" class="headerlink" title="默认序列化结果"></a>默认序列化结果</h2><p>这里写了一个很简单的test，对<code>LocalDate</code>、<code>LocalDateTime</code>进行序列化与反序列化</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>Gson<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDate<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-07.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8DateTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DateMetric dateMetric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateMetric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dateMetric<span class="token punctuation">.</span><span class="token function">setLocalDate</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dateMetric<span class="token punctuation">.</span><span class="token function">setLocalDateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// serializer</span>
        Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>dateMetric<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"serializer:{}"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// deserializer</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"deserializer:{}"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> DateMetric<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">DateMetric</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> LocalDate localDate<span class="token punctuation">;</span>

        <span class="token keyword">private</span> LocalDateTime localDateTime<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>查看结果，可以看到反序列化的结果是我们自己想要的，但是序列化的结果并不是我们想要的<code>yyyy-MM-dd HH:mm:ss</code> 这种格式，那么这时候就需要用到<code>GsonBuilder</code>来注册<code>registerTypeAdapter</code></p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">09</span><span class="token punctuation">:</span><span class="token number">01.345</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>Java8DateTests <span class="token operator">-</span> serializer<span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"localDate"</span><span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"year"</span><span class="token punctuation">:</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token string">"month"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"day"</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token operator">}</span><span class="token punctuation">,</span><span class="token string">"localDateTime"</span><span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"date"</span><span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"year"</span><span class="token punctuation">:</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token string">"month"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"day"</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token operator">}</span><span class="token punctuation">,</span><span class="token string">"time"</span><span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"hour"</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">"minute"</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">"second"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"nano"</span><span class="token punctuation">:</span><span class="token number">271000000</span><span class="token operator">}}}</span>

<span class="token number">22</span><span class="token punctuation">:</span><span class="token number">09</span><span class="token punctuation">:</span><span class="token number">01.356</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>Java8DateTests <span class="token operator">-</span> deserializer<span class="token punctuation">:</span>Java8DateTests<span class="token punctuation">.</span><span class="token function">DateMetric</span><span class="token punctuation">(</span>localDate<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span><span class="token punctuation">,</span> localDateTime<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T22<span class="token punctuation">:</span><span class="token number">09</span><span class="token punctuation">:</span><span class="token number">01.271</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="自定义序列化与反序列化的Adapter"><a href="#自定义序列化与反序列化的Adapter" class="headerlink" title="自定义序列化与反序列化的Adapter"></a>自定义序列化与反序列化的Adapter</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * 处理LocalDate的序列化与反序列化
     */</span>
<span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocalDateAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>LocalDate<span class="token operator">></span><span class="token punctuation">,</span> JsonDeserializer<span class="token operator">&lt;</span>LocalDate<span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> JsonElement <span class="token function">serialize</span><span class="token punctuation">(</span>LocalDate date<span class="token punctuation">,</span> Type typeOfSrc<span class="token punctuation">,</span> JsonSerializationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonPrimitive</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> LocalDate <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonElement element<span class="token punctuation">,</span> Type type<span class="token punctuation">,</span> JsonDeserializationContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonParseException <span class="token punctuation">{</span>
    String timestamp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
     * 处理LocalDateTime序列化与反序列化
     */</span>
<span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LocalDateTimeAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">JsonSerializer</span><span class="token operator">&lt;</span>LocalDateTime<span class="token operator">></span><span class="token punctuation">,</span> JsonDeserializer<span class="token operator">&lt;</span>LocalDateTime<span class="token operator">></span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> JsonElement <span class="token function">serialize</span><span class="token punctuation">(</span>LocalDateTime date<span class="token punctuation">,</span> Type typeOfSrc<span class="token punctuation">,</span> JsonSerializationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JsonPrimitive</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> LocalDateTime <span class="token function">deserialize</span><span class="token punctuation">(</span>JsonElement element<span class="token punctuation">,</span> Type type<span class="token punctuation">,</span> JsonDeserializationContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonParseException <span class="token punctuation">{</span>
    String timestamp <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="使用GsonBuilder创建gson对象"><a href="#使用GsonBuilder创建gson对象" class="headerlink" title="使用GsonBuilder创建gson对象"></a>使用GsonBuilder创建gson对象</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  DateMetric dateMetric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateMetric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dateMetric<span class="token punctuation">.</span><span class="token function">setLocalDate</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dateMetric<span class="token punctuation">.</span><span class="token function">setLocalDateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// serializer</span>
  Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  String json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>dateMetric<span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"serializer:{}"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// deserializer</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"deserializer:{}"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> DateMetric<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>结果</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">15.738</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>Java8DateTests <span class="token operator">-</span> serializer<span class="token punctuation">:</span><span class="token operator">{</span><span class="token string">"localDate"</span><span class="token punctuation">:</span><span class="token string">"2020-01-07"</span><span class="token punctuation">,</span><span class="token string">"localDateTime"</span><span class="token punctuation">:</span><span class="token string">"2020-01-07T22:16:15.662"</span><span class="token operator">}</span>

<span class="token number">22</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">15.745</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>Java8DateTests <span class="token operator">-</span> deserializer<span class="token punctuation">:</span>Java8DateTests<span class="token punctuation">.</span><span class="token function">DateMetric</span><span class="token punctuation">(</span>localDate<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span><span class="token punctuation">,</span> localDateTime<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T22<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token number">15.662</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="输出json进行格式化处理"><a href="#输出json进行格式化处理" class="headerlink" title="输出json进行格式化处理"></a>输出json进行格式化处理</h2><p>平时输出的json都是一行文本，如果需要对json的输出结果需要进行格式化处理的话，也可以使用<code>GsonBuilder</code>的<code>setPrettyPrinting()</code>方法</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  DateMetric dateMetric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateMetric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dateMetric<span class="token punctuation">.</span><span class="token function">setLocalDate</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  dateMetric<span class="token punctuation">.</span><span class="token function">setLocalDateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// serializer</span>
  Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置输出格式格式化显示</span>
    <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LocalDateTimeAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  String json <span class="token operator">=</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>dateMetric<span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"serializer:\n{}"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">// deserializer</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"deserializer:{}"</span><span class="token punctuation">,</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> DateMetric<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>输出结果</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token number">22</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">03.307</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>Java8DateTests <span class="token operator">-</span> serializer<span class="token punctuation">:</span>
<span class="token operator">{</span>
  <span class="token string">"localDate"</span><span class="token punctuation">:</span> <span class="token string">"2020-01-07"</span><span class="token punctuation">,</span>
  <span class="token string">"localDateTime"</span><span class="token punctuation">:</span> <span class="token string">"2020-01-07T22:21:03.218"</span>
<span class="token operator">}</span>

<span class="token number">22</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">03.313</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>Java8DateTests <span class="token operator">-</span> deserializer<span class="token punctuation">:</span>Java8DateTests<span class="token punctuation">.</span><span class="token function">DateMetric</span><span class="token punctuation">(</span>localDate<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span><span class="token punctuation">,</span> localDateTime<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T22<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">03.218</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="对已有的json进行格式化处理"><a href="#对已有的json进行格式化处理" class="headerlink" title="对已有的json进行格式化处理"></a>对已有的json进行格式化处理</h2><p>如果我们的json文本已经存在，那我我们想通过gson进行格式化展示该怎么做呢？</p>
<p>这里做法也很简单，不过<code>JsonObject</code>和<code>JsonArray</code>略有区别，不过都是需要将json读取成<code>JsonObject</code>或者<code>JsonArray</code>对象</p>
<h3 id="JsonObject-格式化"><a href="#JsonObject-格式化" class="headerlink" title="JsonObject 格式化"></a>JsonObject 格式化</h3><p>原始JsonObject数据</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"localDate"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"year"</span><span class="token operator">:</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token property">"month"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"day"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"localDateTime"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"date"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"year"</span><span class="token operator">:</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token property">"month"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"day"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"time"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"hour"</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token property">"minute"</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token property">"second"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"nano"</span><span class="token operator">:</span><span class="token number">271000000</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jsonObjectFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  JsonObject jsonObject <span class="token operator">=</span> JsonParser<span class="token punctuation">.</span><span class="token function">parseString</span><span class="token punctuation">(</span>JSON_STRING<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>输出结果：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"localDate"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"year"</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
    <span class="token property">"month"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">"day"</span><span class="token operator">:</span> <span class="token number">7</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"localDateTime"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"date"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"year"</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
      <span class="token property">"month"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">"day"</span><span class="token operator">:</span> <span class="token number">7</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"time"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"hour"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
      <span class="token property">"minute"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
      <span class="token property">"second"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">"nano"</span><span class="token operator">:</span> <span class="token number">271000000</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="JsonArray-格式化"><a href="#JsonArray-格式化" class="headerlink" title="JsonArray 格式化"></a>JsonArray 格式化</h3><p>原始JsonArray数据</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"localDate"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"year"</span><span class="token operator">:</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token property">"month"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"day"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"localDateTime"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"date"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"year"</span><span class="token operator">:</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token property">"month"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"day"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"time"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">"hour"</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token property">"minute"</span><span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token property">"second"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">"nano"</span><span class="token operator">:</span><span class="token number">271000000</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jsonArrayFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  JsonArray jsonArray <span class="token operator">=</span> JsonParser<span class="token punctuation">.</span><span class="token function">parseString</span><span class="token punctuation">(</span>JSON_STRING_ARRAY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Gson gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPrettyPrinting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>jsonArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>输出结果：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">"localDate"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"year"</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
      <span class="token property">"month"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token property">"day"</span><span class="token operator">:</span> <span class="token number">7</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"localDateTime"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"date"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"year"</span><span class="token operator">:</span> <span class="token number">2020</span><span class="token punctuation">,</span>
        <span class="token property">"month"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">"day"</span><span class="token operator">:</span> <span class="token number">7</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token property">"time"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"hour"</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
        <span class="token property">"minute"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
        <span class="token property">"second"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">"nano"</span><span class="token operator">:</span> <span class="token number">271000000</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了使用Gson对Java8中的日志进行序列化与反序列化格式的处理，以及使用gson对json进行格式化的输出。</p>
<p>参考地址：<a href="https://stackoverflow.com/questions/39192945/serialize-java-8-localdate-as-yyyy-mm-dd-with-gson">Serialize Java 8 LocalDate as yyyy-mm-dd with Gson</a></p>
<p>完整代码：<a href="https://github.com/xiaomozhang/personal-life-example/blob/master/example-kafka/src/test/java/com/xiaozhangge/Java8DateTests.java">Java8DateTests</a></p>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Gson</tag>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 新特性-lambda表达式</title>
    <url>/2019/02/13/java8-lambda-expression/</url>
    <content><![CDATA[<p>2014年3月发布的Java 8，有可能是Java版本更新中变化最大的一次。新的Java 8为开发者带来了许多重量级的新特性，包括Lambda表达式，流式数据处理，新的<code>Optional</code>类，新的日期和时间API等。这些新特性给Java开发者带来了福音，特别是Lambda表达式的支持，使程序设计更加简化。本篇文章将讨论行为参数化，Lambda表达式，函数式接口等特性。</p>
<h2 id="行为参数化"><a href="#行为参数化" class="headerlink" title="行为参数化"></a>行为参数化</h2><p>在软件开发的过程中，开发人员可能会遇到频繁的需求变更，使他们不断地修改程序以应对这些变化的需求，导致项目进度缓慢甚至项目延期。行为参数化就是一种可以帮助你应对频繁需求变更的开发模式，简单的说，就是预先定义一个代码块而不去执行它，把它当做参数传递给另一个方法，这样，这个方法的行为就被这段代码块参数化了。</p>
<p>为了方便理解，我们通过一个例子来讲解行为参数化的使用。假设我们正在开发一个图书管理系统，需求是要对图书的作者进行过滤，筛选出指定作者的书籍。比较常见的做法就是编写一个方法，把作者当成方法的参数：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">filterByAuthor</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books<span class="token punctuation">,</span> String author<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>现在客户需要变更需求，添加过滤条件，按照出版社过滤，于是我们不得不再次编写一个方法：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">filterByPublisher</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books<span class="token punctuation">,</span> String publisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>publisher<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>两个方法除了名称之外，内部的实现逻辑几乎一模一样，唯一的区别就是<code>if</code>判断条件，前者判断的是作者，后者判断的是出版社。如果现在客户又要增加需求，需要按照图书的售价过滤，是不是需要再次将上面的方法复制一遍，将<code>if</code>判断条件改为售价？ No! 这种做法违背了DRY（Don’t Repeat Yourself，不要重复自己）原则，而且不利于后期维护，如果需要改变方法内部遍历方式来提高性能，意味着每个<code>filterByXxx()</code>方法都需要修改，工作量太大。</p>
<p>一种可行的办法是对过滤的条件做更高层的抽象，过滤的条件无非就是图书的某些属性（比如价格、出版社、出版日期、作者等），可以声明一个接口用于对过滤条件建模：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookPredicate</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><code>BookPredicate</code>接口只有一个抽象方法<code>test()</code>，该方法接受一个<code>Book</code>类型参数，返回一个<code>boolean</code>值，可以用它来表示图书的不同过滤条件。</p>
<p>接下来我们对之前的过滤方法进行重构，将<code>filterByXxx()</code>方法的第二个参数换成上面定义的接口：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books<span class="token punctuation">,</span> BookPredicate bookPredicate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>Book book <span class="token operator">:</span> books<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bookPredicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>将过滤的条件换成<code>BookPredicate</code>的实现类，这里采用了内部类：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据作者过滤</span>
<span class="token keyword">final</span> String author <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>Book<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BookPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 根据图书价格过滤</span>
<span class="token keyword">final</span> <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">100.00D</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>Book<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BookPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>Book book<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> price <span class="token operator">></span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>重构前后有什么区别？我们将方法中的<code>if</code>判断条件换成了<code>BookPredicate</code>接口定义的<code>test()</code>方法，用于判断是否满足过滤条件，将图书过滤的逻辑交给了<code>BookPredicate</code>接口的实现类，而不是在<code>filter()</code>方法内部实现过滤，而<code>BookPredicate</code>接口又是<code>filter()</code>方法的参数。以上的步骤，就是将行为参数化，也就是将图书过滤的行为（<code>BookPredicate</code>接口的实现类）当做<code>filter()</code>方法的参数。现在，可以删掉所有<code>filterByXxx()</code>的方法，只保留<code>filter()</code>方法，就算后期数据规模很庞大，需要改变集合的遍历方式来提高性能，只需要在<code>filter()</code>方法内部做出相应的修改，而不用去修改其他业务代码。</p>
<p>不过，<code>BookPredicate</code>接口只是针对图书的过滤，如果需要对其他对象集合排序（如：用户），又得重新申明一个接口。有一个办法就是可以用Java的泛型对它做进一步的抽象：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>现在你可以把<code>filter()</code>方法用在任何对象的过滤中。</p>
<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>虽然我们对<code>filter()</code>方法进行重构，并抽象了<code>Predicate</code>接口作为过滤的条件，但实际上还需要编写很多内部类来实现<code>Predicate</code>接口。使用内部类的方式实现<code>Predicate</code>接口有很多缺点：首先是代码显得臃肿不堪，可读性差；其次，如果某个局部变量被内部类使用，这个变量必须使用<code>final</code>关键字修饰。在Java 8中，使用Lambda表达式可以对内部类进一步简化：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 根据作者过滤</span>
List<span class="token operator">&lt;</span>Book<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> book <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"张三"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 根据图书价格过滤</span>
List<span class="token operator">&lt;</span>Book<span class="token operator">></span> result <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> book <span class="token operator">-</span><span class="token operator">></span> <span class="token number">100</span> <span class="token operator">></span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>使用Lambda仅仅用一行代码就对内部类进行了转化，而且代码变得更加清晰可读。其中<code>book -&gt; "张三".equals(book.getAuthor())</code>和<code>book -&gt; 100 &gt; book.getPrice()</code>就是我们接下来要研究的Lambda表达式。</p>
<h3 id="Lambda表达式是什么"><a href="#Lambda表达式是什么" class="headerlink" title="Lambda表达式是什么"></a>Lambda表达式是什么</h3><p>Lambda表达式（lambda expression）是一个匿名函数，由数学中的λ演算而得名。在Java 8中可以把Lambda表达式理解为匿名函数，它没有名称，但是有参数列表、函数主体、返回类型等。</p>
<p>Lambda表达式的语法如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> statements<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre>
<p>为什么要使用Lambda表达式？前面你也看到了，在Java中使用内部类显得十分冗长，要编写很多样板代码，Lambda表达式正是为了简化这些步骤出现的，它使代码变得清晰易懂。</p>
<h3 id="如何使用Lambda表达式"><a href="#如何使用Lambda表达式" class="headerlink" title="如何使用Lambda表达式"></a>如何使用Lambda表达式</h3><p>Lambda表达式是为了简化内部类的，你可以把它当成是内部类的一种简写方式，只要是有内部类的代码块，都可以转化成Lambda表达式：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Comparator排序</span>
List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 使用Lambda表达式简化</span>
list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Runnable代码块</span>
Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Man!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 使用Lambda表达式简化</span>
Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Man!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>可以看出，只要是内部类的代码块，就可以使用Lambda表达式简化，并且简化后的代码清晰易懂。甚至，<code>Comparator</code>排序的Lambda表达式还可以进一步简化：</p>
<pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这种写法被称为 <strong>方法引用</strong>，方法引用是Lambda表达式的简便写法。如果你的Lambda表达式只是调用这个方法，最好使用名称调用，而不是描述如何调用，这样可以提高代码的可读性。</p>
<p>方法引用使用<code>::</code>分隔符，分隔符的前半部分表示引用类型，后面半部分表示引用的方法名称。例如：<code>Integer::compareTo</code>表示引用类型为<code>Integer</code>，引用名称为<code>compareTo</code>的方法。</p>
<p>类似使用方法引用的例子还有打印集合中的元素到控制台中：</p>
<pre class=" language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>如果你的好奇心使你翻看<code>Runnable</code>接口源代码，你会发现该接口被一个<code>@FunctionalInterface</code>的注解修饰，这是Java 8中添加的新注解，用于表示 <strong>函数式接口</strong>。</p>
<p>函数式接口又是什么鬼？在Java 8中，把那些仅有一个抽象方法的接口称为函数式接口。如果一个接口被<code>@FunctionalInterface</code>注解标注，表示这个接口被设计成函数式接口，只能有一个抽象方法，如果你添加多个抽象方法，编译时会提示“Multiple non-overriding abstract methods found in interface XXX”之类的错误。</p>
<p>函数式方法又能做什么？Java8允许你以Lambda表达式的方式为函数式接口提供实现，通俗的说，你可以将整个Lambda表达式作为接口的实现类。</p>
<p>除了<code>Runnable</code>之外，Java 8中内置了许多函数式接口供开发者使用，这些接口位于<code>java.util.function</code>包中，我们之前使用的<code>Predicate</code>接口，已经被包含在这个包内，他们分别为<code>Predicate</code>、<code>Consumer</code>和<code>Function</code>，由于我们已经在之前的图书过滤的例子中介绍了<code>Predicate</code>的用法，所以接下来主要介绍<code>Consumer</code>和<code>Function</code>的用法。</p>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a><code>Consumer</code></h3><p><code>java.util.function.Consumer&lt;T&gt;</code>定义了一个名叫<code>accept()</code>的抽象方法，它接受泛型<code>T</code>的对象，没有返回（<code>void</code>）。如果你需要访问类型<code>T</code>的对象，并对其执行某些操作，就可以使用这个接口。比如，你可以用它来创建一个<code>forEach()</code>方法，接受一个集合，并对集合中每个元素执行操作：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">forEach</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> Consumer<span class="token operator">&lt;</span>T<span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>T t<span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">forEach</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> str <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 也可以写成</span>
    <span class="token function">forEach</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a><code>Function</code></h3><p><code>java.util.function.Function&lt;T, R&gt;</code>接口定义了一个叫作<code>apply()</code>的方法，它接受一个泛型<code>T</code>的对象，并返回一个泛型<code>R</code>的对象。如果你需要定义一个Lambda，将输入对象的信息映射到输出，就可以使用这个接口。比如，我们需要计算一个图书集合中每本书的作者名称有几个汉字（假设这些书的作者都是中国人）：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>
    R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> List<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>R<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>T s<span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">99.00D</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">59.00D</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"王老五"</span><span class="token punctuation">,</span> <span class="token number">59.00D</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> results <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span>books<span class="token punctuation">,</span> book <span class="token operator">-</span><span class="token operator">></span> book<span class="token punctuation">.</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>现在，应该对Lambda表达式有一个初步的了解了，并且，你可以使用Lambda表达式来重构你的代码，提高代码可读性；使用行为参数化来设计你的程序，让程序更灵活。</p>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 新特性-Optional类</title>
    <url>/2019/02/13/java8-optional/</url>
    <content><![CDATA[<p>在Stream流式数据处理的文章中提到了<code>Optional</code>类，这是Java 8新增的一个类，用以解决程序中常见的<code>NullPointerException</code>异常问题。本篇文章将详细介绍<code>Optional</code>类，以及如何用它消除代码中的<code>null</code>检查。</p>
<h2 id="避免使用null检查"><a href="#避免使用null检查" class="headerlink" title="避免使用null检查"></a>避免使用<code>null</code>检查</h2><p>作为Java开发人员，几乎所有人都遇到过<code>NullPointerException</code>异常，大多数人遇到<code>NullPointerException</code>异常时都会在异常出现的地方加上<code>if</code>代码块来判断值不为空，比如下面的代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bindUserToRole</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String roleId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getRoleId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>roleId <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Role role <span class="token operator">=</span> roleDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>roleId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                role<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                roleDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这是比较普遍的做法，为了避免出现<code>NullPointerException</code>异常，手动对可能为<code>null</code>值进行了处理，不过代码看起来非常糟糕，业务逻辑被淹没在<code>if</code>逻辑判断中，也许下面的代码看起来可读性稍好一些：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">bindUserToRole</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    String roleId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getRoleId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>roleId <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    Role <span class="token operator">=</span> roleDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>roleId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        role<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        roleDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>上面的代码避免了深层的<code>if</code>语句嵌套，但本质上是一样的，方法内有三个不同的返回点，出错后调试也不容易，因为你不知道是那个值导致了<code>NullPointerException</code>异常。</p>
<p>基于上面的原因，Java 8中引入了一个新的类<code>Optional</code>，用以避免使用<code>null</code>值引发的种种问题。</p>
<h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a><code>Optional</code>类</h2><p><code>java.util.Optional&lt;T&gt;</code>类是一个封装了<code>Optional</code>值的容器对象，<code>Optional</code>值可以为<code>null</code>，如果值存在，调用<code>isPresent()</code>方法返回<code>true</code>，调用<code>get()</code>方法可以获取值。</p>
<h3 id="创建Optional对象"><a href="#创建Optional对象" class="headerlink" title="创建Optional对象"></a>创建<code>Optional</code>对象</h3><p><code>Optional</code>类提供类三个方法用于实例化一个<code>Optional</code>对象，它们分别为<code>empty()</code>、<code>of()</code>、<code>ofNullable()</code>，这三个方法都是静态方法，可以直接调用。</p>
<hr>
<p><code>empty()</code>方法用于创建一个没有值的<code>Optional</code>对象：</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> emptyOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>empty()</code>方法创建的对象没有值，如果对<code>emptyOpt</code>变量调用<code>isPresent()</code>方法会返回<code>false</code>，调用<code>get()</code>方法抛出<code>NullPointerException</code>异常。</p>
<hr>
<p><code>of()</code>方法使用一个非空的值创建<code>Optional</code>对象：</p>
<pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> notNullOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<hr>
<p><code>ofNullable()</code>方法接收一个可以为<code>null</code>的值：</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> nullableOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>如果<code>str</code>的值为<code>null</code>，得到的<code>nullableOpt</code>是一个没有值的<code>Optional</code>对象。</p>
<h3 id="提取Optional对象中的值"><a href="#提取Optional对象中的值" class="headerlink" title="提取Optional对象中的值"></a>提取<code>Optional</code>对象中的值</h3><p>如果我们要获取<code>User</code>对象中的<code>roleId</code>属性值，常见的方式是直接获取：</p>
<pre class=" language-java"><code class="language-java">String roleId <span class="token operator">=</span> null<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    roleId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getRoleId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>使用<code>Optional</code>中提供的<code>map()</code>方法可以以更简单的方式实现：</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> userOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> roleIdOpt <span class="token operator">=</span> userOpt<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getRoleId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="使用orElse-方法获取值"><a href="#使用orElse-方法获取值" class="headerlink" title="使用orElse()方法获取值"></a>使用<code>orElse()</code>方法获取值</h3><p><code>Optional</code>类还包含其他方法用于获取值，这些方法分别为：</p>
<ul>
<li><code>orElse()</code>：如果有值就返回，否则返回一个给定的值作为默认值；</li>
<li><code>orElseGet()</code>：与<code>orElse()</code>方法作用类似，区别在于生成默认值的方式不同。该方法接受一个<code>Supplier&lt;? extends T&gt;</code>函数式接口参数，用于生成默认值；</li>
<li><code>orElseThrow()</code>：与前面介绍的<code>get()</code>方法类似，当值为<code>null</code>时调用这两个方法都会抛出<code>NullPointerException</code>异常，区别在于该方法可以指定抛出的异常类型。</li>
</ul>
<p>下面来看看这三个方法的具体用法：</p>
<pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> strOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
String orElseResult <span class="token operator">=</span> strOpt<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"Hello Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String orElseGet <span class="token operator">=</span> strOpt<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Hello Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String orElseThrow <span class="token operator">=</span> strOpt<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Argument 'str' cannot be null or blank."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>此外，<code>Optional</code>类还提供了一个<code>ifPresent()</code>方法，该方法接收一个<code>Consumer&lt;? super T&gt;</code>函数式接口，一般用于将信息打印到控制台：</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> strOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strOpt<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="使用filter-方法过滤"><a href="#使用filter-方法过滤" class="headerlink" title="使用filter()方法过滤"></a>使用<code>filter()</code>方法过滤</h3><p><code>filter()</code>方法可用于判断<code>Optional</code>对象是否满足给定条件，一般用于条件过滤：</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> optional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"lw900925@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
optional <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"164"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在上面的代码中，如果<code>filter()</code>方法中的Lambda表达式成立，<code>filter()</code>方法会返回当前<code>Optional</code>对象值，否则，返回一个值为空的<code>Optional</code>对象。</p>
<h2 id="如何正确使用Optional"><a href="#如何正确使用Optional" class="headerlink" title="如何正确使用Optional"></a>如何正确使用<code>Optional</code></h2><p>通过上面的例子可以看出，<code>Optional</code>类可以优雅的避免<code>NullPointerException</code>带来的各种问题，不过，你是否真正掌握了<code>Optional</code>的用法？假设你试图使用<code>Optional</code>来避免可能出现的<code>NullPointerException</code>异常，编写了如下代码：</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> userOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>userOpt<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    User user <span class="token operator">=</span> userOpt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// do something...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// do something...</span>
<span class="token punctuation">}</span></code></pre>
<p>坦白说，上面的代码与我们之前的使用<code>if</code>语句判断空值没有任何区别，没有起到<code>Optional</code>的正真作用：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// do something...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// do something...</span>
<span class="token punctuation">}</span></code></pre>
<p>当我们从之前版本切换到Java 8的时候，不应该还按照之前的思维方式处理<code>null</code>值，Java 8提倡函数式编程，新增的许多API都可以用函数式编程表示，<code>Optional</code>类也是其中之一。这里有几条关于<code>Optional</code>使用的建议：</p>
<ol>
<li>尽量避免在程序中直接调用<code>Optional</code>对象的<code>get()</code>和<code>isPresent()</code>方法；</li>
<li>避免使用<code>Optional</code>类型声明实体类的属性；</li>
</ol>
<p>第一条建议中直接调用<code>get()</code>方法是很危险的做法，如果<code>Optional</code>的值为空，那么毫无疑问会抛出<code>NullPointerException</code>异常，而为了调用<code>get()</code>方法而使用<code>isPresent()</code>方法作为空值检查，这种做法与传统的用<code>if</code>语句块做空值检查没有任何区别。</p>
<p>第二条建议避免使用<code>Optional</code>作为实体类的属性，它在设计的时候就没有考虑过用来作为类的属性，如果你查看<code>Optional</code>的源代码，你会发现它没有实现<code>java.io.Serializable</code>接口，这在某些情况下是很重要的（比如你的项目中使用了某些序列化框架），使用了<code>Optional</code>作为实体类的属性，意味着他们不能被序列化。</p>
<p>下面我们通过一些例子讲解<code>Optional</code>的正确用法：</p>
<h3 id="正确创建Optional对象"><a href="#正确创建Optional对象" class="headerlink" title="正确创建Optional对象"></a>正确创建<code>Optional</code>对象</h3><p>上面提到创建<code>Optional</code>对象有三个方法，<code>empty()</code>方法比较简单，没什么特别要说明的。主要是<code>of()</code>和<code>ofNullable()</code>方法。当你很确定一个对象不可能为<code>null</code>的时候，应该使用<code>of()</code>方法，否则，尽可能使用<code>ofNullable()</code>方法，比如：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>Role role<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 当Optional的值通过常量获得或者通过关键字new初始化，可以直接使用of()方法</span>
    Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> strOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> userOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 方法参数中role值不确定是否为null，使用ofNullable()方法创建</span>
    Optional<span class="token operator">&lt;</span>Role<span class="token operator">></span> roleOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="orElse-方法的使用"><a href="#orElse-方法的使用" class="headerlink" title="orElse()方法的使用"></a><code>orElse()</code>方法的使用</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> str <span class="token operator">!=</span> null <span class="token operator">?</span> str <span class="token operator">:</span> <span class="token string">"Hello World"</span></code></pre>
<p>上面的代码表示判断字符串<code>str</code>是否为空，不为空就返回，否则，返回一个常量。使用<code>Optional</code>类可以表示为：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> strOpt<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span></code></pre>
<h3 id="简化if-else"><a href="#简化if-else" class="headerlink" title="简化if-else"></a>简化<code>if-else</code></h3><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    String userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>userName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userName<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> null<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>上面的代码可以简化成：</p>
<pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Optional<span class="token operator">&lt;</span>User<span class="token operator">></span> userOpt <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getUserName<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>总结一下，新的<code>Optional</code>类让我们可以以函数式编程的方式处理<code>null</code>值，抛弃了Java 8之前需要嵌套大量<code>if-else</code>代码块，使代码可读性有了很大的提高。</p>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 stream-实战</title>
    <url>/2019/03/06/java8-stream-drill/</url>
    <content><![CDATA[<p>Java8在日常编码中感触最深的无非就是steam和lambda表达式以及新的时间api，在此之前，集合处理一直是不太方便且性能较低，第二个是时间api不好用，一般配合joda-time这个库配合使用，下面介绍一些在Java8中常用的stream处理</p>
<h2 id="List转换成Map"><a href="#List转换成Map" class="headerlink" title="List转换成Map"></a>List转换成Map</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
  * toMap 如果集合中重复的key 可能会抛出异常 Duplicate key...
  * apply1、apply2的ID都为1 既m1,m2的ID都为1
  * 可以用(m1,m2)->m1 来设置 如果有重复的key 保留m1 舍弃m2
  */</span>
Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Model<span class="token operator">></span> modelMap <span class="token operator">=</span> modelList
                <span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Model<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span> x <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">,</span> <span class="token punctuation">(</span>m1<span class="token punctuation">,</span> m2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> m1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="groupBy以后求最大值或者最小值"><a href="#groupBy以后求最大值或者最小值" class="headerlink" title="groupBy以后求最大值或者最小值"></a>groupBy以后求最大值或者最小值</h2><p><a href="http://www.java2s.com/Tutorials/Java_Streams/Example/Group/Get_max_value_in_each_group.htm">http://www.java2s.com/Tutorials/Java_Streams/Example/Group/Get_max_value_in_each_group.htm</a></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">class</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
    String hostname<span class="token punctuation">;</span>

    String ip<span class="token punctuation">;</span>

    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    List<span class="token operator">&lt;</span>Model<span class="token operator">></span> models <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.0"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.2"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.3"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.2"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.3"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.6"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.7"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.8"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.9"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.10"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.11"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.11"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.12"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.11"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.15"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.16"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.17"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.18"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.19"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.20"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.21"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    models<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Model</span><span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.22"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Model<span class="token operator">></span> map <span class="token operator">=</span> models
    <span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>model <span class="token operator">-</span><span class="token operator">></span> model<span class="token punctuation">.</span><span class="token function">getHostname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> model<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>Model d1<span class="token punctuation">,</span> Model d2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> d1<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> d2<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> d1 <span class="token operator">:</span> d2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"map:{}"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="Scala中使用group求出最大值或者最小值"><a href="#Scala中使用group求出最大值或者最小值" class="headerlink" title="Scala中使用group求出最大值或者最小值"></a>Scala中使用group求出最大值或者最小值</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">object</span> CollectionApp <span class="token punctuation">{</span>

  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>getClass<span class="token punctuation">)</span>

    <span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>JavaConverters<span class="token punctuation">.</span>_

    <span class="token keyword">val</span> models<span class="token operator">:</span> util<span class="token punctuation">.</span>List<span class="token punctuation">[</span>Model<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">[</span>Model<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.0"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.1"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.2"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.3"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_11"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.2"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.3"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.6"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.7"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.8"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_12"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.9"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.10"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.11"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.11"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.12"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.11"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_13"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.15"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.16"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.17"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.18"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.19"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.20"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.21"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    models<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Model<span class="token punctuation">(</span><span class="token string">"vm_11_16"</span><span class="token punctuation">,</span> <span class="token string">"192.168.1.22"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">val</span> list <span class="token operator">=</span> models<span class="token punctuation">.</span>asScala

    <span class="token keyword">val</span> res <span class="token operator">=</span> list<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>x <span class="token keyword">=></span> x<span class="token punctuation">.</span>hostname <span class="token operator">+</span> x<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">=></span>
        <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>order<span class="token punctuation">)</span><span class="token punctuation">.</span>min<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span>s<span class="token string">"$res"</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">case</span> <span class="token keyword">class</span> Model<span class="token punctuation">(</span>hostname<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> ip<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> order<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span></code></pre>
<h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>iogogog<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-09.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchProcess</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> totalList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">,</span> BatchProcessListener batchProcessListener<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>totalList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>batchProcessListener <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"没有批处理监听器!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        Iterator<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> iterator <span class="token operator">=</span> totalList<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Object next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> batchSize <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token punctuation">(</span>totalList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// process</span>
                batchProcessListener<span class="token punctuation">.</span><span class="token function">onProcess</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"batchSize:{} processSize:{} "</span><span class="token punctuation">,</span> batchSize<span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BatchProcessListener</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">onProcess</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>javac编译java文件</title>
    <url>/2019/11/05/javac-compiler/</url>
    <content><![CDATA[<h1 id="javac编译java文件"><a href="#javac编译java文件" class="headerlink" title="javac编译java文件"></a>javac编译java文件</h1><p>由于最近项目需求有这样一个需求，生产上新给了一个csv文件，程序需要读取内容进行清洗，但是拿不出来看，也不可能为了这一个小测试专门打审批给生产上传一个程序包，就想到了使用javac写个简单的测试看下数据。下面先来复习一下javac这个命令</p>
<p>下面测试的所有java源文件统一保存在 <code>/Users/xxx/Downloads/compiler</code></p>
<h2 id="编译单文件"><a href="#编译单文件" class="headerlink" title="编译单文件"></a>编译单文件</h2><p>现在写一段简单的Java代码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>使用javac编译</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler pwd
/Users/xxx/Downloads/compiler # 当前路径
➜  compiler ls -lrt
total 8
-rw-r--r--@ 1 xxx  staff  119 11  5 22:11 Test1.java # 这里是源文件
➜  compiler javac Test1.java # 使用javac进行编译
➜  compiler ls -lrt
total 16
-rw-r--r--@ 1 xxx  staff  119 11  5 22:11 Test1.java
-rw-r--r--  1 xxx  staff  418 11  5 22:28 Test1.class # 编译以后的class文件
➜  compiler java Test1 # 运行结果
hello world!!!</code></pre>
<p>可以看到结果就是我们正常的一个输出 hello world</p>
<h2 id="编译两个相互依赖的Java源文件"><a href="#编译两个相互依赖的Java源文件" class="headerlink" title="编译两个相互依赖的Java源文件"></a>编译两个相互依赖的Java源文件</h2><ul>
<li>A.java</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是 class A  hello world!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>B.java</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>使用javac分别进行编译，这里注意先后顺序，先编译A.java，在编译B.java，当然，因为B中引用了A，A.java也可以不用编译，在编译B.java的时候，会自动编译A.java的，后面我们会看到</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler ls -lrt
total 24
-rw-r--r--@ 1 xxx  staff  119 11  5 22:11 Test1.java
-rw-r--r--@ 1 xxx  staff  112 11  5 22:20 B.java
-rw-r--r--@ 1 xxx  staff  113 11  5 22:21 A.java
➜  compiler javac A.java
➜  compiler javac B.java
➜  compiler ls -lrt
total 40
-rw-r--r--@ 1 xxx  staff  119 11  5 22:11 Test1.java
-rw-r--r--@ 1 xxx  staff  112 11  5 22:20 B.java
-rw-r--r--@ 1 xxx  staff  113 11  5 22:21 A.java
-rw-r--r--  1 xxx  staff  402 11  5 22:39 A.class
-rw-r--r--  1 xxx  staff  297 11  5 22:39 B.class
➜  compiler java B # 运行B这个程序
我是 class A  hello world!!!</code></pre>
<h2 id="编译带外部依赖的jar"><a href="#编译带外部依赖的jar" class="headerlink" title="编译带外部依赖的jar"></a>编译带外部依赖的jar</h2><p>这里比如我们需要使用Google的guava-27.1-jre.jar，使用其中的api读取一个文本文件的内容。</p>
<p>为了方便，将guava-27.1-jre.jar复制到当前路径，当然也可以使用绝对路径，新建文件GuavaTest.java</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler ls -lrt
total 5400
-rw-r--r--  1 xxx  staff  2746671 11  5 09:33 guava-27.1-jre.jar # 新复制的外部jar文件
-rw-r--r--@ 1 xxx  staff      119 11  5 22:11 Test1.java
-rw-r--r--@ 1 xxx  staff      112 11  5 22:20 B.java
-rw-r--r--@ 1 xxx  staff      113 11  5 22:21 A.java
-rw-r--r--@ 1 xxx  staff      663 11  5 22:54 GuavaTest.java</code></pre>
<p>GuavaTest.java内容</p>
<pre class=" language-java"><code class="language-java">
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Files<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>StandardCharsets<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xxx on 2019-11-05.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuavaTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String path <span class="token operator">=</span> <span class="token string">"/Users/xxx/Downloads/compiler/A.java"</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token comment" spellcheck="true">// 按行读取文件内容</span>
            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>然后使用javac进行编译，和预期的结果不一致，引用了guava-27.1-jre.jar中的class不存在</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler javac GuavaTest.java
GuavaTest.java:2: 错误: 程序包com.google.common.io不存在
import com.google.common.io.Files;
                           ^
GuavaTest.java:19: 错误: 找不到符号
            List<String> list = Files.readLines(new File(path), StandardCharsets.UTF_8);
                                ^
  符号:   变量 Files
  位置: 类 GuavaTest
2 个错误</code></pre>
<p>那么这个时候就不能单纯的使用<code>javac GuavaTest.java</code> 而是需要使用java -cp 指定外部依赖的jar路径，可以看到加了 -cp 参数指定外部依赖的jar以后编译成功了</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler javac -cp guava-27.1-jre.jar GuavaTest.java
➜  compiler ls -lrt
total 5408
-rw-r--r--  1 xxx  staff  2746671 11  5 09:33 guava-27.1-jre.jar
-rw-r--r--@ 1 xxx  staff      119 11  5 22:11 Test1.java
-rw-r--r--@ 1 xxx  staff      112 11  5 22:20 B.java
-rw-r--r--@ 1 xxx  staff      113 11  5 22:21 A.java
-rw-r--r--@ 1 xxx  staff      663 11  5 22:54 GuavaTest.java
-rw-r--r--  1 xxx  staff     1548 11  5 22:59 GuavaTest.class</code></pre>
<p>这个时候使用<code>java GuavaTest</code>去运行程序是否可行呢？</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler java GuavaTest
Exception in thread "main" java.lang.NoClassDefFoundError: com/google/common/io/Files
    at GuavaTest.main(GuavaTest.java:19)
Caused by: java.lang.ClassNotFoundException: com.google.common.io.Files
    at java.net.URLClassLoader.findClass(URLClassLoader.java:382)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)
    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
    ... 1 more</code></pre>
<p>答案当然是no</p>
<p>这里运行的时候，我们也需要使用 -cp 参数指定外部依赖的jar文件，但是我们发现依然报错，实际上当我们使用cp参数以后指定外部依赖jar以后，而并没有包含当前目录，就算编译成功，也是找不到主类的。</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler java -cp guava-27.1-jre.jar GuavaTest
错误: 找不到或无法加载主类 GuavaTest</code></pre>
<p>接下来我们可以把当前路径也加进去，这里特别注意的就是，和上一次的命令相比，添加了<code>:.</code>，<code>:</code> 作为分隔，<code>.</code> 表示当前路径。当然也有博客指出，在Linux下面使用<code>:</code>分隔，但是在Windows下面使用<code>;</code>分隔，因为我是Mac，没有Windows去验证，这里如果有需要就自己验证一下即可。就可以看到当前读取除了A.java文件中的内容</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler java -cp guava-27.1-jre.jar:. GuavaTest
public class A {
    public void sayHi() {
        System.out.println("我是 class A  hello world!!!");
    }
}</code></pre>
<h2 id="编译源文件中带有package的文件"><a href="#编译源文件中带有package的文件" class="headerlink" title="编译源文件中带有package的文件"></a>编译源文件中带有package的文件</h2><p>上面我们描述了编译单个文件，两个相互依赖的文件以及依赖外部文件的处理方式，如果在我们的源文件中包含package又该如何处理呢？接下来我们继续来看，首先我们给A.java和B.java分别添加上package</p>
<ul>
<li>A.java</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> compiler<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是 class A  hello world!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>B.java</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> compiler<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>接下来我们使用javac进行编译，可以看到A.java可以正常编译，但是B.java编译就出错了。这是因为，添加了package语句后，编译器需要找的是compiler.A类，编译器会首先找到compiler目录，然后再从compiler目录中找到A，此时当前目录中(compiler目录内)不存在compiler子目录，因此，编译器找不到A类，编译失败。这说明我们包含的类路径需要包括类所在的包，<strong>这里需要包含compiler目录的上一级子目录</strong>。</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler javac A.java
➜  compiler javac B.java
B.java:5: 错误: 找不到符号
        A a = new A();
        ^
  符号:   类 A
  位置: 类 B
B.java:5: 错误: 找不到符号
        A a = new A();
                  ^
  符号:   类 A
  位置: 类 B
2 个错误</code></pre>
<p>接下来我们编译的时候就需要指定compiler的上一级子目录</p>
<pre class=" language-shell"><code class="language-shell">➜  compiler ls -lrt
total 5400
-rw-r--r--  1 xxx  staff  2746671 11  5 09:33 guava-27.1-jre.jar
-rw-r--r--@ 1 xxx  staff      119 11  5 22:11 Test1.java
-rw-r--r--@ 1 xxx  staff      663 11  5 22:54 GuavaTest.java
-rw-r--r--@ 1 xxx  staff      131 11  5 23:19 B.java
-rw-r--r--@ 1 xxx  staff      131 11  5 23:19 A.java
# 注意这里使用了两个.. 表示上一级目录，因为B里面依赖了A，所有也会把A.java自动编译，A.java可以不管
➜  compiler javac -cp .. B.java
➜  compiler ls -lrt
total 5416
-rw-r--r--  1 xxx  staff  2746671 11  5 09:33 guava-27.1-jre.jar
-rw-r--r--@ 1 xxx  staff      119 11  5 22:11 Test1.java
-rw-r--r--@ 1 xxx  staff      663 11  5 22:54 GuavaTest.java
-rw-r--r--@ 1 xxx  staff      131 11  5 23:19 B.java
-rw-r--r--@ 1 xxx  staff      131 11  5 23:19 A.java
-rw-r--r--  1 xxx  staff      315 11  5 23:28 B.class
-rw-r--r--  1 xxx  staff      411 11  5 23:28 A.class
# 运行是也一样，需要.. 指定到上一级目录，并且要使用compiler.B
➜  compiler java -cp .. compiler.B
我是 class A  hello world!!! # A.java中的输出语句</code></pre>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上内容虽然平时很少用到，应用场景虽然不多，但是也是知识点的一次巩固复习，有不足的地方，欢迎指正。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins 后台进程</title>
    <url>/2019/02/13/jenkins-background-process/</url>
    <content><![CDATA[<p>配置 Jenkins Job 的时候，after <code>mvn package</code> 用命令行 <code>nohup java -jar project-1.0-SNAPSHOT.jar &gt; /dev/null 2&gt;&amp;1 &amp; </code>起一个 spring-boot 项目，死活不生效。</p>
<p>ssh 到服务器上查不到对应的进程，而直接在服务器上执行是完全 OK 的。</p>
<p>Google 一番后得知，这是 Jenkins 的特性。</p>
<blockquote>
<p>To reliably kill processes spawned by a job during a build, Jenkins contains a bit of native code to list up such processes and kill them. This is tested on several platforms and architectures, but if you find a show-stopper problem because of this, you can disable this feature by setting a Java property named “hudson.util.ProcessTree.disable” to the value “true”. This can be done as a parameter to the “java” binary when starting Jenkins:</p>
</blockquote>
<pre><code>`java -Dhudson.util.ProcessTree.disable=true -jar jenkins.war`</code></pre>
<blockquote>
<p>The ProcessTreeKiller takes advantage of the fact that by default a new process gets a copy of the environment variables of its spawning/creating process.</p>
</blockquote>
<blockquote>
<p>It sets a specific environment variable in the process executing the build job. Later, when the user requests to stop the build job’s process it gets a list of all processes running on the computer and their environment variables, and looks for the environment variable that it initially set for the build job’s process.</p>
</blockquote>
<p>具体链接请点击 <a href="https://wiki.jenkins-ci.org/display/JENKINS/ProcessTreeKiller">ProcessTreeKiller</a>。</p>
<p>大概意思是 Jenkins 是在启动 Job 的时候会给子进程设置环境变量，在结束 Job 的时候会检查进程的环境变量，如果包含 Jenkins 生成的，kill 掉。</p>
<p>解决方案：</p>
<ol>
<li>启动 Jenkins 的时候加上 <code>-Dhudson.util.ProcessTree.disable=true</code>，也就是 <code>java -Dhudson.util.ProcessTree.disable=true -jar jenkins.war</code></li>
<li>在后台进程前加上 <code>BUILD_ID=dontKillMe</code>, 也就是 <code>BUILD_ID=dontKillMe nohup java -jar project-1.0-SNAPSHOT.jar &gt; /dev/null 2&gt;&amp;1 &amp;</code></li>
</ol>
<p>除了上面两种方式，网上也有说讲nohup换成 setsid的方式，如有需要，可自行测试验证</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash日期插件支持纳秒</title>
    <url>/2020/12/18/logstash-filter-date-compile/</url>
    <content><![CDATA[<p>最近项目上遇到时间为纳秒的情况，用到logstash解析时是不支持纳秒的，这里提供一个思路就是自己修改logstash的日期插件，让他支持纳秒，具体涉及的插件是<a href="https://github.com/logstash-plugins/logstash-filter-date">logstash-filter-date</a></p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li>下载源代码</li>
<li>下载logstash</li>
<li>安装必要编译组件</li>
<li>修改源代码</li>
<li>打包编译</li>
<li>替换默认的<code>logstash-filter-date-${version}.jar</code></li>
<li>测试纳秒解析</li>
</ul>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><pre class=" language-shell"><code class="language-shell">cd ~/share/tmp

# 如果下载太慢,可以直接将代码包download下载导入开发工具或在idea中使用token登陆github账户,然后在使用idea工具clone代码会跟快一些,
# 教程地址: https://blog.csdn.net/SR02020/article/details/106882205
git clone https://github.com/logstash-plugins/logstash-filter-date.git


# 切换到最新的tag分支，目前是v3.1.9
git checkout -b v3.1.9 v3.1.9</code></pre>
<h2 id="下载logstash"><a href="#下载logstash" class="headerlink" title="下载logstash"></a>下载logstash</h2><p>因为我用到的logstash版本为<code>7.9.3</code>，所以下载的logstash也是<code>7.9.3</code>，理论上编译出来的<code>logstash-filter-date</code>是通用的</p>
<pre class=" language-shell"><code class="language-shell">cd ~/share/tmp

wget https://artifacts.elastic.co/downloads/logstash/logstash-7.9.3.tar.gz</code></pre>
<h2 id="安装编译组件"><a href="#安装编译组件" class="headerlink" title="安装编译组件"></a>安装编译组件</h2><ul>
<li><p>安装jruby</p>
<pre class=" language-shell"><code class="language-shell">https://www.ruby-lang.org/zh_cn/downloads/</code></pre>
</li>
<li><p>安装rvm</p>
<pre class=" language-shell"><code class="language-shell">https://rvm.io/</code></pre>
</li>
<li><p>安装rbenv</p>
<pre class=" language-shell"><code class="language-shell">https://ruby-china.org/wiki/rbenv-guide</code></pre>
</li>
</ul>
<h2 id="修改源代码"><a href="#修改源代码" class="headerlink" title="修改源代码"></a>修改源代码</h2><h3 id="将源代码导入idea"><a href="#将源代码导入idea" class="headerlink" title="将源代码导入idea"></a>将源代码导入idea</h3><p>源码导入idea会下载gradle组件和对应的依赖，这里需要保证网络畅通。</p>
<h3 id="添加纳秒解析"><a href="#添加纳秒解析" class="headerlink" title="添加纳秒解析"></a>添加纳秒解析</h3><p>找到<code>src/main/java/org/logstash/filters/parser</code>包位置，新建一个纳秒解析类</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</span>

<span class="token keyword">package</span> org<span class="token punctuation">.</span>logstash<span class="token punctuation">.</span>filters<span class="token punctuation">.</span>parser<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Instant<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/12/12.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnixNanosecondParser</span> <span class="token keyword">implements</span> <span class="token class-name">TimestampParser</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MAX_EPOCH_NANOSECOND <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Instant <span class="token function">parse</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Instant <span class="token function">parse</span><span class="token punctuation">(</span>Long value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Instant</span><span class="token punctuation">(</span>value <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Instant <span class="token function">parse</span><span class="token punctuation">(</span>Double value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// XXX: Should we accept a double?</span>
        <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Instant <span class="token function">parseWithTimeZone</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> String timezone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Instant <span class="token function">parse</span><span class="token punctuation">(</span>BigDecimal value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> lv <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lv <span class="token operator">></span> MAX_EPOCH_NANOSECOND<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot parse date for value larger than UNIX NS maximum seconds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Instant</span><span class="token punctuation">(</span>lv <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h5 id="在解析工厂类添加纳秒解析"><a href="#在解析工厂类添加纳秒解析" class="headerlink" title="在解析工厂类添加纳秒解析"></a>在解析工厂类添加纳秒解析</h5><p><code>org.logstash.filters.parser.TimestampParserFactory</code></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */</span>

<span class="token keyword">package</span> org<span class="token punctuation">.</span>logstash<span class="token punctuation">.</span>filters<span class="token punctuation">.</span>parser<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>time<span class="token punctuation">.</span>DateTimeZone<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimestampParserFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> DateTimeZone timezone<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ISO8601 <span class="token operator">=</span> <span class="token string">"ISO8601"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String UNIX <span class="token operator">=</span> <span class="token string">"UNIX"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String UNIX_MS <span class="token operator">=</span> <span class="token string">"UNIX_MS"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/**
     * 新增纳秒
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String UNIX_NS <span class="token operator">=</span> <span class="token string">"UNIX_NS"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TAI64N <span class="token operator">=</span> <span class="token string">"TAI64N"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*
     * zone is a String because it can be dynamic and come from the event while we parse it.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> TimestampParser <span class="token function">makeParser</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">,</span> Locale locale<span class="token punctuation">,</span> String zone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>locale <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            locale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        String tz <span class="token operator">=</span> zone<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>tz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tz <span class="token operator">=</span> DateTimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>zone<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"%{"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tz <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> ISO8601<span class="token operator">:</span> <span class="token comment" spellcheck="true">// Short-hand for a few ISO8601-ish formats</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CasualISO8601Parser</span><span class="token punctuation">(</span>tz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> UNIX<span class="token operator">:</span> <span class="token comment" spellcheck="true">// Unix epoch in seconds</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UnixEpochParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> TAI64N<span class="token operator">:</span> <span class="token comment" spellcheck="true">// TAI64N format</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TAI64NParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> UNIX_MS<span class="token operator">:</span> <span class="token comment" spellcheck="true">// Unix epoch in milliseconds</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UnixMillisEpochParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> UNIX_NS<span class="token operator">:</span> <span class="token comment" spellcheck="true">// Unix epoch in nanoseconds</span>
                <span class="token comment" spellcheck="true">// 纳秒解析类</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UnixNanosecondParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JodaParser</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> locale<span class="token punctuation">,</span> tz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> TimestampParser <span class="token function">makeParser</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">makeParser</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token punctuation">(</span>Locale<span class="token punctuation">)</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> TimestampParser <span class="token function">makeParser</span><span class="token punctuation">(</span>String pattern<span class="token punctuation">,</span> String locale<span class="token punctuation">,</span> String zone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">makeParser</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> locale <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> Locale<span class="token punctuation">.</span><span class="token function">forLanguageTag</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="注释一个单元测试"><a href="#注释一个单元测试" class="headerlink" title="注释一个单元测试"></a>注释一个单元测试</h3><p>因为该类会因为找不到方法而导致编译报错，可以注释忽略<code>org.logstash.filters.DateFilterTest#commonAssertions</code></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">commonAssertions</span><span class="token punctuation">(</span>Event event<span class="token punctuation">,</span> ParseExecutionResult code<span class="token punctuation">,</span> String expected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/*Assert.assertSame(ParseExecutionResult.SUCCESS, code);
        String actual = ((Timestamp) event.getField("[result_ts]")).toIso8601();
        Assert.assertTrue(String.format("Unequal - expected: %s, actual: %s", expected, actual), expected.equals(actual));*/</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h4><p>修改build.gradle文件中63、66两行的logstash-core配置，改为下载的标准<code>logstash/logstash-core</code>目录</p>
<pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// 默认配置</span>
testCompile <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> logstashCoreGemPath<span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">'**/*.jar'</span><span class="token punctuation">)</span>
compileOnly <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> logstashCoreGemPath<span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">'**/*.jar'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 修改为下载的logstash/logstash-core的绝对路径</span>
testCompile <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'/Users/xiaozhangge/share/software/logstash-7.9.3/logstash-core'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">'**/*.jar'</span><span class="token punctuation">)</span>
compileOnly <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string">'/Users/xiaozhangge/share/software/logstash-7.9.3/logstash-core'</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token string">'**/*.jar'</span><span class="token punctuation">)</span></code></pre>
<h4 id="Rakefile"><a href="#Rakefile" class="headerlink" title="Rakefile"></a>Rakefile</h4><p>修改Rakefile文件的lsc_path配置为<code>logstash/logstash-core</code>目录</p>
<pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// 默认配置</span>
lsc_path <span class="token operator">=</span> `bundle show logstash<span class="token operator">-</span>core`

<span class="token comment" spellcheck="true">// 修改为下载的logstash/logstash-core的绝对路径</span>
lsc_path <span class="token operator">=</span> `<span class="token string">/Users/</span>xiaozhangge<span class="token string">/share/</span>software<span class="token string">/logstash-7.9.3/</span>logstash<span class="token operator">-</span>core`</code></pre>
<h2 id="打包编译"><a href="#打包编译" class="headerlink" title="打包编译"></a>打包编译</h2><p>执行gradle的build任务，生成新的<code>logstash-date-filter-{version}.jar</code>，新生成文件目录如下：</p>
<pre class=" language-shell"><code class="language-shell"># 有个好奇的是明明是3.1.9的tag包，但是在源码里面确实3.1.6的版本，所以打包出来也是3.1.6的版本号，解压logstash发现也是该版本号，所以不用在意版本号
build/libs/logstash-filter-date-3.1.6.jar</code></pre>
<pre class=" language-shell"><code class="language-shell">19:38:39: Executing task 'build'...

:buildSrc:compileJava UP-TO-DATE
:buildSrc:compileGroovy UP-TO-DATE
:buildSrc:processResources UP-TO-DATE
:buildSrc:classes UP-TO-DATE
:buildSrc:jar UP-TO-DATE
:buildSrc:assemble UP-TO-DATE
:buildSrc:compileTestJava UP-TO-DATE
:buildSrc:compileTestGroovy UP-TO-DATE
:buildSrc:processTestResources UP-TO-DATE
:buildSrc:testClasses UP-TO-DATE
:buildSrc:test UP-TO-DATE
:buildSrc:check UP-TO-DATE
:buildSrc:build UP-TO-DATE
:distTar UP-TO-DATE
:distZip UP-TO-DATE
:compileJava
:processResources UP-TO-DATE
:classes
:jar
:assemble
:compileTestJava
:processTestResources UP-TO-DATE
:testClasses
:test
:check
:build

BUILD SUCCESSFUL

Total time: 7.276 secs
19:38:47: Task execution finished 'build'.
</code></pre>
<h2 id="替换logstash中默认的jar"><a href="#替换logstash中默认的jar" class="headerlink" title="替换logstash中默认的jar"></a>替换logstash中默认的jar</h2><h3 id="解压logstash-7-9-3-tar-gz"><a href="#解压logstash-7-9-3-tar-gz" class="headerlink" title="解压logstash-7.9.3.tar.gz"></a>解压logstash-7.9.3.tar.gz</h3><pre class=" language-shell"><code class="language-shell">cd ~/share/tmp

# 解压
tar -zxvf logstash-7.9.3.tar.gz</code></pre>
<h3 id="查找logstash-filter-date-3-1-6-jar"><a href="#查找logstash-filter-date-3-1-6-jar" class="headerlink" title="查找logstash-filter-date-3.1.6.jar"></a>查找logstash-filter-date-3.1.6.jar</h3><pre class=" language-shell"><code class="language-shell">cd logstash-7.9.3 && find . -name 'logstash-filter-date*'

# 日志
➜  logstash-7.9.3 find . -name 'logstash-filter-date*'
./vendor/bundle/jruby/2.5.0/specifications/logstash-filter-date-3.1.9.gemspec
./vendor/bundle/jruby/2.5.0/gems/logstash-filter-date-3.1.9
./vendor/bundle/jruby/2.5.0/gems/logstash-filter-date-3.1.9/logstash-filter-date.gemspec
./vendor/bundle/jruby/2.5.0/gems/logstash-filter-date-3.1.9/lib/logstash-filter-date_jars.rb
./vendor/bundle/jruby/2.5.0/gems/logstash-filter-date-3.1.9/vendor/jar-dependencies/org/logstash/filters/logstash-filter-date
./vendor/bundle/jruby/2.5.0/gems/logstash-filter-date-3.1.9/vendor/jar-dependencies/org/logstash/filters/logstash-filter-date/3.1.6/logstash-filter-date-3.1.6.jar</code></pre>
<p>可以看到原先的jar在<code>./vendor/bundle/jruby/2.5.0/gems/logstash-filter-date-3.1.9/vendor/jar-dependencies/org/logstash/filters/logstash-filter-date/3.1.6/</code>这个目录下面，我们只需要用修改过的jar替换掉就可以了。</p>
<h2 id="测试纳秒解析"><a href="#测试纳秒解析" class="headerlink" title="测试纳秒解析"></a>测试纳秒解析</h2><p>为了方便测试，我们将<a href="https://xiaomozhang.github.io/2020/12/09/lsboot/">上一篇文章</a>的启动脚本复制过来，并且新建一个配置文件<code>conf/test.conf</code></p>
<pre class=" language-shell"><code class="language-shell">➜  logstash-7.9.3 ll
total 1280
-rw-r--r--   1 xiaozhangge  staff   2.2K 10 16 20:23 CONTRIBUTORS
-rw-r--r--   1 xiaozhangge  staff   3.9K 10 16 20:24 Gemfile
-rw-r--r--   1 xiaozhangge  staff    22K 10 16 20:25 Gemfile.lock
-rw-r--r--   1 xiaozhangge  staff    13K 10 16 20:23 LICENSE.txt
-rw-r--r--   1 xiaozhangge  staff   587K 10 16 20:23 NOTICE.TXT
drwxr-xr-x  22 xiaozhangge  staff   704B 10 16 21:35 bin
drwxr-xr-x   3 xiaozhangge  staff    96B 12 18 20:00 conf
drwxr-xr-x   8 xiaozhangge  staff   256B 10 16 21:35 config
drwxr-xr-x   2 xiaozhangge  staff    64B 10 16 20:23 data
drwxr-xr-x   6 xiaozhangge  staff   192B 10 16 21:35 lib
drwxr-xr-x   6 xiaozhangge  staff   192B 10 16 21:35 logstash-core
drwxr-xr-x   5 xiaozhangge  staff   160B 10 16 21:35 logstash-core-plugin-api
-rwxr-xr-x@  1 xiaozhangge  staff   1.3K 12 18 20:00 lsboot
drwxr-xr-x   5 xiaozhangge  staff   160B 10 16 21:35 modules
drwxr-xr-x   3 xiaozhangge  staff    96B 10 16 21:35 tools
drwxr-xr-x   4 xiaozhangge  staff   128B 10 16 21:35 vendor
drwxr-xr-x  14 xiaozhangge  staff   448B 10 16 21:35 x-pack</code></pre>
<h3 id="编写测试配置conf-test-conf"><a href="#编写测试配置conf-test-conf" class="headerlink" title="编写测试配置conf/test.conf"></a>编写测试配置conf/test.conf</h3><pre class=" language-shell"><code class="language-shell">input {
     stdin { 
         codec => "json"
     } 
}

filter {
    mutate {
        add_field => { "name" => "哈哈哈" }
    }

    # https://zerlong.com/886.html
    ruby { code => 'event.set("unix_ts",(event.get("@timestamp").to_f.round(3)*1000).to_i)' }

    date {
            # 注意这里的UNIX_NS就是我们在TimestampParserFactory新建的纳秒解析器，官方版本是不支持的
        match => ["unix_ns", "UNIX_NS"]
        target => "date_ns"
    }
}

output { 
    stdout {} 
}</code></pre>
<h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"unix_ns"</span><span class="token operator">:</span> <span class="token number">1607206093000000</span><span class="token punctuation">,</span> <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token string">"test"</span> <span class="token punctuation">}</span></code></pre>
<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><pre class=" language-shell"><code class="language-shell">➜  logstash-7.9.3 ./lsboot conf/test.conf test
bin/logstash -f conf/test.conf -l logs/test --path.data data/test -n test
Sending Logstash logs to logs/test which is now configured via log4j2.properties
[2020-12-18T20:13:19,801][INFO ][logstash.runner          ] Starting Logstash {"logstash.version"=>"7.9.3", "jruby.version"=>"jruby 9.2.13.0 (2.5.7) 2020-08-03 9a89c94bcc Java HotSpot(TM) 64-Bit Server VM 25.201-b09 on 1.8.0_201-b09 +indy +jit [darwin-x86_64]"}
[2020-12-18T20:13:19,932][INFO ][logstash.setting.writabledirectory] Creating directory {:setting=>"path.queue", :path=>"data/test/queue"}
[2020-12-18T20:13:19,935][INFO ][logstash.setting.writabledirectory] Creating directory {:setting=>"path.dead_letter_queue", :path=>"data/test/dead_letter_queue"}
[2020-12-18T20:13:20,029][WARN ][logstash.config.source.multilocal] Ignoring the 'pipelines.yml' file because modules or command line options are specified
[2020-12-18T20:13:20,061][INFO ][logstash.agent           ] No persistent UUID file found. Generating new UUID {:uuid=>"e4188c10-0621-4967-a957-8aa14f1a2945", :path=>"data/test/uuid"}
[2020-12-18T20:13:21,802][INFO ][org.reflections.Reflections] Reflections took 33 ms to scan 1 urls, producing 22 keys and 45 values
[2020-12-18T20:13:23,160][INFO ][logstash.javapipeline    ][main] Starting pipeline {:pipeline_id=>"main", "pipeline.workers"=>8, "pipeline.batch.size"=>125, "pipeline.batch.delay"=>50, "pipeline.max_inflight"=>1000, "pipeline.sources"=>["/Users/xiaozhangge/share/tmp/logstash-7.9.3/conf/test.conf"], :thread=>"#<Thread:0x49b901aa run>"}
[2020-12-18T20:13:23,871][INFO ][logstash.javapipeline    ][main] Pipeline Java execution initialization time {"seconds"=>0.7}
[2020-12-18T20:13:23,922][INFO ][logstash.inputs.stdin    ][main] Automatically switching from json to json_lines codec {:plugin=>"stdin"}
[2020-12-18T20:13:23,962][INFO ][logstash.javapipeline    ][main] Pipeline started {"pipeline.id"=>"main"}
The stdin plugin is now waiting for input:
[2020-12-18T20:13:24,041][INFO ][logstash.agent           ] Pipelines running {:count=>1, :running_pipelines=>[:main], :non_running_pipelines=>[]}
[2020-12-18T20:13:24,244][INFO ][logstash.agent           ] Successfully started Logstash API endpoint {:port=>9600}
{ "unix_ns": 1607206093000000, "tags": "test" }
{
       "unix_ts" => 1608293606313,
       "date_ns" => 2020-12-05T22:08:13.000Z,
    "@timestamp" => 2020-12-18T12:13:26.313Z,
          "tags" => "test",
       "unix_ns" => 1607206093000000,
          "host" => "TaoZeng.MBP",
      "@version" => "1",
          "name" => "哈哈哈"
}</code></pre>
<p>以上，<code>1607206093000000</code>纳秒时间戳已经支持转换成<code>date</code>类型的数据，但是转换的结果却还有时区显示的问题，这里有两个方案</p>
<ul>
<li>第一是在target的时候指定时区；</li>
<li>第二是修改logstash源码，把时区默认修改为东八区，这个我们下一次说怎么修改。</li>
</ul>
<p><a href="https://www.zybuluo.com/StrGlee/note/1179723">logstash 时间戳时区问题</a></p>
<p>以上，就是logstash-filter-date插件添加纳秒支持并且替换，编译好的<a href="https://gitee.com/iogogogo/iogogogo/raw/master/files/logstash-filter-date-3.1.6.jar">logstash-filter-date-3.1.6.jar</a></p>
]]></content>
      <tags>
        <tag>logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>logstash 启动脚本</title>
    <url>/2020/12/09/lsboot/</url>
    <content><![CDATA[<ul>
<li>logstash 通用启动脚本</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token comment" spellcheck="true"># FileName: lsboot</span>
<span class="token comment" spellcheck="true"># Description: 启动logstash实例</span>
<span class="token comment" spellcheck="true"># Dispatcher:</span>
<span class="token comment" spellcheck="true"># Description: Usage: lsboot xxx.conf</span>
<span class="token comment" spellcheck="true"># CreateDate: 2020-12-06</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -lt 1 ];then</span>
    <span class="token keyword">echo</span> -e <span class="token string">"  \e[033m Usage: <span class="token variable">$0</span> [FileName: e.g.: xxx.conf OR path/xxx.conf] \e[0m"</span>
    <span class="token keyword">exit</span> 1
<span class="token keyword">fi</span>

<span class="token comment" spellcheck="true">#config file OR path</span>
conFile<span class="token operator">=</span><span class="token variable">$1</span>
conFilePath<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cd</span> `dirname $conFile`<span class="token punctuation">;</span><span class="token function">pwd</span><span class="token variable">)</span></span>
appName<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $<span class="token punctuation">{</span>conFile<span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">sed</span> s/.conf.*//<span class="token variable">)</span></span>
currPath<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cd</span> `dirname $0`<span class="token punctuation">;</span><span class="token function">pwd</span><span class="token variable">)</span></span>

LS_HOME<span class="token operator">=</span><span class="token variable">${LS_HOME:-$currPath}</span>
<span class="token function">cd</span> <span class="token variable">$LS_HOME</span>

check_pid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  pids<span class="token operator">=</span>`ps -ef <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">grep</span> -w <span class="token string">"\-f <span class="token variable">${conFile}</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span>`
  <span class="token comment" spellcheck="true">#echo "PID : ${pids}"</span>
<span class="token punctuation">}</span>

<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token operator">==</span> <span class="token string">"test"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> appName<span class="token operator">=</span>test <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf data/test <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf logs/test

<span class="token comment" spellcheck="true">#./stop.sh</span>

<span class="token comment" spellcheck="true">#sleep 1</span>

check_pid
cmd<span class="token operator">=</span><span class="token string">"bin/logstash -f <span class="token variable">${conFile}</span> -l logs/<span class="token variable">${appName}</span> --path.data data/<span class="token variable">${appName}</span> -n <span class="token variable">${appName}</span>"</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pids</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
  <span class="token keyword">echo</span> <span class="token string">" APP <span class="token variable">$appName</span> was running on :"</span>
  <span class="token keyword">echo</span> -e <span class="token string">"    \e[032m 【 <span class="token variable"><span class="token variable">`</span>pwdx $pids<span class="token variable">`</span></span> 】\e[0m"</span>
  <span class="token keyword">echo</span> <span class="token string">" If restart, kill <span class="token variable">$pids</span> first."</span>
  <span class="token keyword">exit</span> 0
<span class="token keyword">else</span>
  <span class="token function">cd</span> <span class="token variable">$LS_HOME</span>
  <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$cmd</span>"</span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${appName}</span> <span class="token operator">==</span> <span class="token string">"test"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>
    <span class="token variable">$cmd</span>
  <span class="token keyword">else</span>
    <span class="token function">eval</span> <span class="token variable">$cmd</span> <span class="token operator">&amp;</span>
    <span class="token function">sleep</span> 1
    check_pid
    <span class="token punctuation">[</span><span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">${pids}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">echo</span> -e <span class="token string">"\e[032m success \e[0m: <span class="token variable">$appName</span> boot on: <span class="token variable">$pids</span>"</span> <span class="token operator">||</span> <span class="token keyword">echo</span> -e <span class="token string">"  \e[31m [ <span class="token variable">$appName</span> : <span class="token variable">$conFile</span> ] Boot Failed. \e[0m "</span>
  <span class="token keyword">fi</span>
<span class="token keyword">fi</span>

<span class="token comment" spellcheck="true">#sleep 1</span>

<span class="token comment" spellcheck="true">#ps -ef | grep -v grep | grep -w "${conFile}" | awk '{print $2"\t"$NF}' </span>

<span class="token keyword">exit</span> 0
</code></pre>
<ul>
<li>logstash将时间转换成unix时间戳</li>
</ul>
<pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># https://zerlong.com/886.html</span>
ruby <span class="token punctuation">{</span> code <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'event.set("unix_ts",(event.get("@timestamp").to_f.round(3)*1000).to_i)'</span> <span class="token punctuation">}</span></code></pre>
]]></content>
      <tags>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka常用操作笔记</title>
    <url>/2018/07/30/kafka-note/</url>
    <content><![CDATA[<h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//kafka.apache.org/downloads</code></pre>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><blockquote>
<p>解压下载文件到指定目录，比如 /usr/local</p>
<p>tar -zxvf /usr/local/kafka_2.12-1.0.0.tgz</p>
</blockquote>
<h2 id="停止zookeeper与kafka"><a href="#停止zookeeper与kafka" class="headerlink" title="停止zookeeper与kafka"></a>停止zookeeper与kafka</h2><pre class=" language-shell"><code class="language-shell">cd /usr/local
./bin/zookeeper-server-stop.sh
./bin/kafka-server-stop.sh</code></pre>
<h2 id="启动-zookeeper"><a href="#启动-zookeeper" class="headerlink" title="启动 zookeeper"></a>启动 zookeeper</h2><pre class=" language-shell"><code class="language-shell">cd /usr/local
./bin/zookeeper-server-start.sh -daemon  ./config/zookeeper.properties</code></pre>
<blockquote>
<p>-daemon 表示后台运行</p>
</blockquote>
<h2 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h2><pre class=" language-shell"><code class="language-shell">cd /usr/local
./bin/kafka-server-start.sh -daemon  ./config/server.properties</code></pre>
<h2 id="查看kafka与zookeeper是否运行"><a href="#查看kafka与zookeeper是否运行" class="headerlink" title="查看kafka与zookeeper是否运行"></a>查看kafka与zookeeper是否运行</h2><pre><code>netstat -ntpul | grep 2181
netstat -ntpul | grep 9092</code></pre>
<h2 id="创建-topic"><a href="#创建-topic" class="headerlink" title="创建 topic"></a>创建 topic</h2><pre class=" language-shell"><code class="language-shell">./bin/kafka-topics.sh --create --zookeeper 192.168.1.200:2181 --replication-factor 1 --partitions 1 --topic TOPIC_001</code></pre>
<h2 id="删除topic"><a href="#删除topic" class="headerlink" title="删除topic"></a>删除topic</h2><blockquote>
<p><a href="http://blog.csdn.net/fengzheku/article/details/50585972">http://blog.csdn.net/fengzheku/article/details/50585972</a></p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">./bin/kafka-topics.sh  --delete --zookeeper 192.168.1.200:2181  --topic TOPIC_001</code></pre>
<h2 id="查看已经存在的topic"><a href="#查看已经存在的topic" class="headerlink" title="查看已经存在的topic"></a>查看已经存在的topic</h2><pre class=" language-shell"><code class="language-shell">./bin/kafka-topics.sh --list --zookeeper localhost:2181</code></pre>
<h2 id="查看topic的详细信息"><a href="#查看topic的详细信息" class="headerlink" title="查看topic的详细信息"></a>查看topic的详细信息</h2><pre class=" language-shell"><code class="language-shell">./bin/kafka-topics.sh --describe --zookeeper 192.168.1.200:2181 --topic TOPIC_001</code></pre>
<h2 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h2><pre class=" language-shell"><code class="language-shell">./bin/kafka-console-producer.sh --broker-list 192.168.1.200:9092 --topic TOPIC_001</code></pre>
<h2 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h2><pre class=" language-shell"><code class="language-shell">./bin/kafka-console-consumer.sh --bootstrap-server 192.168.1.200:9092 --topic TOPIC_001 --from-beginning</code></pre>
<h2 id="解决kafka无法收发消息"><a href="#解决kafka无法收发消息" class="headerlink" title="解决kafka无法收发消息"></a>解决kafka无法收发消息</h2><blockquote>
<p>org.apache.kafka.common.errors.TimeoutException</p>
</blockquote>
<p><a href="https://www.jianshu.com/p/2db7abddb9e6">https://www.jianshu.com/p/2db7abddb9e6</a></p>
<pre class=" language-shell"><code class="language-shell">vim /usr/local/kafka/config/server.properties

加入以下配置然后重启zookeeper与kafka
advertised.host.name=192.168.1.200
advertised.port=9092</code></pre>
]]></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 修改MySQL编码集</title>
    <url>/2019/03/09/mac-change-character-set/</url>
    <content><![CDATA[<p>前两天因为Cisco的VPN坏了，一直用不了，所以重新还原了Mac，重新安装了所有的软件，其中就有MySQL-5.7.25。之前安装以后也是第一时间设置了MySQL的编码为utf8，这次新安装也再次记录一下修改步骤</p>
<h2 id="查看Mac-安装MySQL以后的默认编码"><a href="#查看Mac-安装MySQL以后的默认编码" class="headerlink" title="查看Mac 安装MySQL以后的默认编码"></a>查看Mac 安装MySQL以后的默认编码</h2><pre class=" language-shell"><code class="language-shell">SHOW VARIABLES LIKE 'character_set_%';

# 结果
character_set_client    utf8mb4
character_set_connection    utf8mb4
character_set_database    latin1 ## 这里是默认编码
character_set_filesystem    binary
character_set_results    utf8mb4
character_set_server    latin1  ## 这里是默认编码
character_set_system    utf8
character_sets_dir    /usr/local/mysql-5.7.25-macos10.14-x86_64/share/charsets/</code></pre>
<h2 id="新建my-cnf文件"><a href="#新建my-cnf文件" class="headerlink" title="新建my.cnf文件"></a>新建my.cnf文件</h2><pre class=" language-shell"><code class="language-shell">[client]
default-character-set=utf8

[mysqld]
collation-server = utf8_unicode_ci
init-connect='SET NAMES utf8'
character-set-server = utf8

[mysql]
default-character-set=utf8</code></pre>
<h2 id="移动到-etc-目录"><a href="#移动到-etc-目录" class="headerlink" title="移动到 /etc 目录"></a>移动到 /etc 目录</h2><p>移动my.cnf文件到/etc目录，需要root权限</p>
<pre class=" language-shell"><code class="language-shell">sudo mv my.cnf /etc/</code></pre>
<h2 id="重启MySQL，再次查看编码"><a href="#重启MySQL，再次查看编码" class="headerlink" title="重启MySQL，再次查看编码"></a>重启MySQL，再次查看编码</h2><pre class=" language-shell"><code class="language-shell">SHOW VARIABLES LIKE 'character_set_%';

# 结果
character_set_client    utf8mb4
character_set_connection    utf8mb4
character_set_database    utf8 ## 这里是修改以后的
character_set_filesystem    binary
character_set_results    utf8mb4
character_set_server    utf8 ## 这里是修改以后的
character_set_system    utf8
character_sets_dir    /usr/local/mysql-5.7.25-macos10.14-x86_64/share/charsets/</code></pre>
]]></content>
      <categories>
        <category>MacBook</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mac使用parallels安装配置centos7</title>
    <url>/2018/08/10/mac-install-parallel-centos7/</url>
    <content><![CDATA[<h3 id="安装parallels"><a href="#安装parallels" class="headerlink" title="安装parallels"></a>安装parallels</h3><p><a href="https://www.jianshu.com/p/76f38e6c0792">https://www.jianshu.com/p/76f38e6c0792</a></p>
<h3 id="配置-ssh-登录"><a href="#配置-ssh-登录" class="headerlink" title="配置 ssh 登录"></a>配置 ssh 登录</h3><blockquote>
<ol>
<li>查看宿主机ip和网关</li>
<li>修改网卡配置文件</li>
<li>配置外网dns</li>
<li>保存重启网络</li>
<li>ssh 连接 配置</li>
</ol>
</blockquote>
<h3 id="查看宿主机IP和网关"><a href="#查看宿主机IP和网关" class="headerlink" title="查看宿主机IP和网关"></a>查看宿主机IP和网关</h3><p>ifconfig</p>
<h3 id="修改网卡配置文件和NDS"><a href="#修改网卡配置文件和NDS" class="headerlink" title="修改网卡配置文件和NDS"></a>修改网卡配置文件和NDS</h3><blockquote>
<p>vi /etc/sysconfig/network-scripts/ifcfg-eth0</p>
</blockquote>
<pre><code>BOOTPROTO=static # 网卡获取IP的方式(默认为dchp,设置为静态获取。
IPADDR=192.168.1.254 # 除最后部分其他与宿主机的网关一致
GATEWAY=192.168.1.1 # 与宿主机保持一致
NETMASK=255.255.255.0
ONBOOT=yes
DNS1=192.168.1.1
DNS2=8.8.8.8</code></pre>
<h3 id="保存重启网络"><a href="#保存重启网络" class="headerlink" title="保存重启网络"></a>保存重启网络</h3><pre><code>service network restart</code></pre>
<h3 id="ssh-连接-配置"><a href="#ssh-连接-配置" class="headerlink" title="ssh 连接 配置"></a>ssh 连接 配置</h3><pre><code>ssh root@192.168.1.254</code></pre>
<h3 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h3><ul>
<li>永久的开放需要的端口</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加开放端口</span>
<span class="token function">sudo</span> firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>3000/tcp --permanent
<span class="token comment" spellcheck="true"># 关闭开放端口</span>
<span class="token function">sudo</span> firewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span>80/tcp --permanent
<span class="token comment" spellcheck="true"># 重新加载</span>
<span class="token function">sudo</span> firewall-cmd --reload</code></pre>
<ul>
<li>之后检查新的防火墙规则</li>
</ul>
<pre class=" language-bash"><code class="language-bash">firewall-cmd --list-all</code></pre>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><pre class=" language-bash"><code class="language-bash">//临时关闭防火墙,重启后会重新自动打开
systemctl restart firewalld
//检查防火墙状态
firewall-cmd --state
firewall-cmd --list-all
//Disable firewall
systemctl disable firewalld
systemctl stop firewalld
systemctl status firewalld
//Enable firewall
systemctl <span class="token function">enable</span> firewalld
systemctl start firewalld
systemctl status firewalld</code></pre>
]]></content>
      <categories>
        <category>MacBook</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Map对key或者value进行排序</title>
    <url>/2020/07/25/map-sort/</url>
    <content><![CDATA[<p>开发中偶尔会遇到一些比较特殊的需求，比如对一个map进行排序，并且是对key或者value进行排序，那么我们可以用Java8中提供的<code>stream</code>来进行实现</p>
<h2 id="排序工具类"><a href="#排序工具类" class="headerlink" title="排序工具类"></a>排序工具类</h2><p>封装排序工具类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Lists<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Maps<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/5/25.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapSortUtils</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * Sort by key map.
     *
     * @param &lt;K> the type parameter
     * @param &lt;V> the type parameter
     * @param map the map
     * @return the map
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span><span class="token punctuation">,</span> V<span class="token operator">></span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">sortByKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 这里使用了guava简化了map对象的创建，没有guava直接使用 new LinkedHashMap&lt;>();</span>
        Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> result <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newLinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">.</span><span class="token function">comparingByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEachOrdered</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Sort reversed by key map.
     *
     * @param &lt;K> the type parameter
     * @param &lt;V> the type parameter
     * @param map the map
     * @return the map
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> K<span class="token operator">></span><span class="token punctuation">,</span> V<span class="token operator">></span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">sortReversedByKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> result <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newLinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">.</span>&lt;K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token function">comparingByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEachOrdered</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Sort by value map.
     *
     * @param &lt;K> the type parameter
     * @param &lt;V> the type parameter
     * @param map the map
     * @return the map
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token operator">>></span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">sortByValue</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> result <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newLinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">.</span><span class="token function">comparingByValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEachOrdered</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Sort reversed by value map.
     *
     * @param &lt;K> the type parameter
     * @param &lt;V> the type parameter
     * @param map the map
     * @return the map
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token operator">>></span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">sortReversedByValue</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> result <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newLinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">.</span>&lt;K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token function">comparingByValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEachOrdered</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Gets first key.
     *
     * @param &lt;K> the type parameter
     * @param map the map
     * @return the first key
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token operator">></span> K <span class="token function">getFirstKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Gets last key.
     *
     * @param &lt;K> the type parameter
     * @param map the map
     * @return the last key
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token operator">></span> K <span class="token function">getLastKey</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Iterator<span class="token operator">&lt;</span>K<span class="token operator">></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LinkedList<span class="token operator">&lt;</span>K<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Gets first.
     *
     * @param &lt;K> the type parameter
     * @param &lt;V> the type parameter
     * @param map the map
     * @return the first
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">getFirst</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Gets last.
     * &lt;p>
     * 通过反射获取LinkedHashMap中的末尾元素：
     * &lt;p>
     * 时间复杂度O(1)，访问tail属性
     *
     * @param &lt;K> the type parameter
     * @param &lt;V> the type parameter
     * @param map the map
     * @return the last
     * @throws IllegalAccessException the illegal access exception
     * @throws NoSuchFieldException   the no such field exception
     */</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">getLast</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>
        Field tail <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tail<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">)</span> tail<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>tests<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>MapSortUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Maps<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Assert<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Before<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/7/25.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapSortTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> DEF_DATA <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DEF_DATA<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DEF_DATA<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DEF_DATA<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"z"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DEF_DATA<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testKeySort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 按照key进行正序排序</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> sortByKey <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">sortByKey</span><span class="token punctuation">(</span>DEF_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 获取map中的第一个key</span>
        String firstKey <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">getFirstKey</span><span class="token punctuation">(</span>sortByKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取map中的最后一个key</span>
        String lastKey <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">getLastKey</span><span class="token punctuation">(</span>sortByKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>lastKey<span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 按照key对map进行倒序排序</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> reversedByKey <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">sortReversedByKey</span><span class="token punctuation">(</span>DEF_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        firstKey <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">getFirstKey</span><span class="token punctuation">(</span>reversedByKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        lastKey <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">getLastKey</span><span class="token punctuation">(</span>reversedByKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>firstKey<span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>lastKey<span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 按照value进行正序排序</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> sortByValue <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">sortByValue</span><span class="token punctuation">(</span>DEF_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> first <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span>sortByValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> last <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span>sortByValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> first<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> last<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 按照value进行倒序排序</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> reversedByValue <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">sortReversedByValue</span><span class="token punctuation">(</span>DEF_DATA<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 获取排序以后的第一个个最后一个元素</span>
        first <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span>reversedByValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        last <span class="token operator">=</span> MapSortUtils<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span>reversedByValue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> first<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> last<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>map</tag>
      </tags>
  </entry>
  <entry>
    <title>maven归档插件assembly介绍</title>
    <url>/2020/01/02/maven-assembly/</url>
    <content><![CDATA[<p>2020年的第一篇文章，祝大家新年快乐！</p>
<p>assembly插件主要用于对打包以后的文件进行归档处理，比如项目中的jar，配置文件，脚本…. 打包需要归档到一起时，就可以使用maven-assembly-plugin。assembly使用很简单，第一是需要添加对应的maven插件，第二就是添加assembly需要归档的描述文件</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>这里用之前的一个介绍的maven多模块项目配置来进行配置</p>
<pre class=" language-shell"><code class="language-shell">➜  personal-life-multi-module git:(master) ✗ tree
.
├── HELP.md
├── life-multi-module.iml
├── multi-api
│&nbsp;&nbsp; ├── multi-api.iml
│&nbsp;&nbsp; ├── pom.xml
│&nbsp;&nbsp; └── src
│&nbsp;&nbsp;     ├── assembly
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── assembly-descriptor.xml
│&nbsp;&nbsp;     ├── main
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── java
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp; └── com
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;     └── xiaozhangge
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;         └── MainApplication.java
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── java-templates
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp; └── com
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;     └── xiaozhangge
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;         └── Version.java
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── resources
│&nbsp;&nbsp;     │&nbsp;&nbsp;     └── git.properties
│&nbsp;&nbsp;     └── test
│&nbsp;&nbsp;         └── java
├── multi-common
│&nbsp;&nbsp; ├── multi-common.iml
│&nbsp;&nbsp; ├── pom.xml
│&nbsp;&nbsp; └── src
│&nbsp;&nbsp;     ├── main
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── java
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp; └── com
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;     └── xiaozhangge
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;         └── common
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;             ├── CommonApplication.java
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;             └── util
│&nbsp;&nbsp;     │&nbsp;&nbsp; │&nbsp;&nbsp;                 └── IdHelper.java
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── resources
│&nbsp;&nbsp;     └── test
│&nbsp;&nbsp;         └── java
├── mvnw
├── mvnw.cmd
└── pom.xml</code></pre>
<h2 id="添加maven配置"><a href="#添加maven配置" class="headerlink" title="添加maven配置"></a>添加maven配置</h2><p>如果是在多模块项目下，该配置放在对应模块下，不要放在parent pom.xml中，示例放在<code>./multi-api/pom.xml</code></p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 在package任务以后执行 --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- 生产压缩包名称 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>${project.artifactId}-${project.version}-${timestamp}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appendAssemblyId</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appendAssemblyId</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- assembly配置描述文件 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptors</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptor</span><span class="token punctuation">></span></span>src/assembly/assembly-descriptor.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptor</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptors</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre>
<h2 id="assembly配置描述文件"><a href="#assembly配置描述文件" class="headerlink" title="assembly配置描述文件"></a>assembly配置描述文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assembly</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2
          http://maven.apache.org/xsd/assembly-1.1.2.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>formats</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>format</span><span class="token punctuation">></span></span>tar.gz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>format</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>format</span><span class="token punctuation">></span></span>zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>format</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>formats</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includeBaseDirectory</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includeBaseDirectory</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileSets</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileSet</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>../docs/bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>multi-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileMode</span><span class="token punctuation">></span></span>0755<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileMode</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>*.sh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileSet</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileSet</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>../docs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>multi-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>db/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>db/*/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileSet</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileSet</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>target<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>multi-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>*.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>lib/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileSet</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileSet</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>multi-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>logback-spring.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>application.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileSet</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileSet</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>../<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>multi-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>*.MD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileSet</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileSets</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>assembly</span><span class="token punctuation">></span></span></code></pre>
<h3 id="配置描述文件介绍"><a href="#配置描述文件介绍" class="headerlink" title="配置描述文件介绍"></a>配置描述文件介绍</h3><ul>
<li>id</li>
</ul>
<p>id 标识符，添加到生成文件名称的后缀符。如果指定 id 的话，目标文件则是 ${artifactId}-${id}.tar.gz</p>
<ul>
<li>formats</li>
</ul>
<p>maven-assembly-plugin 支持的打包格式有zip、tar、tar.gz (or tgz)、tar.bz2 (or tbz2)、jar、dir、war，可以同时指定多个打包格式</p>
<ul>
<li>includeBaseDirectory</li>
</ul>
<p>解压时是否讲当前压缩包名称作为文件夹名称</p>
<ul>
<li>fileSets</li>
</ul>
<p>管理一组文件的存放位置，核心元素如下表所示。</p>
<table>
<thead>
<tr>
<th><strong>元素</strong></th>
<th><strong>类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>directory</td>
<td>string</td>
<td>指定从哪个目录进行获取文件进行归档</td>
</tr>
<tr>
<td>outputDirectory</td>
<td>string</td>
<td>指定文件集合的输出目录，该目录是相对于根目录</td>
</tr>
<tr>
<td>fileMode</td>
<td>String</td>
<td>指定文件属性，使用八进制表达，分别为(User)(Group)(Other)所属属性，默认为 0644</td>
</tr>
<tr>
<td>includes/include*</td>
<td></td>
<td>包含文件</td>
</tr>
<tr>
<td>excludes/exclude*</td>
<td></td>
<td>排除文件</td>
</tr>
</tbody></table>
<br>

<p>完整代码：<a href="https://github.com/xiaomozhang/personal-life-multi-module">https://github.com/xiaomozhang/personal-life-multi-module</a></p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven加载本地jar文件</title>
    <url>/2020/02/28/maven-install-local-jar/</url>
    <content><![CDATA[<p>日常开发中都是maven加载在远程仓库的jar文件，如果远程仓库没有相应的jar文件，一般做法就是自己传到一个特定的nexus服务器上，但是本地开发测试的时候可能nexus服务器不太方便，那么我们可以使用maven加载本地的jar文件</p>
<pre class=" language-shell"><code class="language-shell">mvn install:install-file -Dfile=vertica-jdbc-9.2.0.jar -DgroupId=com.vertica -DartifactId=vertica-jdbc -Dversion=9.2.0 -Dpackaging=jar</code></pre>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>-Dfile</li>
</ul>
<p>指定本地jar文件的路径</p>
<ul>
<li>-DgroupId</li>
</ul>
<p>指定本地jar的groupId</p>
<ul>
<li><p>-DartifactId</p>
<p>指定本地jar的artifactId</p>
</li>
<li><p>-Dversion</p>
</li>
</ul>
<p>指定本地jar的version</p>
<ul>
<li>-Dpackaging</li>
</ul>
<p>指定本地jar的packaging，这里使用的是<code>jar</code>，表示是一个jar文件</p>
<h3 id="pom中使用"><a href="#pom中使用" class="headerlink" title="pom中使用"></a>pom中使用</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.vertica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>vertica-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>9.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven.test.skip和skipTests的区别</title>
    <url>/2020/08/20/maven-skip-test/</url>
    <content><![CDATA[<h2 id="DskipTests"><a href="#DskipTests" class="headerlink" title="-DskipTests"></a>-DskipTests</h2><p>不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。</p>
<ul>
<li><code>pom</code>中配置跳过</li>
</ul>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skipTests</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skipTests</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span> </code></pre>
<h2 id="Dmaven-test-skip-true"><a href="#Dmaven-test-skip-true" class="headerlink" title="-Dmaven.test.skip=true"></a>-Dmaven.test.skip=true</h2><p>不执行测试用例，也不编译测试用例类，不但跳过单元测试的运行，也跳过测试代码的编译。</p>
<ul>
<li><code>pom</code>中配置跳过</li>
</ul>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>skip</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>skip</span><span class="token punctuation">></span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span> </code></pre>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis对象中属性 包含List&lt;String&gt;一对多映射处理方式</title>
    <url>/2020/07/19/mybatis-one-collection-basic-type/</url>
    <content><![CDATA[<p>在使用MyBatis查询数据库时，经常会有一对多的情况，那么在一对多的情况时，如果是一个<code>Collection&lt;String&gt;</code>或者<code>Collection&lt;Integer&gt;</code>  类型，那么我们的<code>ResultMap</code>该如何定义？</p>
<p>方法很简单，这时候我们就需要使用到构造函数注入了，通过Integer和String的构造函数注入，具体的字段名称自己对好入座即可。</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 对号入座数据库column名称即可 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authorities<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>permission<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 对号入座数据库column名称即可 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 常用语句</title>
    <url>/2019/03/14/mysql-note-01/</url>
    <content><![CDATA[<h1 id="MySQL-常用语句"><a href="#MySQL-常用语句" class="headerlink" title="MySQL 常用语句"></a>MySQL 常用语句</h1><p><a href="http://www.powerxing.com/sql-join/">sql-join</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAwOTE3NDY5OA==&amp;mid=2647906520&amp;idx=2&amp;sn=e1da610a41a0692721d3756f9e1583bb&amp;chksm=8344d31db4335a0bf5164b6c57c7e49f6a89f0538d778b156450bbaceba55e6a47abcebf2dd1&amp;mpshare=1&amp;scene=1&amp;srcid=0128OHhJN5V4SPLdlN1uN4lb#rd">mysql常用sql语句总结</a></p>
<h2 id="修改替换字段中的某一个值"><a href="#修改替换字段中的某一个值" class="headerlink" title="修改替换字段中的某一个值"></a>修改替换字段中的某一个值</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> dictionary <span class="token keyword">set</span> content<span class="token operator">=</span>REPLACE<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'谭'</span><span class="token punctuation">,</span> <span class="token string">'谈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> recipes <span class="token keyword">set</span> item_image<span class="token operator">=</span>REPLACE<span class="token punctuation">(</span>item_image<span class="token punctuation">,</span>'http:<span class="token comment" spellcheck="true">//app-file.botu.com:9000','http://app-file.botu.com:9000/BOTU')</span>
<span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> rec<span class="token punctuation">.</span>id <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> recipes r <span class="token keyword">where</span>  <span class="token keyword">binary</span> r<span class="token punctuation">.</span>item_image <span class="token operator">not</span> <span class="token operator">like</span> <span class="token string">'%BOTU%'</span><span class="token punctuation">)</span> rec<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="清空表数据"><a href="#清空表数据" class="headerlink" title="清空表数据"></a>清空表数据</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span> dictionary<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 清空自增主键</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> dictionary<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 不清空自增主键</span></code></pre>
<h2 id="NULL查询"><a href="#NULL查询" class="headerlink" title="NULL查询"></a>NULL查询</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tmp <span class="token keyword">where</span> name <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tmp <span class="token keyword">where</span> name <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre>
<h2 id="根据表结构生成实体对应字段"><a href="#根据表结构生成实体对应字段" class="headerlink" title="根据表结构生成实体对应字段"></a>根据表结构生成实体对应字段</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>
    CONCAT_WS<span class="token punctuation">(</span>
        <span class="token string">''</span><span class="token punctuation">,</span>
        '<span class="token comment" spellcheck="true">/**
         *',
         COLUMN_COMMENT,
         '
         */</span>
         <span class="token variable">@TableField</span><span class="token punctuation">(</span><span class="token string">"',column_name,'"</span><span class="token punctuation">)</span>
         <span class="token variable">@JSONField</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"',column_name,'"</span><span class="token punctuation">)</span>
         private <span class="token string">',
        CASE DATA_TYPE
    WHEN '</span><span class="token keyword">varchar</span><span class="token string">' THEN
        '</span>String <span class="token string">'
    WHEN '</span><span class="token keyword">bigint</span><span class="token string">' THEN
        '</span>Long <span class="token string">'
    WHEN '</span><span class="token keyword">longtext</span><span class="token string">' THEN
        '</span>String <span class="token string">'
    WHEN '</span><span class="token keyword">datetime</span><span class="token string">' THEN
        '</span><span class="token keyword">Date</span> <span class="token string">'
    WHEN '</span><span class="token keyword">int</span><span class="token string">' THEN
        '</span><span class="token keyword">Integer</span> <span class="token string">'
    WHEN '</span><span class="token keyword">decimal</span><span class="token string">' THEN
        '</span>BigDecimal <span class="token string">'
    WHEN '</span><span class="token keyword">double</span><span class="token string">' THEN
        '</span><span class="token keyword">Double</span> <span class="token string">'
    WHEN '</span><span class="token keyword">timestamp</span><span class="token string">' THEN
        '</span><span class="token keyword">Timestamp</span> <span class="token string">'
    WHEN '</span><span class="token keyword">longblob</span><span class="token string">' THEN
        '</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token string">'
    WHEN '</span><span class="token keyword">tinyint</span><span class="token string">' THEN
        '</span><span class="token keyword">Integer</span> <span class="token string">'
    WHEN '</span><span class="token keyword">text</span><span class="token string">' THEN
        '</span>String <span class="token string">'
    WHEN '</span>char<span class="token string">' THEN
        '</span>Char <span class="token string">'
    WHEN '</span><span class="token keyword">date</span><span class="token string">' THEN
        '</span><span class="token keyword">Date</span> <span class="token string">'
    WHEN '</span><span class="token keyword">float</span><span class="token string">' THEN
        '</span><span class="token keyword">Float</span> <span class="token string">'
    WHEN '</span><span class="token keyword">varbinary</span><span class="token string">' THEN
        '</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token string">'
    WHEN '</span><span class="token keyword">mediumtext</span><span class="token string">' THEN
        '</span>String <span class="token string">'
    WHEN '</span><span class="token keyword">enum</span><span class="token string">' THEN
        '</span>String <span class="token string">'
    WHEN '</span><span class="token keyword">blob</span><span class="token string">' THEN
        '</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token string">'
    WHEN '</span><span class="token keyword">set</span><span class="token string">' THEN
        '</span>String <span class="token string">'
    WHEN '</span>time<span class="token string">' THEN
        '</span>Time <span class="token string">'
    WHEN '</span><span class="token keyword">smallint</span><span class="token string">' THEN
        '</span><span class="token keyword">Integer</span> <span class="token string">'
    WHEN '</span><span class="token keyword">tinytext</span><span class="token string">' THEN
        '</span>String <span class="token string">'
    WHEN '</span><span class="token keyword">binary</span><span class="token string">' THEN
        '</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token string">'
    WHEN '</span><span class="token keyword">bit</span><span class="token string">' THEN
        '</span><span class="token keyword">Boolean</span> <span class="token string">'
    END,
    column_name,
    '</span><span class="token punctuation">;</span><span class="token string">'
    )
FROM
    information_schema.`COLUMNS`
WHERE
    TABLE_SCHEMA = '</span>life_health<span class="token string">'
AND TABLE_NAME = '</span>health_exp'<span class="token punctuation">;</span> </code></pre>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="增加与修改列"><a href="#增加与修改列" class="headerlink" title="增加与修改列"></a>增加与修改列</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名称 列类型 列参数<span class="token punctuation">;</span> <span class="token punctuation">[</span>加的列在表的最后<span class="token punctuation">]</span>
例: <span class="token keyword">alter</span> <span class="token keyword">table</span> m1 <span class="token keyword">add</span> birth <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">'0000-00-00'</span><span class="token punctuation">;</span>

<span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名称 列类型 列参数 <span class="token keyword">after</span> 某列<span class="token punctuation">;</span> <span class="token punctuation">[</span>把新列加在某列后<span class="token punctuation">]</span>
例: <span class="token keyword">alter</span> <span class="token keyword">table</span> m1 <span class="token keyword">add</span> gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">''</span> <span class="token keyword">after</span> username<span class="token punctuation">;</span>

<span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 列名称 列类型 列参数 <span class="token keyword">first</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>把新列加在最前面<span class="token punctuation">]</span>
例: <span class="token keyword">alter</span> <span class="token keyword">table</span> m1 <span class="token keyword">add</span> pid <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token keyword">first</span><span class="token punctuation">;</span></code></pre>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 列名<span class="token punctuation">;</span></code></pre>
<h3 id="修改列类型"><a href="#修改列类型" class="headerlink" title="修改列类型"></a>修改列类型</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> 列名 新类型 新参数<span class="token punctuation">;</span> <span class="token punctuation">(</span>不能修改列名<span class="token punctuation">)</span><span class="token punctuation">;</span>
例:<span class="token keyword">alter</span> <span class="token keyword">table</span> m1 <span class="token keyword">modify</span> gender char<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">''</span><span class="token punctuation">;</span></code></pre>
<h3 id="修改列名及列类型"><a href="#修改列名及列类型" class="headerlink" title="修改列名及列类型"></a>修改列名及列类型</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">Alter</span> <span class="token keyword">table</span> 表名 change 旧列名 新列名 新类型 新参数<span class="token punctuation">;</span>
例:<span class="token keyword">alter</span> <span class="token keyword">table</span> m1 change id uid <span class="token keyword">int</span> unsigned<span class="token punctuation">;</span></code></pre>
<h3 id="改表名"><a href="#改表名" class="headerlink" title="改表名"></a>改表名</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">rename</span> <span class="token keyword">table</span> regist3 <span class="token keyword">to</span> reg3<span class="token punctuation">;</span></code></pre>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>dictionary<span class="token punctuation">`</span><span class="token punctuation">;</span></code></pre>
<h3 id="常用查询"><a href="#常用查询" class="headerlink" title="常用查询"></a>常用查询</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> sensitive_word_condition <span class="token number">a</span> <span class="token keyword">WHERE</span> <span class="token number">a</span><span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">11</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">a</span><span class="token punctuation">.</span>count <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>
<h1 id="MySQL-5-7查询一段时间内最后一条数据"><a href="#MySQL-5-7查询一段时间内最后一条数据" class="headerlink" title="MySQL 5.7查询一段时间内最后一条数据"></a>MySQL 5.7查询一段时间内最后一条数据</h1><p>mysql 升级到5.7之后，存储引擎做了一些优化，之前我们使用的 先order by 再 group by 的方式取最后一条数据的查询，会出现取的不是最后一条记录的问题</p>
<p>为了实现原有查询逻辑，请在子查询后面，加上limit 9223372036854775807<br>其中，9223372036854775807为bigint的最大值</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>
    <span class="token operator">*</span>
<span class="token keyword">FROM</span>
    <span class="token punctuation">(</span>
        <span class="token keyword">SELECT</span>
            <span class="token number">e</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>
            DATE_FORMAT<span class="token punctuation">(</span><span class="token punctuation">`</span>update_date<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> edt
        <span class="token keyword">FROM</span>
            health_exp <span class="token number">e</span>
        <span class="token keyword">WHERE</span>
            update_date <span class="token operator">BETWEEN</span> <span class="token string">'2018-02-01'</span>
        <span class="token operator">AND</span> <span class="token string">'2018-02-06 23:23:59'</span>
        <span class="token operator">AND</span> user_id <span class="token operator">=</span> <span class="token string">'2baef230bad144e89296c2c51fa2b680'</span>
        <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
            update_date <span class="token keyword">DESC</span>
        <span class="token keyword">LIMIT</span> <span class="token number">9223372036854775807</span>
    <span class="token punctuation">)</span> t
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
    t<span class="token punctuation">.</span>edt<span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 导出表结构和表数据 mysqldump用法</title>
    <url>/2019/03/22/mysql-note-mysqldump/</url>
    <content><![CDATA[<p>命令行下具体用法如下：</p>
<p>mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名;</p>
<h3 id="导出整个数据库结构和数据"><a href="#导出整个数据库结构和数据" class="headerlink" title="导出整个数据库结构和数据"></a>导出整个数据库结构和数据</h3><pre class=" language-shell"><code class="language-shell">mysqldump -h localhost -uroot -p123456 database > dump.sql</code></pre>
<h3 id="导出单个数据表结构和数据"><a href="#导出单个数据表结构和数据" class="headerlink" title="导出单个数据表结构和数据"></a>导出单个数据表结构和数据</h3><pre class=" language-shell"><code class="language-shell">mysqldump -h localhost -uroot -p123456  database table > dump.sql</code></pre>
<h3 id="导出整个数据库结构（不包含数据）"><a href="#导出整个数据库结构（不包含数据）" class="headerlink" title="导出整个数据库结构（不包含数据）"></a>导出整个数据库结构（不包含数据）</h3><pre class=" language-shell"><code class="language-shell">mysqldump -h localhost -uroot -p123456  -d database > dump.sql</code></pre>
<h3 id="导出单个数据表结构（不包含数据）"><a href="#导出单个数据表结构（不包含数据）" class="headerlink" title="导出单个数据表结构（不包含数据）"></a>导出单个数据表结构（不包含数据）</h3><pre class=" language-shell"><code class="language-shell">mysqldump -h localhost -uroot -p123456  -d database table > dump.sql</code></pre>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL查看所有连接的客户端ip</title>
    <url>/2020/06/29/mysql-show-client-connection/</url>
    <content><![CDATA[<p>有时候我们需要查看当前的mysql数据库中， 有哪些客户端保持了连接， 每个客户端分别保持了多少连接，可以使用下面的语句查询结果，可以直观的看到连接数。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> substring_index<span class="token punctuation">(</span>host<span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> hostname<span class="token punctuation">,</span>state<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>processlist <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> state<span class="token punctuation">,</span>hostname<span class="token punctuation">;</span></code></pre>
<p>输出结果：</p>
<pre class=" language-shell"><code class="language-shell">mysql> SELECT substring_index(host, ':',1) AS hostname,state,count(*) FROM information_schema.processlist GROUP BY state,hostname;
+----------------+-----------------------+----------+
| hostname       | state                 | count(*) |
+----------------+-----------------------+----------+
| 10.2.1.12      |                       |        2 |
| 192.168.21.125 |                       |        2 |
| vm21122        |                       |       52 |
| localhost      | executing             |        1 |
| 192.168.21.125 | Receiving from client |        1 |
+----------------+-----------------------+----------+
5 rows in set (0.00 sec)

mysql></code></pre>
<p>会列出每个ip当前的状态，以及当前的连接数 。这个在处理类似碰到数据库 Too Many Connections 等的错误的时候比较有用。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx开启gzip压缩</title>
    <url>/2020/06/18/nginx-enable-gzip/</url>
    <content><![CDATA[<p>在server节点下新增如下内容，开启gzip压缩。注意后端需要保证返回的 <strong>Content-Type: application/json;charset=UTF-8</strong></p>
<pre class=" language-shell"><code class="language-shell">gzip  on;

gzip_min_length  1k;

gzip_comp_level  6;

gzip_proxied     expired no-cache no-store private auth;

gzip_types       text/plain application/x-javascript text/css application/xml application/javascript application/json;</code></pre>
<p><img src="/images/nginx-gzip/nginx-gzip-configure.jpg" alt="配置"></p>
<p>成功以后可以看到</p>
<p><strong>Content-Encoding: gzip</strong></p>
<p><img src="/images/nginx-gzip/nginx-gzip-result.jpg" alt="结果"></p>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>商业论证中的财务测量指标</title>
    <url>/2020/01/01/pmp-note-01/</url>
    <content><![CDATA[<h1 id="商业论证中的财务测量指标"><a href="#商业论证中的财务测量指标" class="headerlink" title="商业论证中的财务测量指标"></a>商业论证中的财务测量指标</h1><p>商业论证中常见的财务指标测量方法</p>
<ul>
<li>ROI 投资回报率</li>
<li>PBP 投资回报周期</li>
<li>NPV 净现值</li>
<li>IRR 内部收益率</li>
<li>BCR 效益成本比率</li>
</ul>
<h2 id="静态评价法"><a href="#静态评价法" class="headerlink" title="静态评价法"></a>静态评价法</h2><p>适用于项目早期，不计较利息的情况。</p>
<p>600万买一个房子，出租，每个月租金收入1万。</p>
<ol>
<li>请问投资回报率(ROI)是多少？</li>
<li>一直租下去，投资回报期(PBP)几年？</li>
</ol>
<h3 id="投资回报率-ROI"><a href="#投资回报率-ROI" class="headerlink" title="投资回报率(ROI)"></a>投资回报率(ROI)</h3><pre class=" language-java"><code class="language-java">投资回报率<span class="token punctuation">(</span>ROI<span class="token punctuation">)</span> <span class="token operator">=</span> 年均利润 ➗ 投资额 </code></pre>
<p><strong>ROI = 12 ➗ 600 = 2%</strong></p>
<h3 id="投资回报期-PBP"><a href="#投资回报期-PBP" class="headerlink" title="投资回报期(PBP)"></a>投资回报期(PBP)</h3><pre class=" language-java"><code class="language-java">投资回报期<span class="token punctuation">(</span>PBP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> ➗ ROI</code></pre>
<p><strong>PBP = 1 ➗ (2%) = 50年</strong></p>
<p>再问：600万买一个房子，出租，每个月租金收入1万，5年后房价翻了一番，问ROI是多少？PBP是多少年？</p>
<p><img src="/images/pmp/pmp-01.png" alt="img1"></p>
<table>
<thead>
<tr>
<th align="center">年份</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
</tr>
</thead>
<tbody><tr>
<td align="center">收入</td>
<td align="center"></td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">1212</td>
</tr>
<tr>
<td align="center">支出</td>
<td align="center">-600</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">净现金流</td>
<td align="center">-600</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">1212</td>
</tr>
<tr>
<td align="center">累计现金流</td>
<td align="center">-600</td>
<td align="center">-588</td>
<td align="center">-576</td>
<td align="center">-564</td>
<td align="center">-552</td>
<td align="center">660</td>
</tr>
</tbody></table>
<ul>
<li>投资回报率(ROI) = 年均利润 ➗ 投资额 </li>
</ul>
<pre class=" language-java"><code class="language-java">ROI<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">600</span> ➗ <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span> ➗ <span class="token number">600</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token operator">%</span></code></pre>
<ul>
<li>投资回报期(PBP) = 1 ➗ ROI</li>
</ul>
<pre class=" language-java"><code class="language-java">PBP <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">552</span> ➗ <span class="token number">1212</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4.46</span>年</code></pre>
<p>简单解法，利用相似三角形原理</p>
<p><img src="/images/pmp/pmp-02.png" alt="img2"></p>
<p>PBP =  (x-4) ➗ (5-x) = (-552) ➗ 660 = 4.46年</p>
<h2 id="动态分析法"><a href="#动态分析法" class="headerlink" title="动态分析法"></a>动态分析法</h2><pre class=" language-java"><code class="language-java">复利计算<span class="token operator">:</span> 终值 <span class="token operator">=</span> 现值 ✖️ <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">^</span>n
折现计算<span class="token operator">:</span> 现值 <span class="token operator">=</span> 终值 ➗ <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">^</span>n</code></pre>
<p><strong>名词解释:</strong></p>
<blockquote>
<p>现值=本金</p>
<p>终值=收益总额</p>
<p>i = 利率</p>
<p>n = 周期(单位年)</p>
</blockquote>
<h3 id="净现值-NPV-有利息的计算"><a href="#净现值-NPV-有利息的计算" class="headerlink" title="净现值 NPV (有利息的计算)"></a>净现值 NPV (有利息的计算)</h3><table>
<thead>
<tr>
<th align="center">年份</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
</tr>
</thead>
<tbody><tr>
<td align="center">收入</td>
<td align="center"></td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">1212</td>
</tr>
<tr>
<td align="center">支出</td>
<td align="center">-600</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">净现金流</td>
<td align="center">-600</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">1212</td>
</tr>
<tr>
<td align="center">净现金流(折现)</td>
<td align="center">-600</td>
<td align="center">10.91<br>12/(1+10%)</td>
<td align="center">9.92<br>12/(1+10%)^2</td>
<td align="center">9.02</td>
<td align="center">8.20</td>
<td align="center">752.56<br>1212/(1+10%)^5</td>
</tr>
<tr>
<td align="center">累计现金流</td>
<td align="center">-600</td>
<td align="center">-598.09<br>(600-10.91)</td>
<td align="center">-579.17<br>(598.09-9.92)</td>
<td align="center">-570.16<br>(579.17-9.02)</td>
<td align="center">-561.96</td>
<td align="center">190.60</td>
</tr>
</tbody></table>
<blockquote>
<p>取基准折现率 <strong>i = 10%</strong></p>
<p>静态：<strong>PBP   (x-4) ➗ (5-x) = (-552) ➗ 660  x = 4.46年</strong> - 计算方式参考图二</p>
<p>动态：**PBP   (x-4) ➗ (5-x) = (-561.96) ➗ 190.60  x = 4.75年 **</p>
<p>净现值：<strong>NPV = 190.60万元，该值表示最后的净利润</strong></p>
</blockquote>
<h3 id="内部收益率-IRR"><a href="#内部收益率-IRR" class="headerlink" title="内部收益率 IRR"></a>内部收益率 IRR</h3><p><strong>该值越高，理论上表示可以承受的风险越高。</strong></p>
<table>
<thead>
<tr>
<th align="center">年份</th>
<th align="center">0</th>
<th align="center">1</th>
<th align="center">2</th>
<th align="center">3</th>
<th align="center">4</th>
<th align="center">5</th>
<th>i</th>
<th>NPV</th>
</tr>
</thead>
<tbody><tr>
<td align="center">收入</td>
<td align="center"></td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">1212</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">支出</td>
<td align="center">-600</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">净现金流</td>
<td align="center">-600</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">12</td>
<td align="center">1212</td>
<td></td>
<td></td>
</tr>
<tr>
<td align="center">净现金流(折现)1</td>
<td align="center">-600</td>
<td align="center">10.91<br>12/(1+10%)</td>
<td align="center">9.92<br>12/(1+10%)^2</td>
<td align="center">9.02</td>
<td align="center">8.20</td>
<td align="center">752.56<br>1212/(1+10%)^5</td>
<td>10%</td>
<td>190.60</td>
</tr>
<tr>
<td align="center">净现金流(折现)2</td>
<td align="center">-600</td>
<td align="center">10.62</td>
<td align="center">9.40</td>
<td align="center">8.32</td>
<td align="center">7.36</td>
<td align="center">657.83</td>
<td>13%</td>
<td>93.52</td>
</tr>
<tr>
<td align="center">净现金流(折现)3</td>
<td align="center">-600</td>
<td align="center">10.43</td>
<td align="center">9.07</td>
<td align="center">7.89</td>
<td align="center">6.86</td>
<td align="center">602.58</td>
<td>15%</td>
<td>36.84</td>
</tr>
<tr>
<td align="center">净现金流(折现)4</td>
<td align="center">-600</td>
<td align="center">10.34</td>
<td align="center">8.92</td>
<td align="center">7.69</td>
<td align="center">6.63</td>
<td align="center">577.05</td>
<td>16%</td>
<td>10.63</td>
</tr>
<tr>
<td align="center">净现金流(折现)5</td>
<td align="center">-600</td>
<td align="center">10.26</td>
<td align="center">8.77</td>
<td align="center">7.49</td>
<td align="center">6.40</td>
<td align="center">552.81</td>
<td>17%</td>
<td>-14.27</td>
</tr>
</tbody></table>
<p><img src="/images/pmp/pmp-03.png"></p>
<p>采用 相似三角形定律 方式进行计算</p>
<p><a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC/19113392?fr=aladdin">线性插值</a></p>
<pre class=" language-java"><code class="language-java">IRR <span class="token operator">=</span> <span class="token punctuation">(</span>IRR<span class="token operator">-</span><span class="token number">16</span><span class="token operator">%</span><span class="token punctuation">)</span> ➗ <span class="token punctuation">(</span><span class="token number">17</span><span class="token operator">%</span><span class="token operator">-</span>IRR<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10.63</span> ➗ <span class="token number">14.27</span>
IRR <span class="token operator">=</span> <span class="token number">16.43</span><span class="token operator">%</span> <span class="token comment" spellcheck="true">// 该值表示在这个利率下，不赚不赔</span></code></pre>
<h4 id="多个项目进行比较"><a href="#多个项目进行比较" class="headerlink" title="多个项目进行比较"></a>多个项目进行比较</h4><table>
<thead>
<tr>
<th align="center">项目</th>
<th align="center">A</th>
<th align="center">B</th>
<th align="center">C</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NPV(万元)</td>
<td align="center">1500</td>
<td align="center">1000</td>
<td align="center">1000</td>
</tr>
<tr>
<td align="center">IRR</td>
<td align="center">16%</td>
<td align="center">16%</td>
<td align="center">38%</td>
</tr>
</tbody></table>
<p>正常情况下，比较IRR是需要NPV作为考量标准，在没有NPV的情况下，没有比较意义。</p>
<p>如果非要比较的话，个人认为可以从对待风险的态度方面来讲。</p>
<ul>
<li>A、B ==&gt; IRR相同，表示内部收益率相同，抗风险能力更强，A项目的NPV(净现值)收益更高，所有选A</li>
<li>B、C ==&gt; NPV(净现值)相同，表示赚的钱是一样的，但是C项目的IRR(内部收益率)高，所以选择C</li>
</ul>
<h3 id="效益成本比率-BCR-Benefit-cost-ratio"><a href="#效益成本比率-BCR-Benefit-cost-ratio" class="headerlink" title="效益成本比率 BCR (Benefit cost ratio)"></a>效益成本比率 BCR (Benefit cost ratio)</h3><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">汽油车</th>
<th align="center">混合动力</th>
<th align="center">纯电动</th>
</tr>
</thead>
<tbody><tr>
<td align="center">百公里能源成本</td>
<td align="center">65￥</td>
<td align="center">39￥</td>
<td align="center">7.5￥</td>
</tr>
<tr>
<td align="center">购买成本</td>
<td align="center"></td>
<td align="center">+10 万￥</td>
<td align="center">+5 万￥</td>
</tr>
<tr>
<td align="center">节油效益</td>
<td align="center"></td>
<td align="center">2.6 万￥</td>
<td align="center">5.75 万￥</td>
</tr>
<tr>
<td align="center">效益成本BCR</td>
<td align="center"></td>
<td align="center">0.26</td>
<td align="center">1.15</td>
</tr>
</tbody></table>
<p><img src="/images/pmp/pmp-04.png" alt="img"></p>
<p>在C0这个点，成本和效益达到最佳点。△C 区间：成本增加，效益收益不明显。</p>
]]></content>
      <categories>
        <category>PMP实战</category>
      </categories>
      <tags>
        <tag>PMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis查看集群信息以及key分布非slot</title>
    <url>/2020/07/29/redis-cluster-info/</url>
    <content><![CDATA[<h2 id="进入redis集群"><a href="#进入redis集群" class="headerlink" title="进入redis集群"></a>进入redis集群</h2><pre class=" language-shell"><code class="language-shell">redis-cli -h ip -p port -c</code></pre>
<h2 id="查看集群节点"><a href="#查看集群节点" class="headerlink" title="查看集群节点"></a>查看集群节点</h2><pre class=" language-shell"><code class="language-shell">cluster nodes</code></pre>
<h2 id="查看key对应的slot"><a href="#查看key对应的slot" class="headerlink" title="查看key对应的slot"></a>查看key对应的slot</h2><pre class=" language-shell"><code class="language-shell">cluster keyslot key</code></pre>
<h2 id="查看slot和节点的对应关系"><a href="#查看slot和节点的对应关系" class="headerlink" title="查看slot和节点的对应关系"></a>查看slot和节点的对应关系</h2><pre class=" language-shell"><code class="language-shell">cluster slots</code></pre>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>io模型的演进</title>
    <url>/2021/10/12/service-io-model-evolution/</url>
    <content><![CDATA[<blockquote>
<p>学习三大要素 what、why、how，每天给自己强调一遍</p>
</blockquote>
<h3 id="1-什么是IO"><a href="#1-什么是IO" class="headerlink" title="1:什么是IO"></a>1:什么是IO</h3><p>程序是由数据+指令构成的，运行程序的过程可以分成下面这几步：<br>将代码加载到内存中，逐条运行内存中的代码<br>在运行代码的过程中，可能需要对文件的读写，即将文件输入（Input）到内存和将代码执行结果产生的文件输出（Output）到外设（网络、磁盘）的过程。那么这个数据交换的过程就是I/O</p>
<blockquote>
<p>1、将代码加载到内存中，逐条运行内存中的代码<br> 2、在运行代码的过程中，可能需要对文件的读写，即将文件输入（Input）到内存和将代码执行结果产生的文件输出（Output）到外设（网络、磁盘）的过程。那么这个数据交换的过程就是I/O</p>
</blockquote>
<h3 id="2-演进方式"><a href="#2-演进方式" class="headerlink" title="2:演进方式"></a>2:演进方式</h3><p>同步（如果由程序自己主动去读取IO，不管是什么IO模型都归属于同步IO，select,poll,epoll都是同步的）：</p>
<blockquote>
<p>阻塞IO模型<br> 非阻塞IO模型<br> 信号驱动IO模型<br> IO复用模型</p>
</blockquote>
<p>异步IO模型</p>
<h3 id="3-BIO-blocking-io"><a href="#3-BIO-blocking-io" class="headerlink" title="3:BIO(blocking io)"></a>3:BIO(blocking io)</h3><p><img src="/images/service-io-model-evolution/service-io-model-evolution-blocking-io.png" alt="blocking-io.png"><br>2个阻塞的方法： accept、recv</p>
<h3 id="4-NIO-non-block-io"><a href="#4-NIO-non-block-io" class="headerlink" title="4:NIO(non block io)"></a>4:NIO(non block io)</h3><p>linux 内核从2.6版本提供非阻塞api,使用用方式和BIO一样，但是要在阻塞前设置参数为非阻塞IO。<br><img src="/images/service-io-model-evolution/service-io-model-evolution-non-block-io.png" alt="non-block-io.png"><br>优缺点：</p>
<blockquote>
<p>NIO大量的减少了需要的线程数，在BIO阻塞的时候，可以进行大量其他计算。<br> 大量遍历连接调用recv，造成大量系统软中断（其中大量是无用的 O(n)）。</p>
</blockquote>
<h3 id="5-IO复用模型-O-1"><a href="#5-IO复用模型-O-1" class="headerlink" title="5:IO复用模型 O(1)"></a>5:IO复用模型 O(1)</h3><p>由于NIO的瓶颈产生于大量的系统调用，假如解决这个问题是否就可以解决，于是多路复用io出现。<br><img src="/images/service-io-model-evolution/service-io-model-evolution-multiplexing.png" alt="I/O复用模型.png"><br>关键字 selelct poll<br>IO多路转接是多了一个select函数，多个进程的IO可以注册到同一个select上，当用户进程调用该select，select会监听所有注册好的IO，如果所有被监听的IO需要的数据都没有准备好时，select调用进程会阻塞。当任意一个IO所需的数据准备好之后，select调用就会返回，然后进程在通过recvfrom来进行数据拷贝。</p>
<blockquote>
<p>优缺点：<br> 通过一次调用，由内核进行遍历（内核速度更快，且不会新增软中断）<br> 大量反复传递fds(文件句柄集合，解决方案，内核开辟空间保留fds)<br> 每次select或者poll都要重新遍历内核空间中的fds，遍历问题并没有解决。</p>
</blockquote>
<h3 id="6-epoll"><a href="#6-epoll" class="headerlink" title="6:epoll"></a>6:epoll</h3><p>epoll是Linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。epoll除了提供select/poll那种IO事件的水平触发（Level Triggered）外，还提供了边缘触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少epoll_wait/epoll_pwait的调用，提高应用程序效率。<br>重点：不需要遍历！<br>怎么实现的呢？</p>
<blockquote>
<p>1、select低效的原因之一是将“维护等待队列”和“阻塞进程”两个步骤合二为一。每次调用select都需要这两步操作，然而大多数应用场景中，需要监视的socket相对固定，并不需要每次都修改。epoll将这两个操作分开，先用epoll_ctl维护等待队列，再调用epoll_wait阻塞进程（解耦）。显而易见的，效率就能得到提升。<br> 2、select低效的另一个原因在于程序不知道哪些socket收到数据，只能一个个遍历。而epoll新增了一个就绪列表，收到数据的socket由内核加入到就绪列表（一个引用列表），就能避免遍历。<br>epoll_wait阻塞进程</p>
</blockquote>
<p>当socket接收到数据，中断程序一方面修改rdlist，另一方面唤醒eventpoll等待队列中的进程，进程A再次进入运行状态（如下图）。也因为rdlist（就绪列表）的存在，进程A可以知道哪些socket发生了变化。<br><img src="/images/service-io-model-evolution/service-io-model-evolution-epoll-notifyall.png" alt="epoll唤醒进程.png"></p>
<h3 id="7-信号驱动IO模型"><a href="#7-信号驱动IO模型" class="headerlink" title="7:信号驱动IO模型"></a>7:信号驱动IO模型</h3><p>复用IO模型解决了一个线程可以监控多个fd的问题，但是select是采用轮询的方式来监控多个fd的，通过不断的轮询fd的可读状态来知道是否就可读的数据，而无脑的轮询就显得有点暴力，因为大部分情况下的轮询都是无效的，所以有人就想，能不能不要我总是去问你是否数据准备就绪，能不能我发出请求后等你数据准备好了就通知我，所以就衍生了信号驱动IO模型。<br>于是信号驱动IO不是用循环请求询问的方式去监控数据就绪状态，而是在调用sigaction时候建立一个SIGIO的信号联系，当内核数据准备好之后再通过SIGIO信号通知线程数据准备好后的可读状态，当线程收到可读状态的信号后，此时再向内核发起recvfrom读取数据的请求，因为信号驱动IO的模型下应用线程在发出信号监控后即可返回，不会阻塞，所以这样的方式下，一个应用线程也可以同时监控多个fd。<br><img src="/images/service-io-model-evolution/service-io-model-evolution-sigio-io-module.png" alt="信号驱动io模型.png"></p>
<h3 id="8-异步IO模型"><a href="#8-异步IO模型" class="headerlink" title="8:异步IO模型"></a>8:异步IO模型</h3><p>也许你一开始就有一个疑问，为什么我们明明是想读取数据，什么非得要先发起一个select询问数据状态的请求，然后再发起真正的读取数据请求,能不能有一种一劳永逸的方式，我只要发送一个请求我告诉内核我要读取数据，然后我就什么都不管了，然后内核去帮我去完成剩下的所有事情？<br>当然既然你想得出来，那么就会有人做得到，有人设计了一种方案，应用只需要向内核发送一个read 请求,告诉内核它要读取数据后即刻返回；内核收到请求后会建立一个信号联系，当数据准备就绪，内核会主动把数据从内核复制到用户空间，等所有操作都完成之后，内核会发起一个通知告诉应用，我们称这种一劳永逸的模式为异步IO模型。<br><img src="/images/service-io-model-evolution/service-io-model-evolution-sync-io-module.png" alt="异步io模型.png"><br>异步IO的优化思路是解决了应用程序需要先后发送询问请求、发送接收数据请求两个阶段的模式，在异步IO的模式下，只需要向内核发送一次请求就可以完成状态询问和数拷贝的所有操作。</p>
<h3 id="9-总结"><a href="#9-总结" class="headerlink" title="9:总结"></a>9:总结</h3><p>什么时候select优于epoll？<br>一般认为如果在并发量低，socket都比较活跃的情况下，select效率更高，也就是说活跃socket数目与监控的总的socket数目之比越大，select效率越高，因为select反正都会遍历所有的socket，如果比例大，就没有白白遍历。加之于select本身实现比较简单，导致总体现象比epoll好）<br>而网络IO大多数使用select/epoll，当然也可以自己把它们封装的使用起来就像异步IO。<br>异步和同步的唯一区别就是使用的方式不一样，一个要堵塞线程，一个不堵塞线程。<br>并不是说异步IO性能一定比同步IO优秀。磁盘性能就那样，用同步IO也可以把它压榨完。为什么非得用异步IO呢？如果你不想线程堵塞，那可以换成异步IO，3种方案随便选。如果你觉得同步IO性能差，那换成异步IO就一定会变好吗？如果非要说性能差，那并不是把同步换成异步就能搞定的，而是需要去看每种IO方式的IO链路，和对数据的拷贝次数，并结合自己的IO场景和需求去分析。</p>
]]></content>
      <categories>
        <category>io memory module</category>
      </categories>
      <tags>
        <tag>io memory module</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 升级安装最新版git</title>
    <url>/2020/09/01/soft-install-git/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>安装必要依赖</p>
<pre class=" language-shell"><code class="language-shell">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc
yum install -y gcc perl-ExtUtils-MakeMaker</code></pre>
<h2 id="卸载旧版本Git"><a href="#卸载旧版本Git" class="headerlink" title="卸载旧版本Git"></a>卸载旧版本Git</h2><p>如果旧版本不存在，此步可忽略</p>
<pre class=" language-shell"><code class="language-shell">yum remove -y git</code></pre>
<h2 id="下载最新版Git"><a href="#下载最新版Git" class="headerlink" title="下载最新版Git"></a>下载最新版Git</h2><ul>
<li>切换目录</li>
</ul>
<pre class=" language-shell"><code class="language-shell">cd /usr/local/src</code></pre>
<ul>
<li>git release版本地址</li>
</ul>
<pre class=" language-shell"><code class="language-shell">https://mirrors.edge.kernel.org/pub/software/scm/git/</code></pre>
<ul>
<li>下载并解压</li>
</ul>
<pre class=" language-shell"><code class="language-shell">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.9.5.tar.gz
tar -xvf git-2.9.5.tar.gz
cd /usr/local/src/git-2.9.5</code></pre>
<h2 id="编译安装Git"><a href="#编译安装Git" class="headerlink" title="编译安装Git"></a>编译安装Git</h2><pre class=" language-shell"><code class="language-shell">make prefix=/usr/local/git all
make prefix=/usr/local/git install</code></pre>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><pre class=" language-shell"><code class="language-shell">echo "export PATH=$PATH:/usr/local/git/bin" >> /etc/profile 
source /etc/profile</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7 安装 MySQL5.7.X</title>
    <url>/2020/01/08/software-install-mysql5-7-x-centos7/</url>
    <content><![CDATA[<h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a><strong>安装前准备</strong></h2><p>MySQL安装需要准备root账户</p>
<h3 id="卸载MariaDB相关组件"><a href="#卸载MariaDB相关组件" class="headerlink" title="卸载MariaDB相关组件"></a>卸载MariaDB相关组件</h3><blockquote>
<p>由于MariaDB与MySQL类似，在安装时候会提示与已经安装的RPM包有冲突，因此需要卸载一些包含有MariaDB关键字的RPM包。 </p>
<p>执行<code>rpm -qa | grep mysql</code>检查需要卸载的包</p>
<p> 执行<code>rpm -qa | grep mariadb</code>检查需要卸载的包</p>
<p>如发现存在<code>mariadb</code>与<code>mysql</code>则使用<code>rpm -e --nodeps xxx</code>进行卸载</p>
</blockquote>
<pre class=" language-SHELL"><code class="language-SHELL">[root@vm31_123 mysql-5.7.28-1.el7.x86_64]# rpm -qa | grep mariadb # 检查mariadb
mariadb-libs-5.5.64-1.el7.x86_64

# 如有就进行卸载
[root@vm31_123 mysql-5.7.28-1.el7.x86_64]# rpm -e --nodeps mariadb-libs-5.5.64-1.el7.x86_64</code></pre>
<h3 id="下载安装文件"><a href="#下载安装文件" class="headerlink" title="下载安装文件"></a>下载安装文件</h3><p>这里我直接在官网拿到了MySQL5.7.28的下载地址，通过wget进行下载</p>
<pre class=" language-shell"><code class="language-shell">wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.28-1.el7.x86_64.rpm-bundle.tar</code></pre>
<h3 id="解压安装文件"><a href="#解压安装文件" class="headerlink" title="解压安装文件"></a>解压安装文件</h3><p>这里解压文件以后，直接放到新文件夹<code>mysql-5.7.28-1.el7.x86_64</code>了，可以看到目录下面有很多rpm包</p>
<pre class=" language-verilog"><code class="language-verilog">tar xvf mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm<span class="token operator">-</span>bundle<span class="token punctuation">.</span>tar <span class="token operator">-</span>C mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64

<span class="token punctuation">[</span>root@vm31_123 mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">]</span># ll
总用量 <span class="token number">595272</span>
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span>  <span class="token number">45109364</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">04</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>client<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span>    <span class="token number">318768</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">04</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>common<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span>   <span class="token number">7037096</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">04</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>devel<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span>  <span class="token number">49329100</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">04</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>embedded<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span>  <span class="token number">23354908</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">04</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>embedded<span class="token operator">-</span>compat<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span> <span class="token number">136837816</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">04</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>embedded<span class="token operator">-</span>devel<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span>   <span class="token number">4374364</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">04</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>libs<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span>   <span class="token number">1353312</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">04</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>libs<span class="token operator">-</span>compat<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span> <span class="token number">208694824</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">05</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">--</span>r<span class="token operator">--</span> <span class="token number">1</span> <span class="token number">7155</span> <span class="token number">31415</span> <span class="token number">133129992</span> <span class="token number">9</span>月  <span class="token number">30</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">05</span> mysql<span class="token operator">-</span>community<span class="token operator">-</span>test<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm</code></pre>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h3 id="检查3306端口"><a href="#检查3306端口" class="headerlink" title="检查3306端口"></a>检查3306端口</h3><p>MySQL默认使用3306端口，安装前查看端口是否被占用</p>
<pre class=" language-shell"><code class="language-shell">netstat -anp|grep 3306</code></pre>
<h3 id="安装相应的rpm包"><a href="#安装相应的rpm包" class="headerlink" title="安装相应的rpm包"></a>安装相应的rpm包</h3><ul>
<li>mysql-community-common-5.7.28-1.el7.x86_64.rpm</li>
<li>mysql-community-libs-5.7.28-1.el7.x86_64.rpm</li>
<li>mysql-community-client-5.7.28-1.el7.x86_64.rpm</li>
<li>mysql-community-server-5.7.28-1.el7.x86_64.rpm</li>
</ul>
<p>以上四个文件按照顺序依次安装，顺序不能错乱</p>
<pre class=" language-shell"><code class="language-shell">rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm
rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm
rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm
rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm</code></pre>
<p>以下为安装日志，只要之前的<code>mariadb</code>和<code>mysql</code>卸载干净了，一般不会有问题</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">[</span>root@vm31_123 mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">]</span># rpm <span class="token operator">-</span>ivh mysql<span class="token operator">-</span>community<span class="token operator">-</span>common<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
警告：mysql<span class="token operator">-</span>community<span class="token operator">-</span>common<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm<span class="token punctuation">:</span> 头V3 DSA<span class="token operator">/</span>SHA1 Signature<span class="token punctuation">,</span> 密钥 ID <span class="token number">5072e1</span>f5<span class="token punctuation">:</span> NOKEY
准备中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                          ################################# <span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span>
正在升级<span class="token operator">/</span>安装<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">1</span><span class="token punctuation">:</span>mysql<span class="token operator">-</span>community<span class="token operator">-</span>common<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>e################################# <span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@vm31_123 mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">]</span># rpm <span class="token operator">-</span>ivh mysql<span class="token operator">-</span>community<span class="token operator">-</span>libs<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
警告：mysql<span class="token operator">-</span>community<span class="token operator">-</span>libs<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm<span class="token punctuation">:</span> 头V3 DSA<span class="token operator">/</span>SHA1 Signature<span class="token punctuation">,</span> 密钥 ID <span class="token number">5072e1</span>f5<span class="token punctuation">:</span> NOKEY
准备中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                          ################################# <span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span>
正在升级<span class="token operator">/</span>安装<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">1</span><span class="token punctuation">:</span>mysql<span class="token operator">-</span>community<span class="token operator">-</span>libs<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7################################# <span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@vm31_123 mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">]</span># rpm <span class="token operator">-</span>ivh mysql<span class="token operator">-</span>community<span class="token operator">-</span>client<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
警告：mysql<span class="token operator">-</span>community<span class="token operator">-</span>client<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm<span class="token punctuation">:</span> 头V3 DSA<span class="token operator">/</span>SHA1 Signature<span class="token punctuation">,</span> 密钥 ID <span class="token number">5072e1</span>f5<span class="token punctuation">:</span> NOKEY
准备中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                          ################################# <span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span>
正在升级<span class="token operator">/</span>安装<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">1</span><span class="token punctuation">:</span>mysql<span class="token operator">-</span>community<span class="token operator">-</span>client<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>e################################# <span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@vm31_123 mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">]</span># rpm <span class="token operator">-</span>ivh mysql<span class="token operator">-</span>community<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm
警告：mysql<span class="token operator">-</span>community<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm<span class="token punctuation">:</span> 头V3 DSA<span class="token operator">/</span>SHA1 Signature<span class="token punctuation">,</span> 密钥 ID <span class="token number">5072e1</span>f5<span class="token punctuation">:</span> NOKEY
准备中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                          ################################# <span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span>
正在升级<span class="token operator">/</span>安装<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">1</span><span class="token punctuation">:</span>mysql<span class="token operator">-</span>community<span class="token operator">-</span>server<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>e################################# <span class="token punctuation">[</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">]</span></code></pre>
<h2 id="后续工作"><a href="#后续工作" class="headerlink" title="后续工作"></a>后续工作</h2><h3 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h3><pre class=" language-shell"><code class="language-shell">systemctl start mysqld</code></pre>
<h3 id="查看MySQL服务状态"><a href="#查看MySQL服务状态" class="headerlink" title="查看MySQL服务状态"></a>查看MySQL服务状态</h3><pre class=" language-shell"><code class="language-shell">systemctl status mysqld</code></pre>
<p>输出日志</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">[</span>root@vm31_123 mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">]</span># systemctl status mysqld
● mysqld<span class="token punctuation">.</span>service <span class="token operator">-</span> MySQL Server
   Loaded<span class="token punctuation">:</span> loaded <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>systemd<span class="token operator">/</span>system<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>service<span class="token punctuation">;</span> enabled<span class="token punctuation">;</span> vendor preset<span class="token punctuation">:</span> disabled<span class="token punctuation">)</span>
   Active<span class="token punctuation">:</span> active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since 三 <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> CST<span class="token punctuation">;</span> <span class="token number">6</span>s ago
     Docs<span class="token punctuation">:</span> man<span class="token punctuation">:</span><span class="token function">mysqld</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>
           http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//dev.mysql.com/doc/refman/en/using-systemd.html</span>
  Process<span class="token punctuation">:</span> <span class="token number">22483</span> ExecStart<span class="token operator">=/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>mysqld <span class="token operator">--</span>daemonize <span class="token operator">--</span>pid<span class="token operator">-</span>file<span class="token operator">=/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>mysqld<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>pid <span class="token property">$MYSQLD_OPTS</span> <span class="token punctuation">(</span>code<span class="token operator">=</span>exited<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token operator">/</span>SUCCESS<span class="token punctuation">)</span>
  Process<span class="token punctuation">:</span> <span class="token number">22450</span> ExecStartPre<span class="token operator">=/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mysqld_pre_systemd <span class="token punctuation">(</span>code<span class="token operator">=</span>exited<span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token operator">/</span>SUCCESS<span class="token punctuation">)</span>
 Main PID<span class="token punctuation">:</span> <span class="token number">22486</span> <span class="token punctuation">(</span>mysqld<span class="token punctuation">)</span>
    Tasks<span class="token punctuation">:</span> <span class="token number">27</span>
   Memory<span class="token punctuation">:</span> <span class="token number">193.8</span>M
   CGroup<span class="token punctuation">:</span> <span class="token operator">/</span>system<span class="token punctuation">.</span>slice<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>service
           └─<span class="token number">22486</span> <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>mysqld <span class="token operator">--</span>daemonize <span class="token operator">--</span>pid<span class="token operator">-</span>file<span class="token operator">=/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>mysqld<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>pid

<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.468981</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> Found ca<span class="token punctuation">.</span>pem<span class="token punctuation">,</span> server<span class="token operator">-</span>cert<span class="token punctuation">.</span>pem <span class="token keyword">and</span> server<span class="token operator">-</span>key<span class="token punctuation">.</span>pem in data directory<span class="token punctuation">.</span> Trying to enable SSL support using them<span class="token punctuation">.</span>
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.469015</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> Skipping generation of SSL certificates as certificate files are present in data directory<span class="token punctuation">.</span>
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.470439</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> CA certificate ca<span class="token punctuation">.</span>pem is self <span class="token keyword">signed</span><span class="token punctuation">.</span>
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.470543</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> Skipping generation of RSA key pair as key files are present in data directory<span class="token punctuation">.</span>
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.471329</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> Server hostname <span class="token punctuation">(</span><span class="token keyword">bind</span><span class="token operator">-</span>address<span class="token punctuation">)</span><span class="token punctuation">:</span> '<span class="token operator">*</span>'<span class="token punctuation">;</span> port<span class="token punctuation">:</span> <span class="token number">3306</span>
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.471412</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> IPv6 is available<span class="token punctuation">.</span>
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.471436</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span>   <span class="token operator">-</span> '<span class="token punctuation">:</span><span class="token punctuation">:</span>' resolves to '<span class="token punctuation">:</span><span class="token punctuation">:</span>'<span class="token punctuation">;</span>
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.471467</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> Server socket created on IP<span class="token punctuation">:</span> '<span class="token punctuation">:</span><span class="token punctuation">:</span>'<span class="token punctuation">.</span>
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 mysqld<span class="token punctuation">[</span><span class="token number">22483</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T13<span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06.485478</span>Z <span class="token number">0</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> Event Scheduler<span class="token punctuation">:</span> Loaded <span class="token number">0</span> events
<span class="token number">1</span>月 <span class="token number">08</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">02</span><span class="token punctuation">:</span><span class="token number">06</span> vm31_123 systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Started MySQL Server<span class="token punctuation">.</span></code></pre>
<h3 id="修改默认密码"><a href="#修改默认密码" class="headerlink" title="修改默认密码"></a>修改默认密码</h3><h4 id="查看MySQL安装成功以后生成的零时密码"><a href="#查看MySQL安装成功以后生成的零时密码" class="headerlink" title="查看MySQL安装成功以后生成的零时密码"></a>查看MySQL安装成功以后生成的零时密码</h4><pre class=" language-shell"><code class="language-shell">sudo cat /var/log/mysqld.log |grep 'temporary password'</code></pre>
<p>输出结果，可以看到我们的mysql零时密码是<code>;2o1:2h%!ruT</code></p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">[</span>root@vm31_123 mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">]</span># sudo cat <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>log <span class="token operator">|</span>grep 'temporary password'
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">08</span>T12<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">:</span><span class="token number">09.914526</span>Z <span class="token number">1</span> <span class="token punctuation">[</span>Note<span class="token punctuation">]</span> A temporary password is generated <span class="token keyword">for</span> root@localhost<span class="token punctuation">:</span> <span class="token punctuation">;</span><span class="token number">2</span>o1<span class="token punctuation">:</span><span class="token number">2</span>h<span class="token operator">%!</span>ruT</code></pre>
<h4 id="使用零时密码登录修改"><a href="#使用零时密码登录修改" class="headerlink" title="使用零时密码登录修改"></a>使用零时密码登录修改</h4><p>输入<code>mysql -uroot -p</code>以后会提示我们输入密码，这时候输入刚刚生成的零时密码<code>;2o1:2h%!ruT</code>即可登录</p>
<p>接下来就可以使用<code>ALTER USER 'root'@'localhost' IDENTIFIED BY 'MySQL@123';</code>（此处MySQL@123为数据库密码，根据需求自行设置更改）</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">[</span>root@vm31_123 mysql<span class="token operator">-</span><span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">]</span># mysql <span class="token operator">-</span>uroot <span class="token operator">-</span>p
Enter password<span class="token punctuation">:</span>
Welcome to the MySQL monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> <span class="token keyword">with</span> <span class="token punctuation">;</span> <span class="token keyword">or</span> \g<span class="token punctuation">.</span>
Your MySQL connection id is <span class="token number">2</span>
Server version<span class="token punctuation">:</span> <span class="token number">5.7</span><span class="token punctuation">.</span><span class="token number">28</span>

Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">,</span> Oracle <span class="token keyword">and</span><span class="token operator">/</span><span class="token keyword">or</span> its affiliates<span class="token punctuation">.</span> All rights reserved<span class="token punctuation">.</span>

Oracle is a registered trademark of Oracle Corporation <span class="token keyword">and</span><span class="token operator">/</span><span class="token keyword">or</span> its
affiliates<span class="token punctuation">.</span> Other names may be trademarks of their respective
owners<span class="token punctuation">.</span>

Type <span class="token number">'he</span>lp<span class="token punctuation">;</span>' <span class="token keyword">or</span> '\h' <span class="token keyword">for</span> help<span class="token punctuation">.</span> Type '\c' to clear the current <span class="token keyword">input</span> statement<span class="token punctuation">.</span>

mysql<span class="token operator">></span> ALTER USER 'root'@'localhost' IDENTIFIED BY 'MySQL@<span class="token number">123</span>'<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span></code></pre>
<h2 id="设置外部IP访问MySQL"><a href="#设置外部IP访问MySQL" class="headerlink" title="设置外部IP访问MySQL"></a>设置外部IP访问MySQL</h2><p>为了能够让外部访问数据库，需要将root的Host值改为’%’，具体步骤如下：</p>
<p>查看允许连接到本数据库的信息，执行命令<code>select host,user from mysql.user;</code></p>
<p>默认root只能通过localhost连接，不能远程访问。</p>
<ul>
<li>选择数据库：<code>use mysql;</code></li>
<li>先执行：<code>update user set Host='%' where User='root';</code></li>
<li> 再执行:<code>flush privileges;</code> # 刷新权限</li>
</ul>
<pre class=" language-verilog"><code class="language-verilog">mysql<span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
Reading <span class="token keyword">table</span> information <span class="token keyword">for</span> completion of <span class="token keyword">table</span> <span class="token keyword">and</span> column names
You can turn off <span class="token keyword">this</span> feature to get a quicker startup <span class="token keyword">with</span> <span class="token operator">-</span>A

Database changed
mysql<span class="token operator">></span> update user set Host<span class="token operator">=</span>'<span class="token operator">%</span>' where User<span class="token operator">=</span>'root'<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> row affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
Rows matched<span class="token punctuation">:</span> <span class="token number">1</span>  Changed<span class="token punctuation">:</span> <span class="token number">1</span>  Warnings<span class="token punctuation">:</span> <span class="token number">0</span>

mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> rows affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>

mysql<span class="token operator">></span></code></pre>
<p>当设置完host=%以后，就可以使用我们熟悉<code>navicat</code>或者<code>sequel</code>进行连接了</p>
<h2 id="修改MySQL默认编码为utf8"><a href="#修改MySQL默认编码为utf8" class="headerlink" title="修改MySQL默认编码为utf8"></a>修改MySQL默认编码为<code>utf8</code></h2><p>当我们MySQL安装完成以后，默认编码不一定是<code>utf8</code>，虽然在建库建表的时候可以指定，但是始终不方便，那么接下来我们将MySQL默认编码设置为<code>utf8</code></p>
<h3 id="查看MySQL默认编码"><a href="#查看MySQL默认编码" class="headerlink" title="查看MySQL默认编码"></a>查看MySQL默认编码</h3><p>使用<code>show variables like 'character_set_%';</code></p>
<pre class=" language-verilog"><code class="language-verilog">mysql<span class="token operator">></span> show variables like 'character_set_<span class="token operator">%</span>'<span class="token punctuation">;</span>
<span class="token operator">+--------------------------+----------------------------+</span>
<span class="token operator">|</span> Variable_name            <span class="token operator">|</span> Value                      <span class="token operator">|</span>
<span class="token operator">+--------------------------+----------------------------+</span>
<span class="token operator">|</span> character_set_client     <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_set_connection <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_set_database   <span class="token operator">|</span> latin1                     <span class="token operator">|</span>
<span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> binary                     <span class="token operator">|</span>
<span class="token operator">|</span> character_set_results    <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_set_server     <span class="token operator">|</span> latin1                     <span class="token operator">|</span>
<span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>mysql<span class="token operator">/</span>charsets<span class="token operator">/</span> <span class="token operator">|</span>
<span class="token operator">+--------------------------+----------------------------+</span>
<span class="token number">8</span> rows in set <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre>
<p>可以看到<code>character_set_server</code>这里是<code>latin1</code>，并不是我们想要的<code>utf8</code>，这时候我们就需要编辑<code>/etc/my.cnf</code>文件进行设置</p>
<h3 id="编辑my-cnf文件"><a href="#编辑my-cnf文件" class="headerlink" title="编辑my.cnf文件"></a>编辑<code>my.cnf</code>文件</h3><p><code>sudo vim /etc/my.cnf</code>进行编辑，加入以下内容，然后保存重启MySQL服务<code>systemctl restart mysqld</code></p>
<p><strong>注意：<code>my.cnf</code>中默认包含<code>[mysqld]</code>，修改的时候就在原来的基础上改就好了，不要重复了</strong></p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>
<span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span>set<span class="token operator">=</span>utf8

<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
collation<span class="token operator">-</span>server <span class="token operator">=</span> utf8_unicode_ci
init<span class="token operator">-</span>connect<span class="token operator">=</span>'SET NAMES utf8'
character<span class="token operator">-</span>set<span class="token operator">-</span>server <span class="token operator">=</span> utf8

<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>
<span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span>set<span class="token operator">=</span>utf8</code></pre>
<h3 id="再次查看修改以后的编码"><a href="#再次查看修改以后的编码" class="headerlink" title="再次查看修改以后的编码"></a>再次查看修改以后的编码</h3><pre class=" language-verilog"><code class="language-verilog">mysql<span class="token operator">></span> show variables like 'character_set_<span class="token operator">%</span>'<span class="token punctuation">;</span>
<span class="token operator">+--------------------------+----------------------------+</span>
<span class="token operator">|</span> Variable_name            <span class="token operator">|</span> Value                      <span class="token operator">|</span>
<span class="token operator">+--------------------------+----------------------------+</span>
<span class="token operator">|</span> character_set_client     <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_set_connection <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_set_database   <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_set_filesystem <span class="token operator">|</span> binary                     <span class="token operator">|</span>
<span class="token operator">|</span> character_set_results    <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_set_server     <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_set_system     <span class="token operator">|</span> utf8                       <span class="token operator">|</span>
<span class="token operator">|</span> character_sets_dir       <span class="token operator">|</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>mysql<span class="token operator">/</span>charsets<span class="token operator">/</span> <span class="token operator">|</span>
<span class="token operator">+--------------------------+----------------------------+</span>
<span class="token number">8</span> rows in set <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre>
<p>到这里，MySQL的默认编码就是我么熟悉的<code>utf8</code>了</p>
<h2 id="忘记MySQL密码"><a href="#忘记MySQL密码" class="headerlink" title="忘记MySQL密码"></a>忘记MySQL密码</h2><p>当忘记MySQL密码或者MySQL密码错误是会提示错误<code>ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)</code></p>
<p>如果找不到MySQL密码时可以使用跳过mysql权限表启动的方式进行密码重置</p>
<ol>
<li><p>停止MySQL服务</p>
<pre class=" language-shell"><code class="language-shell">systemctl stop mysqld</code></pre>
</li>
<li><p>跳过mysql权限表启动</p>
<pre class=" language-shell"><code class="language-shell">/usr/bin/mysqld_safe --skip-grant-tables</code></pre>
</li>
<li><p>无密码登录</p>
<pre class=" language-shell"><code class="language-shell">mysql -uroot</code></pre>
</li>
</ol>
<ol start="4">
<li><p>选择<code>mysql</code>数据库</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span> </code></pre>
</li>
</ol>
<ol start="5">
<li><p>重置密码</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'MySQL@123'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span> </code></pre>
</li>
</ol>
<ol start="6">
<li><p>刷新权限</p>
<pre class=" language-shell"><code class="language-shell">flush privileges;</code></pre>
</li>
</ol>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li><p>修改默认配置，当插入或更新的数据比较大时，需要修改<code>/etc/my.cnf</code>配置文件</p>
<p>在[mysqlId]下加上 max_allowed_packet=20M (可以通过 mysql –help | grep my.cnf查找文件路径)</p>
</li>
</ol>
<ol start="2">
<li><p>当重启服务器后，MySQL无法正常启动，遇到以下问题 <code>Job for mysqld.service failed. See 'systemctl status mysqld.service' and 'journalctl -xn' for details.</code> 查看日志，出现如下错误内容：</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token operator">/</span>mysqld<span class="token punctuation">:</span> Can't create<span class="token operator">/</span>write to file '<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>run<span class="token operator">/</span>mysqld<span class="token operator">/</span>mysqld<span class="token punctuation">.</span>pid' <span class="token punctuation">(</span>Errcode<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token operator">-</span> No such file <span class="token keyword">or</span> directory<span class="token punctuation">)</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Can't start server<span class="token punctuation">:</span> can't create PID file<span class="token punctuation">:</span> No such file <span class="token keyword">or</span> directory
Copy</code></pre>
<p>解决方案：</p>
<pre><code>##授权
chown mysql.mysql /var/run/mysqld/

##启动
/etc/init.d/mysqld start</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 使用jpa和H2数据库</title>
    <url>/2020/01/05/spring-boot-jpa-h2/</url>
    <content><![CDATA[<p>日常测试时没有数据库可用时，使用H2不失为一种解决方案，而且H2也经常用在持久层的单元测试，Spring Boot中使用H2也很简单，只要一些配置即可。</p>
<h2 id="项目结构与pom-xml"><a href="#项目结构与pom-xml" class="headerlink" title="项目结构与pom.xml"></a>项目结构与pom.xml</h2><p>先看看整体的项目结构</p>
<pre class=" language-shell"><code class="language-shell">➜  example-h2 git:(master) ✗ tree /Users/xiaozhangge/share/life-example/example-h2
/Users/xiaozhangge/share/life-example/example-h2
├── example-h2.iml
├── pom.xml
└── src
    ├── main
    │&nbsp;&nbsp; ├── java
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── com
    │&nbsp;&nbsp; │&nbsp;&nbsp;     └── example
    │&nbsp;&nbsp; │&nbsp;&nbsp;         └── h2
    │&nbsp;&nbsp; │&nbsp;&nbsp;             ├── H2DbApplication.java
    │&nbsp;&nbsp; │&nbsp;&nbsp;             ├── entity
    │&nbsp;&nbsp; │&nbsp;&nbsp;             │&nbsp;&nbsp; └── UserEntity.java
    │&nbsp;&nbsp; │&nbsp;&nbsp;             └── repository
    │&nbsp;&nbsp; │&nbsp;&nbsp;                 └── UserRepository.java
    │&nbsp;&nbsp; └── resources
    │&nbsp;&nbsp;     ├── application.yml
    │&nbsp;&nbsp;     └── db
    │&nbsp;&nbsp;         ├── data.sql
    │&nbsp;&nbsp;         └── schema.sql
    └── test
        └── java
            └── com
                └── xiaozhange
                    └── h2
                        └── H2DbApplicationTests.java

15 directories, 9 files</code></pre>
<p>这里使用H2数据，为了方便测试也使用jpa进行数据库操作，第一步肯定是需要引入maven依赖</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="创建数据库脚本与初始化数据脚本"><a href="#创建数据库脚本与初始化数据脚本" class="headerlink" title="创建数据库脚本与初始化数据脚本"></a>创建数据库脚本与初始化数据脚本</h2><ul>
<li>schema.sql</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> user_info
<span class="token punctuation">(</span>
  id       <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  name     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>                      <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  birthday <span class="token keyword">datetime</span>                          <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
  remark   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>data.sql</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> user_info
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'小张哥'</span><span class="token punctuation">,</span> <span class="token string">'2020-01-05 15:40:00'</span><span class="token punctuation">,</span> <span class="token string">'哈哈哈'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>mem<span class="token punctuation">:</span>h2<span class="token punctuation">-</span>test;DB_CLOSE_DELAY=<span class="token punctuation">-</span>1;DB_CLOSE_ON_EXIT=FALSE
    <span class="token key atrule">username</span><span class="token punctuation">:</span> sa
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
    <span class="token key atrule">platform</span><span class="token punctuation">:</span> h2
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver
    <span class="token key atrule">hikari</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># http://blog.didispace.com/Springboot-2-0-HikariCP-default-reason/</span>
      <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">20</span>
      <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
      <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> H2HikariCP
      <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
      <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
      <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> SELECT 1
    <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/schema.sql
    <span class="token key atrule">data</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>db/data.sql
  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>
    <span class="token key atrule">database-platform</span><span class="token punctuation">:</span> org.hibernate.dialect.H2Dialect
    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>
      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update
    <span class="token key atrule">properties</span><span class="token punctuation">:</span>
      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>
        <span class="token key atrule">use_sql_comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">h2</span><span class="token punctuation">:</span>
    <span class="token key atrule">console</span><span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true"># 进行该配置，程序开启时就会启动h2 web console。当然这是默认的，如果你不想在启动程序时启动h2 web console，那么就设置为false。</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token comment" spellcheck="true"># 进行该配置，你就可以通过 URL/h2-console访问h2 web console。</span>
      <span class="token key atrule">path</span><span class="token punctuation">:</span> /h2<span class="token punctuation">-</span>console
      <span class="token key atrule">settings</span><span class="token punctuation">:</span>
        <span class="token key atrule">trace</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
        <span class="token comment" spellcheck="true"># 进行该配置后，h2 web console 就可以在远程访问了。否则只能在本机访问。</span>
        <span class="token key atrule">web-allow-others</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre>
<p><code>application.yml</code>中，分别有datasource、jpa、h2等配置</p>
<h3 id="datasouce"><a href="#datasouce" class="headerlink" title="datasouce"></a>datasouce</h3><p>其中<code>url</code>使用了h2的配置连接字符串，并且使用了<code>hikari</code>数据库连接池，详细信息请查看<a href="http://blog.didispace.com/Springboot-2-0-HikariCP-default-reason/">Springboot 2.0选择HikariCP作为默认数据库连接池的五大理由</a></p>
<h3 id="jpa"><a href="#jpa" class="headerlink" title="jpa"></a>jpa</h3><p>jpa中配置了数据库方言<code>database-platform</code>，显示sql等配置</p>
<h3 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h3><p><code>spring.datasource.schema=classpath:db/schema.sql</code>进行该配置后，每次启动程序，程序都会运行<code>resources/db/schema.sql</code>文件，对数据库的结构进行操作。</p>
<p><code>spring.datasource.data=classpath:db/data.sql</code>进行该配置后，每次启动程序，程序都会运行<code>resources/db/data.sql</code>文件，对数据库的数据操作。</p>
<h4 id="h2-web-console配置"><a href="#h2-web-console配置" class="headerlink" title="h2 web console配置"></a>h2 web console配置</h4><p><code>h2 web console</code>是一个数据库<code>GUI</code>管理应用，就和<code>phpMyAdmin</code>类似。程序运行时，会自动启动<code>h2 web console</code>。当然你也可以进行如下的配置。</p>
<ul>
<li><code>spring.h2.console.settings.web-allow-others=true</code>，进行该配置后，<code>h2 web console</code>就可以在远程访问了。否则只能在本机访问。</li>
<li><code>spring.h2.console.path=/h2-console</code>，进行该配置，你就可以通过 <code>URL/h2-console</code>访问<code>h2 web console</code>。</li>
<li><code>spring.h2.console.enabled=true</code>，进行该配置，程序开启时就会启动<code>h2 web console</code>。当然这是默认的，如果你不想在启动程序时启动<code>h2 web console</code>，那么就设置为false。</li>
</ul>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>entity<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Column<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Entity<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Id<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>Table<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-05.
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_info"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> LocalDateTime birthday<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token function">UserEntity</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> LocalDateTime birthday<span class="token punctuation">,</span> String remark<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>remark <span class="token operator">=</span> remark<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>repository<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-05.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>UserEntity<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为了方便查看结果，写一个测试类查看结果</p>
<pre class=" language-java"><code class="language-java">
<span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>H2DbApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>UserEntity<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>UserRepository<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Ignore<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>RunWith<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-05.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Ignore</span>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> H2DbApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">H2DbApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 新增数据</span>
        UserEntity entity <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token string">"阿牛"</span> <span class="token operator">+</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"新增测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"新增结果:{}\n"</span><span class="token punctuation">,</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 修改数据</span>
        entity <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"哈哈哈哈"</span><span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"修改以后的结果"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"按照id修改结果:{}\n"</span><span class="token punctuation">,</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 按照id查询</span>
        Optional<span class="token operator">&lt;</span>UserEntity<span class="token operator">></span> optional <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"按照id查询结果:{}\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 查询所有</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询所有"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Iterable<span class="token operator">&lt;</span>UserEntity<span class="token operator">></span> iterable <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iterable<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"item:{}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 删除数据</span>
        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 删除id=1的数据以后</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"删除id=1的数据以后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iterable <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        iterable<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"item:{}"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>测试结果如下</p>
<pre class=" language-shell"><code class="language-shell">2020-01-05 18:07:40.499  INFO 28214 --- [           main] com.xiaozhangge.h2.H2DbApplicationTests     : 新增结果:UserEntity(id=2, name=阿牛33dc0a6d-29cd-4e79-9ae4-ad64b1588e69, birthday=2020-01-05T18:07:40.383, remark=新增测试)

2020-01-05 18:07:40.527  INFO 28214 --- [           main] com.xiaozhangge.h2.H2DbApplicationTests     : 按照id修改结果:UserEntity(id=1, name=哈哈哈哈, birthday=2020-01-05T18:07:40.500, remark=修改以后的结果)

2020-01-05 18:07:40.578  INFO 28214 --- [           main] com.xiaozhangge.h2.H2DbApplicationTests     : 按照id查询结果:UserEntity(id=1, name=哈哈哈哈, birthday=2020-01-05T18:07:40.500, remark=修改以后的结果)

2020-01-05 18:07:40.578  INFO 28214 --- [           main] com.xiaozhangge.h2.H2DbApplicationTests     : 查询所有
2020-01-05 18:07:40.586  INFO 28214 --- [           main] com.xiaozhangge.h2.H2DbApplicationTests     : item:UserEntity(id=1, name=哈哈哈哈, birthday=2020-01-05T18:07:40.500, remark=修改以后的结果)
2020-01-05 18:07:40.586  INFO 28214 --- [           main] com.xiaozhangge.h2.H2DbApplicationTests     : item:UserEntity(id=2, name=阿牛33dc0a6d-29cd-4e79-9ae4-ad64b1588e69, birthday=2020-01-05T18:07:40.383, remark=新增测试)

2020-01-05 18:07:40.602  INFO 28214 --- [           main] com.xiaozhangge.h2.H2DbApplicationTests     : 删除id=1的数据以后
2020-01-05 18:07:40.604  INFO 28214 --- [           main] com.xiaozhangge.h2.H2DbApplicationTests     : item:UserEntity(id=2, name=阿牛33dc0a6d-29cd-4e79-9ae4-ad64b1588e69, birthday=2020-01-05T18:07:40.383, remark=新增测试)
</code></pre>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://github.com/xiaozhangge/life-example/tree/master/example-h2">https://github.com/xiaozhangge/life-example/tree/master/example-h2</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.X使用Lettuce设置多个RedisTemplate实例</title>
    <url>/2021/02/07/spring-boot-lettuce-multi-instance/</url>
    <content><![CDATA[<p>最近公司产品需求,需要使用同一个redis数据库服务使用不同的序列化方式的redisTemplate对缓存数据库进行读写操作,<br>目前大部分网上的文章在实作Redis分流时，都是以Jedis为样例，但SpringBoot在2.x版本之后已经将Redis库替换成Lettuce了<br>之前我写过一篇文章就是 <a href="https://xiaomozhang.github.io/2020/01/10/spring-boot-redis-multi-instance/"><code>SpringBoot2.x Redis多数据源配置(Vavr函数式编程方式实现)</code></a><br>这篇文章是我使用<code>Vavr函数式编程方式实现</code>进行实现的,接下来我将使用一种更简单的方式进行操作<br>当然在进行实现案例之前我们还是要基于springboot基础的redis库包还是要引入进来的</p>
<h2 id="项目pom配置"><a href="#项目pom配置" class="headerlink" title="项目pom配置"></a>项目pom配置</h2><p>使用Spring Boot集成Redis，只需要将<code>spring-boot-starter-data-redis</code>和<code>commons-pool2</code>加到依赖即可</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>spring.redis</code>开头的都是Spring Boot自动注入需要加载的配置</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8 </span><span class="token comment" spellcheck="true"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1 </span><span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8 </span><span class="token comment" spellcheck="true"># 连接池中的最大空闲连接 默认 8</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0 </span><span class="token comment" spellcheck="true"># 连接池中的最小空闲连接 默认 0</span>
  <span class="token key atrule">redis-db-2</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span></code></pre>
<h3 id="RedisConfigure"><a href="#RedisConfigure" class="headerlink" title="RedisConfigure"></a>RedisConfigure</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>configure<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>Tuple6<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>pool2<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>GenericObjectPoolConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableCaching<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisPassword<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisStandaloneConfiguration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisClientConfiguration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span>LettuceConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span>LettucePoolingClientConfiguration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-10.
 *
 * @Value("${spring.redis-db-2.database}") int database,
 * @Value("${spring.redis-db-2.host}") String host,
 * @Value("${spring.redis-db-2.port}") int port,
 * @Value("${spring.redis-db-2.password}") String password,
 * @Value("${spring.redis-db-2.timeout}") long timeout,
 * @Value("${spring.redis-db-2.lettuce.pool.max-active}") int maxActive,
 * @Value("${spring.redis-db-2.lettuce.pool.max-wait}") int maxWait,
 * @Value("${spring.redis-db-2.lettuce.pool.max-idle}") int maxIdle,
 * @Value("${spring.redis-db-2.lettuce.pool.min-idle}") int minIdle
 */</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigure</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/**
       * string redis Template创建操作
       *
       * @param database  Redis数据库索引
       * @param timeout   连接超时时间（秒）
       * @param maxActive 连接池最大连接数（使用负值表示沒有限制）
       * @param maxWait   连接池最大等待时间（使用负值表示沒有限制）
       * @param maxIdle   连接池中的最大空闲连接
       * @param minIdle   连接池中的最小空闲连接
       * @param host      Redis服务地址
       * @param password  Redis服务密码
       * @param port      Redis服务器连接端口
       */</span>
      <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"stringRedisTemplate"</span><span class="token punctuation">)</span>
      <span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.database}"</span><span class="token punctuation">)</span>
                      <span class="token keyword">int</span> database<span class="token punctuation">,</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.timeout:5}"</span><span class="token punctuation">)</span>
                      <span class="token keyword">long</span> timeout<span class="token punctuation">,</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.lettuce.pool.max-active}"</span><span class="token punctuation">)</span>
                      <span class="token keyword">int</span> maxActive<span class="token punctuation">,</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.lettuce.pool.max-wait}"</span><span class="token punctuation">)</span>
                      <span class="token keyword">int</span> maxWait<span class="token punctuation">,</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.lettuce.pool.max-idle}"</span><span class="token punctuation">)</span>
                      <span class="token keyword">int</span> maxIdle<span class="token punctuation">,</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.lettuce.pool.min-idle}"</span><span class="token punctuation">)</span>
                      <span class="token keyword">int</span> minIdle<span class="token punctuation">,</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.host}"</span><span class="token punctuation">)</span>
                      String host<span class="token punctuation">,</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.password}"</span><span class="token punctuation">)</span>
                      String password<span class="token punctuation">,</span>
              <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.port}"</span><span class="token punctuation">)</span>
                      <span class="token keyword">int</span> port
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// connection config</span>
          RedisStandaloneConfiguration configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisStandaloneConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          configuration<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
          configuration<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>
          configuration<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>RedisPassword<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          configuration<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment" spellcheck="true">// pool config</span>
          GenericObjectPoolConfig genericObjectPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
          genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span>minIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>
          genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>
          genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span>maxWait<span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment" spellcheck="true">// create connection factory</span>
          LettucePoolingClientConfiguration<span class="token punctuation">.</span>LettucePoolingClientConfigurationBuilder builder <span class="token operator">=</span> LettucePoolingClientConfiguration<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          builder<span class="token punctuation">.</span><span class="token function">poolConfig</span><span class="token punctuation">(</span>genericObjectPoolConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
          builder<span class="token punctuation">.</span><span class="token function">commandTimeout</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          LettuceConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span>
                  configuration<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          connectionFactory<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token comment" spellcheck="true">// create redis template</span>
          <span class="token keyword">return</span> <span class="token function">createStringRedisTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token punctuation">}</span>

      <span class="token comment" spellcheck="true">/**
       * 建立StringRedisTemplate
       * 此function不能加 @Bean 否则onnectionFactory 将会一律采用预设值
       */</span>
      <span class="token keyword">private</span> StringRedisTemplate <span class="token function">createStringRedisTemplate</span><span class="token punctuation">(</span>
              RedisConnectionFactory redisConnectionFactory
      <span class="token punctuation">)</span> <span class="token punctuation">{</span>
          StringRedisTemplate redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
          redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>具体默认的配置大家可以参考开篇讲解的上一篇文章,我这里仅仅介绍了自定义额外的连接信息。</p>
<p>首先是第一个连接配置信息,这个名称是first，代表第一组Redis连接池配置信息，功能名称会影响到后续在使用上的操作，如果想要另外取名的话可以将bean加上名称@Bean(name=”您的名字””）<br>在这个函数中接收到框架原型建立的RedisConnectionFactory为参数，将该该工厂传到最底下的createRedisTemplate()来建立StringRedisTemplate，所以如果希望建立的是其他RedisTemplate连接模板的话就可以修改createRedisTemplate()<br>Redis连接池,如此一来要我们开发过程中操作时忘了标注要使用Redis的话，便会采用这默认的连接池,<br>接着来看第二个功能，在这个功能中可以看到设定档中第二条连接池的参数，前面提到我们只需要修改连接池的地址信息，所以关于pool等相关设定还是抓第一条连接池的，这边就看大家有没有需要自行修改〜<br>设置完毕第二条连接池的设置后，进行的事情实际上就是自己建立连接工厂，先设置好Config相关对象，然后创建LettuceConnectionFactory对象，最后和第一个功能相同，将工厂引入createRedisTemplate()来生成RedisTemplate连接池<br>所以实际上我们要做的事情就是，设置定义的连接池就自定义的factory建立RedisTemplate物件来操作，额外的连线就进入设定档后，自己添加factory来生成RedisTemplate连接模板，就是这么简单〜<br>连接池建立好后就是实际的操作啦，操作方式也很简单，就用@Autowired就好，只是要带名称让Spring Boot知道你要使用的是其中RedisTemplate哪个连接池即可</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span>
StringRedisTemplate firstRedisTemplate<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"stringRedisTemplate"</span><span class="token punctuation">)</span>
StringRedisTemplate secondRedisTemplate<span class="token punctuation">;</span></code></pre>
<p>示例代码：<a href="https://github.com/xiaomozhang/personal-life-example/tree/master/example-redis">https://github.com/xiaomozhang/personal-life-example/tree/master/example-redis</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>SpringBoot</tag>
        <tag>Lettuce</tag>
        <tag>multiple RedisTemplate</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 使用logback管理日志</title>
    <url>/2019/03/02/spring-boot-logback/</url>
    <content><![CDATA[<p>Spring Boot在所有内部日志中使用<a href="http://commons.apache.org/proper/commons-logging/">Commons Logging</a>，但是默认配置也提供了对常用日志的支持，如：<a href="http://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html">Java Util Logging</a>，<a href="http://logging.apache.org/log4j/">Log4J</a>, <a href="http://logging.apache.org/log4j/">Log4J2</a>和<a href="http://logback.qos.ch/">Logback</a>。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p>
<p>下面记录一下spring boot中如何按照日志等级拆分，输出到不同文件并做归档处理</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!--
    scan:
    当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。（这个功能可以在不重启运行环境下，调整打印日志的细节，方便定位问题）
    scanPeriod:
    设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:
    当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。

    Logger 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR

    级别排序为： TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR
    --></span>

    <span class="token comment" spellcheck="true">&lt;!-- springProperty 可以读取application.properties文件中的属性值，只有当logback文件名为logback-spring时，该配置才会生效 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProperty</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>context<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.name<span class="token punctuation">"</span></span> <span class="token attr-name">source</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>spring.application.name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProperty</span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>context<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log.home<span class="token punctuation">"</span></span> <span class="token attr-name">source</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logging.home<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- 配置是logback默认的 --></span>
    <span class="token comment" spellcheck="true">&lt;!--&lt;property name="log.home" value="${user.dir}/logs"/>--></span>

    <span class="token comment" spellcheck="true">&lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, --></span>
    <span class="token comment" spellcheck="true">&lt;!-- appender是configuration的子节点，是负责写日志的组件。 --></span>
    <span class="token comment" spellcheck="true">&lt;!-- ConsoleAppender：把日志输出到控制台 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%date{ISO8601} [%thread] %-5level [${app.name}] [%logger{50}] [%file:%line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>


    <span class="token comment" spellcheck="true">&lt;!-- info level --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file_info<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.home}/${app.name}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%date{ISO8601} [%thread] %-5level [${app.name}] [%logger{50}] [%file:%line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>INFO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.home}/${app.name}.info.%d{yyyy-MM-dd}.%i.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 如果按天来回滚，则最大保存时间为10天，10天之前的都将被清理掉 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 日志总保存量为500MB --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">></span></span>500MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--文件达到最大50MB时会被压缩和切割 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span>
                    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!--文件达到 最大50MB时会被压缩和切割 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>50MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--&lt;maxFileSize>50MB&lt;/maxFileSize>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- debug level --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file_debug<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.home}/${app.name}.debug.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%date{ISO8601} [%thread] %-5level [${app.name}] [%logger{50}] [%file:%line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.home}/${app.name}.debug.%d{yyyy-MM-dd}.%i.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 如果按天来回滚，则最大保存时间为10天，10天之前的都将被清理掉 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 日志总保存量为500MB --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">></span></span>500MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--文件达到最大50MB时会被压缩和切割 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span>
                    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!--文件达到 最大50MB时会被压缩和切割 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>50MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--&lt;maxFileSize>50MB&lt;/maxFileSize>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- warn level --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file_warn<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.home}/${app.name}.warn.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%date{ISO8601} [%thread] %-5level [${app.name}] [%logger{100}] [%file:%line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>WARN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.home}/${app.name}.warn.%d{yyyy-MM-dd}.%i.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 如果按天来回滚，则最大保存时间为10天，10天之前的都将被清理掉 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 日志总保存量为500MB --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">></span></span>500MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--文件达到最大50MB时会被压缩和切割 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span>
                    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!--文件达到 最大50MB时会被压缩和切割 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>50MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--&lt;maxFileSize>50MB&lt;/maxFileSize>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>

    <span class="token comment" spellcheck="true">&lt;!-- error level --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file_error<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log.home}/${app.name}.error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%date{ISO8601} [%thread] %-5level [${app.name}] [%logger{100}] [%file:%line] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log.home}/${app.name}.error.%d{yyyy-MM-dd}.%i.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 如果按天来回滚，则最大保存时间为10天，10天之前的都将被清理掉 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!-- 日志总保存量为500MB --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">></span></span>500MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--文件达到最大50MB时会被压缩和切割 --></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeBasedFileNamingAndTriggeringPolicy</span>
                    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token comment" spellcheck="true">&lt;!--文件达到 最大50MB时会被压缩和切割 --></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>50MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeBasedFileNamingAndTriggeringPolicy</span><span class="token punctuation">></span></span>
            <span class="token comment" spellcheck="true">&lt;!--&lt;maxFileSize>50MB&lt;/maxFileSize>--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>


    <span class="token comment" spellcheck="true">&lt;!-- level Options: ERROR, WARN, INFO, DEBUG --></span>
    <span class="token comment" spellcheck="true">&lt;!--
    logger：日志所处的包或者具体的类
    level：日志打印级别
    --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zaxxer.hikari<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.LogbackApplication<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- Options: ERROR, WARN, INFO, DEBUG --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file_debug<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file_info<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file_warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file_error<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
</code></pre>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Aop AspectJ 摘录笔记</title>
    <url>/2020/02/16/spring-aop/</url>
    <content><![CDATA[<p>原文链接：<a href="https://juejin.im/post/5a55af9e518825734d14813f">https://juejin.im/post/5a55af9e518825734d14813f</a></p>
<h2 id="AspectJ"><a href="#AspectJ" class="headerlink" title="@AspectJ"></a>@AspectJ</h2><p><strong>AspectJ是一个AOP框架，它能够对java代码进行AOP编译（一般在编译期进行），让java代码具有AspectJ的AOP功能（当然需要特殊的编译器），可以这样说AspectJ是目前实现AOP框架中最成熟，功能最丰富的语言，更幸运的是，AspectJ与java程序完全兼容，几乎是无缝关联，因此对于有java编程基础的工程师，上手和使用都非常容易.</strong> </p>
<p>其实<strong>AspectJ单独就是一门语言</strong>，它需要专门的编译器(ajc编译器). Spring AOP 与ApectJ的目的一致，都是为了统一处理横切业务，但与AspectJ不同的是，Spring AOP并不尝试提供完整的AOP功能(即使它完全可以实现)，Spring AOP 更注重的是与Spring IOC容器的结合，并结合该优势来解决横切业务的问题，因此在AOP的功能完善方面，相对来说AspectJ具有更大的优势，同时,Spring注意到AspectJ在AOP的实现方式上依赖于特殊编译器(ajc编译器)，因此Spring很机智回避了这点，<strong>转向采用动态代理技术的实现原理来构建Spring AOP的内部机制（动态织入），这是与AspectJ（静态织入）最根本的区别</strong>。在AspectJ 1.5后，引入@Aspect形式的注解风格的开发，Spring也非常快地跟进了这种方式，因此Spring 2.0后便使用了与AspectJ一样的注解。请注意，<strong>Spring 只是使用了与 AspectJ 5 一样的注解，但仍然没有使用 AspectJ 的编译器，底层依是动态代理技术的实现，因此并不依赖于 AspectJ 的编译器</strong>。</p>
<p>所以，Spring AOP虽然是使用了那一套注解，其实实现AOP的底层是使用了动态代理(JDK或者CGLib)来动态植入。</p>
<blockquote>
<ul>
<li>切点:定位到具体方法的一个表达式</li>
<li>切面: 切点+建言</li>
<li>建言(增强):定位到方法后干什么事</li>
</ul>
</blockquote>
<h2 id="前置通知-Before"><a href="#前置通知-Before" class="headerlink" title="前置通知 @Before"></a>前置通知 @Before</h2><p>前置通知通过@Before注解进行标注，并可直接传入切点表达式的值，该通知在目标函数执行前执行，注意JoinPoint，是Spring提供的静态变量，通过joinPoint 参数，可以获取目标对象的信息,如类名称,方法参数,方法名称等，该参数是可选的。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xiaozhangge.aop.service.*.*(..))"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"前置通知 CLASS_METHOD : {}"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"前置通知 ARGS : {}"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="后置通知-AfterReturning"><a href="#后置通知-AfterReturning" class="headerlink" title="后置通知 @AfterReturning"></a>后置通知 @AfterReturning</h2><p>通过@AfterReturning注解进行标注，该函数在目标函数执行完成后执行，并可以获取到目标函数最终的返回值returnVal，当目标函数没有返回值时，returnVal将返回null，必须通过returning = “returnVal”注明参数的名称而且必须与通知函数的参数名称相同。请注意，在任何通知中这些参数都是可选的，需要使用时直接填写即可，不需要使用时，可以完成不用声明出来。<strong>当出现异常则不执行。</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.xiaozhangge.aop.service.*.*(..))"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"returnVal"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">AfterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object returnVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"后置通知 CLASS_METHOD : {}"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"后置通知 ARGS : {}"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"后置通知 returnVal {} "</span><span class="token punctuation">,</span> returnVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="异常通知-AfterThrowing"><a href="#异常通知-AfterThrowing" class="headerlink" title="异常通知 @AfterThrowing"></a>异常通知 @AfterThrowing</h2><p>该通知只有在异常时才会被触发，并由throwing来声明一个接收异常信息的变量，同样异常通知也用于Joinpoint参数，需要时加上即可。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.xiaozhangge.aop.service.*.*(..))"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowable</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"异常: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="最终通知-After"><a href="#最终通知-After" class="headerlink" title="最终通知 @After"></a>最终通知 @After</h2><p>该通知有点类似于finally代码块，只要应用了无论什么情况下都会执行。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xiaozhangge.aop.service.*.*(..))"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"最终通知 CLASS_METHOD : {}"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"最终通知 ARGS : {}"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="环绕通知-Around"><a href="#环绕通知-Around" class="headerlink" title="环绕通知 @Around"></a>环绕通知 @Around</h2><p>环绕通知既可以在目标方法前执行也可在目标方法之后执行，更重要的是环绕通知可以控制目标方法是否指向执行，但即使如此，我们应该尽量以最简单的方式满足需求，在仅需在目标方法前执行时，应该采用前置通知而非环绕通知。第一个参数必须是ProceedingJoinPoint，通过该对象的proceed()方法来执行目标函数，proceed()的返回值就是环绕通知的返回值。同样的，ProceedingJoinPoint对象也是可以获取目标对象的信息、如类名称、方法参数、方法名称等等。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.xiaozhangge.aop.service.*.*(..))"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"环绕通知前...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 执行目标函数</span>
  Object obj <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"环绕通知后....{}"</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="execution-语法"><a href="#execution-语法" class="headerlink" title="execution 语法"></a>execution 语法</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// scope ：方法作用域，如public,private,protect</span>
<span class="token comment" spellcheck="true">// returnt-type：方法返回值类型</span>
<span class="token comment" spellcheck="true">// fully-qualified-class-name：方法所在类的完全限定名称</span>
<span class="token comment" spellcheck="true">// parameters 方法参数</span>
<span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">return</span><span class="token operator">-</span>type<span class="token operator">></span> <span class="token operator">&lt;</span>fully<span class="token operator">-</span>qualified<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">></span><span class="token punctuation">.</span>*<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>
<ul>
<li><code>execution(* com.xiaozhangge.*.*(..))</code> com.xiaozhangge包下所有类的所有方法</li>
<li><code>execution(* com.xiaozhangge.Dog.*(..))</code> Dog类下的所有方</li>
<li><code>execution(* com.xiaozhangge.Dog*.*(..))</code> Dog开头的类下的所有方法</li>
</ul>
<h2 id="切点-Pointcut"><a href="#切点-Pointcut" class="headerlink" title="切点 @Pointcut"></a>切点 @Pointcut</h2><p>在使用切入点时，还可以抽出来一个<code>@Pointcut</code>来供使用，可以避免重复的execution在不同的注解里写很多遍。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.xiaozhangge.aop.service.*.*(..))"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span></code></pre>
<p>使用</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointcut()"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"使用@Pointcut 的前置通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="AOP切面的优先级"><a href="#AOP切面的优先级" class="headerlink" title="AOP切面的优先级"></a>AOP切面的优先级</h2><p>有时候，我们对一个方法会有多个切面的问题，这个时候还会涉及到切面的执行顺序的问题。</p>
<p>我们可以定义每个切面的优先级， Spring 中提供注解 <code>@Order(i)</code> ，当 <code>i</code> 的值越小，优先级越高。</p>
<h2 id="环绕和前后置通知的区别"><a href="#环绕和前后置通知的区别" class="headerlink" title="环绕和前后置通知的区别"></a>环绕和前后置通知的区别</h2><p>对于有变量缓存需求，线程安全的应用场景，前后置通知实现比较困难，而环绕通知实现就非常容易；</p>
<p><a href="https://www.cnblogs.com/yaphetsfang/articles/11378821.html">https://www.cnblogs.com/yaphetsfang/articles/11378821.html</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>AspectJ</tag>
        <tag>Aop</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 整合kafka</title>
    <url>/2020/01/06/spring-boot-kafka/</url>
    <content><![CDATA[<p>关于kafka的介绍这里就不在过多说明，可以看之前写过一遍文章<a href="http://xiaomozhang.github.io/2018/07/28/docker-compose-zk-kafka/">使用docker-compose构建kafka集群</a> 文章里面有关于kafka的一些介绍以及环境搭建，文章中的环境搭建是基于docker和docker-compose的，如果不想通过docker构建，也可以直接下载kafka的安装包直接在机器上启动，之前的文章链接<a href="http://xiaomozhang.github.io/2018/07/30/kafka-note/">kafka常用操作笔记</a>。这里也不再叙述，今天主要来看Spring Boot中如何对接kafka进行数据的消费与生产。</p>
<h2 id="配置POM"><a href="#配置POM" class="headerlink" title="配置POM"></a>配置POM</h2><p>第一步当然是先引入pom依赖</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="配置kafka基本信息"><a href="#配置kafka基本信息" class="headerlink" title="配置kafka基本信息"></a>配置kafka基本信息</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">9092  </span><span class="token comment" spellcheck="true"># 多个使用`,`隔开</span>
    <span class="token key atrule">producer</span><span class="token punctuation">:</span>
      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer
      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringSerializer
      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">0 </span><span class="token comment" spellcheck="true"># 失败重试次数</span>
      <span class="token key atrule">batch-size</span><span class="token punctuation">:</span> <span class="token number">16384</span>
      <span class="token key atrule">buffer-memory</span><span class="token punctuation">:</span> <span class="token number">33554432</span>
      <span class="token key atrule">acks</span><span class="token punctuation">:</span> <span class="token number">-1 </span><span class="token comment" spellcheck="true"># 取值 all, -1, 0, 1</span>
    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
      <span class="token key atrule">enable-auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">auto-commit-interval</span><span class="token punctuation">:</span> <span class="token number">5000</span>
      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> group<span class="token punctuation">-</span>test
      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> earliest <span class="token comment" spellcheck="true"># 消费offset取值earliest,latest,none（默认：latest）</span>
      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer
      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer
<span class="token comment" spellcheck="true"># 自定义producer topic</span>
<span class="token key atrule">kafka</span><span class="token punctuation">:</span>
  <span class="token key atrule">producer</span><span class="token punctuation">:</span>
    <span class="token key atrule">topic</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>producer</code></pre>
<p>详细的配置介绍：<a href="https://www.cnblogs.com/yx88/p/11013338.html"></a><a href="https://www.cnblogs.com/yx88/p/11013338.html">spring-kafka生产者消费者配置详解</a></p>
<h2 id="启动zookeeper和kafka服务"><a href="#启动zookeeper和kafka服务" class="headerlink" title="启动zookeeper和kafka服务"></a>启动zookeeper和kafka服务</h2><h3 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h3><pre class=" language-shell"><code class="language-shell">./bin/zookeeper-server-start.sh  -daemon  config/zookeeper.properties</code></pre>
<h3 id="启动kafka"><a href="#启动kafka" class="headerlink" title="启动kafka"></a>启动kafka</h3><pre class=" language-shell"><code class="language-shell">./bin/kafka-server-start.sh -daemon config/server.properties</code></pre>
<p>通过<code>jps</code>检查进程</p>
<pre class=" language-shell"><code class="language-shell">➜  kafka_2.11-2.3.0 jps
27442
40473 QuorumPeerMain # zookeeper进程
40795 Kafka # kafka进程
40847 Jps</code></pre>
<h2 id="生产消息"><a href="#生产消息" class="headerlink" title="生产消息"></a>生产消息</h2><p>为了方便看数据，我们定义一个<code>Metric</code>类，用来保存数据，并每隔<code>3s</code>往kafka服务器发送一次数据，并且在程序启动以后，通过<code>CommandLineRunner</code>初始化发送</p>
<ul>
<li>metric类</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>SerializedName<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-07.
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Metric</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> String hostname<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> total<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"succ_cnt"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> succCnt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@SerializedName</span><span class="token punctuation">(</span><span class="token string">"succ_rate"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">float</span> succRate<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> status<span class="token punctuation">;</span>

    <span class="token keyword">private</span> LocalDateTime timestamp<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> tags<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>Spring Boot启动类</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>Maps<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>DecimalUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>IdHelper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>JsonParse<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Metric<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>CommandLineRunner<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>core<span class="token punctuation">.</span>KafkaTemplate<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-06.
 * 动态配置多个topic
 * https://github.com/spring-projects/spring-kafka/issues/361
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> KafkaTemplate kafkaTemplate<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 这里对应我们在yml中自定义的配置，用于获取发送数据用的topic
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${kafka.producer.topic}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String producerTopic<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>KafkaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">writer2Kafka</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 每隔3s向kafka发送数据</span>
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writer2Kafka</span><span class="token punctuation">(</span>Random random<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Metric metric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Metric</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        metric<span class="token punctuation">.</span><span class="token function">setHostname</span><span class="token punctuation">(</span><span class="token string">"NODE-"</span> <span class="token operator">+</span> IdHelper<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        metric<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        metric<span class="token punctuation">.</span><span class="token function">setSuccCnt</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">9900</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">float</span> v <span class="token operator">=</span> DecimalUtils<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>metric<span class="token punctuation">.</span><span class="token function">getSuccCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metric<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        metric<span class="token punctuation">.</span><span class="token function">setSuccRate</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        metric<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        metric<span class="token punctuation">.</span><span class="token function">setTimestamp</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> tagMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tagMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cpu_util"</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tagMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mem_util"</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        metric<span class="token punctuation">.</span><span class="token function">setTags</span><span class="token punctuation">(</span>tagMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>producerTopic<span class="token punctuation">,</span> JsonParse<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>metric<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kafkaTemplate<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>启动程序后，如果topic不存在则会自动创建topic（我们并没有关闭自动创建topic），通过kafka-consumeer命令可以看到topic中的数据</p>
<pre class=" language-shell"><code class="language-shell">./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-producer --from-beginning

# 样例数据
{"hostname":"NODE-55","total":6704,"succ_cnt":1441,"succ_rate":0.2149463,"status":0,"timestamp":"2020-01-07T21:29:21.501","tags":{"mem_util":5.2691402,"cpu_util":97.53448}}
{"hostname":"NODE-23","total":9579,"succ_cnt":2191,"succ_rate":0.22872952,"status":0,"timestamp":"2020-01-07T21:29:25.422","tags":{"mem_util":27.203756,"cpu_util":43.626713}}
{"hostname":"NODE-8","total":6889,"succ_cnt":786,"succ_rate":0.114094935,"status":0,"timestamp":"2020-01-07T21:29:28.428","tags":{"mem_util":18.526094,"cpu_util":87.67309}}
{"hostname":"NODE-142","total":8753,"succ_cnt":4227,"succ_rate":0.48292014,"status":0,"timestamp":"2020-01-07T21:29:31.436","tags":{"mem_util":87.426476,"cpu_util":12.49879}}
{"hostname":"NODE-198","total":2261,"succ_cnt":4251,"succ_rate":1.8801415,"status":0,"timestamp":"2020-01-07T21:29:34.444","tags":{"mem_util":5.665392,"cpu_util":69.29729}}
{"hostname":"NODE-46","total":2846,"succ_cnt":6600,"succ_rate":2.3190444,"status":0,"timestamp":"2020-01-07T21:29:37.451","tags":{"mem_util":66.49958,"cpu_util":18.604118}}
{"hostname":"NODE-47","total":5110,"succ_cnt":9650,"succ_rate":1.888454,"status":1,"timestamp":"2020-01-07T21:29:40.459","tags":{"mem_util":92.13784,"cpu_util":60.55072}}
Processed a total of 195 messages</code></pre>
<p>通过命令，我们可以看到kafka中已经有新写进去的数据，那么我们在Spring Boot中又该如何对数据进行消费呢？</p>
<h2 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h2><p>生产数据很简单，消费数据也不难，主要使用Spring Boot提供的注解<code>@KafkaListener</code>，这时候我们需要自定义一个consumer类，刚刚我们是往<code>test-producer</code>这个topic里面写，现在通过程序消费这个topic</p>
<p><code>@KafkaListener</code> 常用的参数</p>
<ul>
<li>topic 设置消费的topic</li>
<li>groupId 指定消费组</li>
</ul>
<h3 id="MetricConsumer"><a href="#MetricConsumer" class="headerlink" title="MetricConsumer"></a>MetricConsumer</h3><pre class=" language-java"><code class="language-java">
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>JsonParse<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Metric<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecord<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>KafkaListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-07.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricConsumer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">"test-producer"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">event</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> kafkaMessage <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kafkaMessage<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            Metric metric <span class="token operator">=</span> JsonParse<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Metric<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费kafka中的数据:{}"</span><span class="token punctuation">,</span> metric<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>消费到的数据结果</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">10.646</span>  INFO <span class="token number">42501</span> <span class="token operator">---</span> <span class="token punctuation">[</span>ntainer#<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>C<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>i<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MetricConsumer        <span class="token punctuation">:</span> 消费kafka中的数据<span class="token punctuation">:</span><span class="token function">Metric</span><span class="token punctuation">(</span>hostname<span class="token operator">=</span>NODE<span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">7849</span><span class="token punctuation">,</span> succCnt<span class="token operator">=</span><span class="token number">9252</span><span class="token punctuation">,</span> succRate<span class="token operator">=</span><span class="token number">1.1787488</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> timestamp<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T21<span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">10.639</span><span class="token punctuation">,</span> tags<span class="token operator">={</span>mem_util<span class="token operator">=</span><span class="token number">83.20216</span><span class="token punctuation">,</span> cpu_util<span class="token operator">=</span><span class="token number">2.36848</span><span class="token operator">}</span><span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">13.651</span>  INFO <span class="token number">42501</span> <span class="token operator">---</span> <span class="token punctuation">[</span>ntainer#<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>C<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>i<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MetricConsumer        <span class="token punctuation">:</span> 消费kafka中的数据<span class="token punctuation">:</span><span class="token function">Metric</span><span class="token punctuation">(</span>hostname<span class="token operator">=</span>NODE<span class="token operator">-</span><span class="token number">199</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">3799</span><span class="token punctuation">,</span> succCnt<span class="token operator">=</span><span class="token number">595</span><span class="token punctuation">,</span> succRate<span class="token operator">=</span><span class="token number">0.15662016</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> timestamp<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T21<span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">13.647</span><span class="token punctuation">,</span> tags<span class="token operator">={</span>mem_util<span class="token operator">=</span><span class="token number">37.34904</span><span class="token punctuation">,</span> cpu_util<span class="token operator">=</span><span class="token number">56.30006</span><span class="token operator">}</span><span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">16.662</span>  INFO <span class="token number">42501</span> <span class="token operator">---</span> <span class="token punctuation">[</span>ntainer#<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>C<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>i<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MetricConsumer        <span class="token punctuation">:</span> 消费kafka中的数据<span class="token punctuation">:</span><span class="token function">Metric</span><span class="token punctuation">(</span>hostname<span class="token operator">=</span>NODE<span class="token operator">-</span><span class="token number">82</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">2797</span><span class="token punctuation">,</span> succCnt<span class="token operator">=</span><span class="token number">3004</span><span class="token punctuation">,</span> succRate<span class="token operator">=</span><span class="token number">1.0740079</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> timestamp<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T21<span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">16.654</span><span class="token punctuation">,</span> tags<span class="token operator">={</span>mem_util<span class="token operator">=</span><span class="token number">87.53287</span><span class="token punctuation">,</span> cpu_util<span class="token operator">=</span><span class="token number">53.029602</span><span class="token operator">}</span><span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">19.671</span>  INFO <span class="token number">42501</span> <span class="token operator">---</span> <span class="token punctuation">[</span>ntainer#<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>C<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>i<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MetricConsumer        <span class="token punctuation">:</span> 消费kafka中的数据<span class="token punctuation">:</span><span class="token function">Metric</span><span class="token punctuation">(</span>hostname<span class="token operator">=</span>NODE<span class="token operator">-</span><span class="token number">102</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">3232</span><span class="token punctuation">,</span> succCnt<span class="token operator">=</span><span class="token number">3041</span><span class="token punctuation">,</span> succRate<span class="token operator">=</span><span class="token number">0.9409035</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> timestamp<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T21<span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">19.664</span><span class="token punctuation">,</span> tags<span class="token operator">={</span>mem_util<span class="token operator">=</span><span class="token number">87.7293</span><span class="token punctuation">,</span> cpu_util<span class="token operator">=</span><span class="token number">51.062298</span><span class="token operator">}</span><span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">22.679</span>  INFO <span class="token number">42501</span> <span class="token operator">---</span> <span class="token punctuation">[</span>ntainer#<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>C<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>i<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MetricConsumer        <span class="token punctuation">:</span> 消费kafka中的数据<span class="token punctuation">:</span><span class="token function">Metric</span><span class="token punctuation">(</span>hostname<span class="token operator">=</span>NODE<span class="token operator">-</span><span class="token number">173</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">904</span><span class="token punctuation">,</span> succCnt<span class="token operator">=</span><span class="token number">759</span><span class="token punctuation">,</span> succRate<span class="token operator">=</span><span class="token number">0.83960176</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> timestamp<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T21<span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">22.672</span><span class="token punctuation">,</span> tags<span class="token operator">={</span>mem_util<span class="token operator">=</span><span class="token number">3.923422</span><span class="token punctuation">,</span> cpu_util<span class="token operator">=</span><span class="token number">36.679466</span><span class="token operator">}</span><span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">25.685</span>  INFO <span class="token number">42501</span> <span class="token operator">---</span> <span class="token punctuation">[</span>ntainer#<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>C<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>i<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MetricConsumer        <span class="token punctuation">:</span> 消费kafka中的数据<span class="token punctuation">:</span><span class="token function">Metric</span><span class="token punctuation">(</span>hostname<span class="token operator">=</span>NODE<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">2250</span><span class="token punctuation">,</span> succCnt<span class="token operator">=</span><span class="token number">8072</span><span class="token punctuation">,</span> succRate<span class="token operator">=</span><span class="token number">3.5875556</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> timestamp<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T21<span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">25.681</span><span class="token punctuation">,</span> tags<span class="token operator">={</span>mem_util<span class="token operator">=</span><span class="token number">71.37522</span><span class="token punctuation">,</span> cpu_util<span class="token operator">=</span><span class="token number">2.6286244</span><span class="token operator">}</span><span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28.696</span>  INFO <span class="token number">42501</span> <span class="token operator">---</span> <span class="token punctuation">[</span>ntainer#<span class="token number">0</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">-</span>C<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>i<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>MetricConsumer        <span class="token punctuation">:</span> 消费kafka中的数据<span class="token punctuation">:</span><span class="token function">Metric</span><span class="token punctuation">(</span>hostname<span class="token operator">=</span>NODE<span class="token operator">-</span><span class="token number">87</span><span class="token punctuation">,</span> total<span class="token operator">=</span><span class="token number">2798</span><span class="token punctuation">,</span> succCnt<span class="token operator">=</span><span class="token number">3955</span><span class="token punctuation">,</span> succRate<span class="token operator">=</span><span class="token number">1.4135096</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> timestamp<span class="token operator">=</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">07</span>T21<span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28.689</span><span class="token punctuation">,</span> tags<span class="token operator">={</span>mem_util<span class="token operator">=</span><span class="token number">98.27863</span><span class="token punctuation">,</span> cpu_util<span class="token operator">=</span><span class="token number">23.622477</span><span class="token operator">}</span><span class="token punctuation">)</span></code></pre>
<p>但是大家发现了一点，就是我们的<code>topic</code>都是写死在程序里面的，不能动态传递读取配置文件，这样的肯定是不可以的，那么如何动态配置又是一个新的问题，有人可能会说这里使用<code>@Value</code>进行注入，但是实际这样是编译不过去的，因为注解属性的值必须是一个constant，解决方法就是使用<code>SPEL</code>表达式</p>
<p>Issues地址：<a href="https://github.com/spring-projects/spring-kafka/issues/361">动态配置多个topic</a></p>
<p>修改以后的代码</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>consumer<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>JsonParse<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Metric<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>ConsumerRecord<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>KafkaListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-07.
 * &lt;p>
 * 动态配置多个topic
 * * https://github.com/spring-projects/spring-kafka/issues/361
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetricConsumer</span> <span class="token punctuation">{</span>


    <span class="token comment" spellcheck="true">/**
     * 注意这里的topic配置
     * 当然groupId也可以使用SPEL表达书进行配置，这里就不在赘述
     *
     * @param record
     */</span>
    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">"#{'${kafka.producer.topic}'}"</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">"metric-group"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">event</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> kafkaMessage <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kafkaMessage<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            Metric metric <span class="token operator">=</span> JsonParse<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Metric<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消费kafka中的数据:{}"</span><span class="token punctuation">,</span> metric<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>修改完成，重启进程，查看依旧可以正常消费到数据，并且topic是动态配置的，如果需要配置多个使用spilt进行分割即可</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要介绍了Spring Boot与kafka 的整合，日常开发中除了kafka还有其他的各种消息中间件，整合方式大同小异，毕竟Spring Boot已经帮我们封装的很好了，唯一需要注意的就是注解属性的动态注入，这里需要使用SPEL表达式。</p>
<p>完整代码：<a href="https://github.com/xiaomozhang/personal-life-example/tree/master/example-kafka">https://github.com/xiaomozhang/personal-life-example/tree/master/example-kafka</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven构建Spring-Boot多模块项目</title>
    <url>/2019/07/27/spring-boot-multi-module-project/</url>
    <content><![CDATA[<p>日常开发过程中肯定会用到maven构建项目，用来管理依赖的jar文件，对于使用maven构建多module项目很多时候还是不怎么熟悉，这篇文章将带着大家从头开始搭建一个使用maven构建的多module项目，并集成常用的项目插件。</p>
<h2 id="使用Spring-Initializr创建项目"><a href="#使用Spring-Initializr创建项目" class="headerlink" title="使用Spring Initializr创建项目"></a>使用Spring Initializr创建项目</h2><p>这一步很简单，直接使用idea自带的功能，创建一个spring-boot项目</p>
<p><img src="/images/multi-module/image-20190715083738989.png" alt="image-20190715083738989"></p>
<p><img src="/images/multi-module/image-20190715084023794.png" alt="image-20190715084023794"></p>
<p><img src="/images/multi-module/image-20190715084104125.png" alt="image-20190715084104125"></p>
<p><img src="/images/multi-module/image-20190715084159602.png" alt="image-20190715084159602"></p>
<p>一个初始化的项目目录结构如下</p>
<p><img src="/images/multi-module/image-20190727103316490.png" alt="image-20190727103316490"></p>
<h2 id="添加新的module"><a href="#添加新的module" class="headerlink" title="添加新的module"></a>添加新的module</h2><p>一个项目中可能需要用到多个子模块，但是又有一些公共的工具类，model之类的，但是又不想传到nexus私服上面去，那么就可以添加子module，然后install以后，提供给当前project来使用了。比如我们需要一个common和一个提供api服务的module，那么可以新建两个module，parent下面的src目录也就没有存在的意义，可以直接删除。在project上面右键新建module，步骤和新建一个maven project是一样的，这里就不做截图展示了。多module的一个完整目录结构如下：</p>
<p><img src="/images/multi-module/image-20190727103756285.png" alt="image-20190727103756285"></p>
<h2 id="module间相互依赖"><a href="#module间相互依赖" class="headerlink" title="module间相互依赖"></a>module间相互依赖</h2><p>多module就是为了方便公共部分被其他module引用，其实引用也就很简单了，就类似于一个正常的maven dep就可以，比如在multi-api这个module中引用multi-common，这样一来，multi-common中的类就能被multi-api正常访问使用了</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaozhangge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>multi-common<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>在multi-common写了一个类叫 <em>com.xiaozhangge.common.util.IdHelper</em> 里面有一个获取UUID的方法，早其他已经引用multi-common的这个module中，只需要直接调用即可</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util<span class="token punctuation">.</span>IdHelper<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-07-27.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplicatiom</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 这里的IdHelper 类，来自于multi-common module</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"uuid [{}]"</span><span class="token punctuation">,</span> IdHelper<span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="打包多module项目"><a href="#打包多module项目" class="headerlink" title="打包多module项目"></a>打包多module项目</h2><p>关于多module项目打包，spring boot升级到2.0以后，打包插件有一些小变化，比如只在multi-common加一个工具类，使用maven自带的打包工具打包，会报错误，但是不影响项目正常运行。日志如下</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Scanning <span class="token keyword">for</span> projects<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Reactor Build Order<span class="token punctuation">:</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> multi<span class="token operator">-</span>common
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> multi<span class="token operator">-</span>api
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>                                                                         
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">:</span>repackage <span class="token punctuation">(</span>repackage<span class="token punctuation">)</span> @ life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span> <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>                                                                         
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building multi<span class="token operator">-</span>common <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>resources<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">:</span>resources <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>resources<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using 'UTF<span class="token operator">-</span><span class="token number">8</span>' encoding to copy filtered resources<span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Copying <span class="token number">0</span> resource
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Copying <span class="token number">0</span> resource
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.8</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">:</span>compile <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>compile<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Changes detected <span class="token operator">-</span> recompiling the <span class="token keyword">module</span><span class="token operator">!</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Compiling <span class="token number">2</span> source files to <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>common<span class="token operator">/</span>target<span class="token operator">/</span>classes
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>resources<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">:</span>testResources <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>testResources<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using 'UTF<span class="token operator">-</span><span class="token number">8</span>' encoding to copy filtered resources<span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> skip non existing resourceDirectory <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>common<span class="token operator">/</span>src<span class="token operator">/</span>test<span class="token operator">/</span>resources
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.8</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">:</span>testCompile <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>testCompile<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Changes detected <span class="token operator">-</span> recompiling the <span class="token keyword">module</span><span class="token operator">!</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>surefire<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.22</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">:</span>test <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>test<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Tests are skipped<span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>jar<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">:</span>jar <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>jar<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building jar<span class="token punctuation">:</span> <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>common<span class="token operator">/</span>target<span class="token operator">/</span>multi<span class="token operator">-</span>common<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">:</span>repackage <span class="token punctuation">(</span>repackage<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Reactor Summary<span class="token punctuation">:</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> SUCCESS <span class="token punctuation">[</span>  <span class="token number">1.037</span> s<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> multi<span class="token operator">-</span>common <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FAILURE <span class="token punctuation">[</span>  <span class="token number">2.536</span> s<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> multi<span class="token operator">-</span>api <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> SKIPPED
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> BUILD FAILURE
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Total <span class="token keyword">time</span><span class="token punctuation">:</span> <span class="token number">4.037</span> s
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Finished at<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">27</span>T10<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token operator">+</span><span class="token number">08</span><span class="token punctuation">:</span><span class="token number">00</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Final Memory<span class="token punctuation">:</span> <span class="token number">35</span>M<span class="token operator">/</span><span class="token number">293</span>M
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Failed to execute goal org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">:</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">:</span>repackage <span class="token punctuation">(</span>repackage<span class="token punctuation">)</span> on project multi<span class="token operator">-</span>common<span class="token punctuation">:</span> Execution repackage of goal org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">:</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">:</span>repackage failed<span class="token punctuation">:</span> Unable to find main <span class="token keyword">class</span> <span class="token operator">-></span> <span class="token punctuation">[</span>Help <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> To see the full stack trace of the errors<span class="token punctuation">,</span> re<span class="token operator">-</span>run Maven <span class="token keyword">with</span> the <span class="token operator">-</span>e switch<span class="token punctuation">.</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Re<span class="token operator">-</span>run Maven using the <span class="token operator">-</span>X switch to enable full debug logging<span class="token punctuation">.</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> For more information about the errors <span class="token keyword">and</span> possible solutions<span class="token punctuation">,</span> please read the following articles<span class="token punctuation">:</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token punctuation">[</span>Help <span class="token number">1</span><span class="token punctuation">]</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> After correcting the problems<span class="token punctuation">,</span> you can resume the build <span class="token keyword">with</span> the command
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span>   mvn <span class="token operator">&lt;</span>goals<span class="token operator">></span> <span class="token operator">-</span>rf <span class="token punctuation">:</span>multi<span class="token operator">-</span>common
</code></pre>
<p>意思就是说我们在multi-common这个module中缺少了main class，那么我们加上在multi-common中添加一个类，只有一个main方法，然后再来打包，依旧报错，日志如下</p>
<pre class=" language-verilog"><code class="language-verilog"><span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span><span class="token number">0_201</span><span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>bin<span class="token operator">/</span>java <span class="token operator">-</span>Dvisualvm<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">375540266385044</span> <span class="token operator">-</span>Dmaven<span class="token punctuation">.</span>multiModuleProjectDirectory<span class="token operator">=/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span> <span class="token string">"-Dmaven.home=/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven3"</span> <span class="token string">"-Dclassworlds.conf=/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven3/bin/m2.conf"</span> <span class="token string">"-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=56994:/Applications/IntelliJ IDEA.app/Contents/bin"</span> <span class="token operator">-</span>Dfile<span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>classpath <span class="token string">"/Applications/IntelliJ IDEA.app/Contents/plugins/maven/lib/maven3/boot/plexus-classworlds-2.5.2.jar"</span> org<span class="token punctuation">.</span>codehaus<span class="token punctuation">.</span>classworlds<span class="token punctuation">.</span>Launcher <span class="token operator">-</span>Didea<span class="token punctuation">.</span>version<span class="token operator">=</span><span class="token number">2018.3</span><span class="token punctuation">.</span><span class="token number">5</span> <span class="token operator">-</span>DskipTests<span class="token operator">=</span>true <span class="token keyword">package</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Scanning <span class="token keyword">for</span> projects<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Reactor Build Order<span class="token punctuation">:</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> multi<span class="token operator">-</span>common
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> multi<span class="token operator">-</span>api
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>                                                                         
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">:</span>repackage <span class="token punctuation">(</span>repackage<span class="token punctuation">)</span> @ life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span> <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>                                                                         
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building multi<span class="token operator">-</span>common <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>resources<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">:</span>resources <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>resources<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using 'UTF<span class="token operator">-</span><span class="token number">8</span>' encoding to copy filtered resources<span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Copying <span class="token number">0</span> resource
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Copying <span class="token number">0</span> resource
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.8</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">:</span>compile <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>compile<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Changes detected <span class="token operator">-</span> recompiling the <span class="token keyword">module</span><span class="token operator">!</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Compiling <span class="token number">2</span> source files to <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>common<span class="token operator">/</span>target<span class="token operator">/</span>classes
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>resources<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">:</span>testResources <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>testResources<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using 'UTF<span class="token operator">-</span><span class="token number">8</span>' encoding to copy filtered resources<span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> skip non existing resourceDirectory <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>common<span class="token operator">/</span>src<span class="token operator">/</span>test<span class="token operator">/</span>resources
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.8</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">:</span>testCompile <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>testCompile<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Changes detected <span class="token operator">-</span> recompiling the <span class="token keyword">module</span><span class="token operator">!</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>surefire<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.22</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">:</span>test <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>test<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Tests are skipped<span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>jar<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">:</span>jar <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>jar<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building jar<span class="token punctuation">:</span> <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>common<span class="token operator">/</span>target<span class="token operator">/</span>multi<span class="token operator">-</span>common<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> spring<span class="token operator">-</span>boot<span class="token operator">-</span>maven<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">:</span>repackage <span class="token punctuation">(</span>repackage<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>common <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Replacing main artifact <span class="token keyword">with</span> repackaged archive
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>                                                                         
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building multi<span class="token operator">-</span>api <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>resources<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">:</span>resources <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>resources<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>api <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using 'UTF<span class="token operator">-</span><span class="token number">8</span>' encoding to copy filtered resources<span class="token punctuation">.</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Copying <span class="token number">0</span> resource
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Copying <span class="token number">0</span> resource
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">---</span> maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.8</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">:</span>compile <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>compile<span class="token punctuation">)</span> @ multi<span class="token operator">-</span>api <span class="token operator">---</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Changes detected <span class="token operator">-</span> recompiling the <span class="token keyword">module</span><span class="token operator">!</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Compiling <span class="token number">1</span> source file to <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>api<span class="token operator">/</span>target<span class="token operator">/</span>classes
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">-------------------------------------------------------------</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> COMPILATION ERROR <span class="token punctuation">:</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">-------------------------------------------------------------</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>api<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>MainApplicatiom<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span> 程序包com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util不存在
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token number">1</span> error
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">-------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Reactor Summary<span class="token punctuation">:</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> SUCCESS <span class="token punctuation">[</span>  <span class="token number">1.499</span> s<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> multi<span class="token operator">-</span>common <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> SUCCESS <span class="token punctuation">[</span>  <span class="token number">2.279</span> s<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> multi<span class="token operator">-</span>api <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> FAILURE <span class="token punctuation">[</span>  <span class="token number">0.540</span> s<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> BUILD FAILURE
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Total <span class="token keyword">time</span><span class="token punctuation">:</span> <span class="token number">4.828</span> s
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Finished at<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">27</span>T10<span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">45</span><span class="token operator">+</span><span class="token number">08</span><span class="token punctuation">:</span><span class="token number">00</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Final Memory<span class="token punctuation">:</span> <span class="token number">38</span>M<span class="token operator">/</span><span class="token number">302</span>M
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">------------------------------------------------------------------------</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Failed to execute goal org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>maven<span class="token punctuation">.</span>plugins<span class="token punctuation">:</span>maven<span class="token operator">-</span>compiler<span class="token operator">-</span>plugin<span class="token punctuation">:</span><span class="token number">3.8</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">:</span>compile <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token operator">-</span>compile<span class="token punctuation">)</span> on project multi<span class="token operator">-</span>api<span class="token punctuation">:</span> Compilation failure
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>tmp<span class="token operator">/</span>life<span class="token operator">-</span>multi<span class="token operator">-</span><span class="token keyword">module</span><span class="token operator">/</span>multi<span class="token operator">-</span>api<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>MainApplicatiom<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span> 程序包com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>common<span class="token punctuation">.</span>util不存在
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token punctuation">[</span>Help <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> To see the full stack trace of the errors<span class="token punctuation">,</span> re<span class="token operator">-</span>run Maven <span class="token keyword">with</span> the <span class="token operator">-</span>e switch<span class="token punctuation">.</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Re<span class="token operator">-</span>run Maven using the <span class="token operator">-</span>X switch to enable full debug logging<span class="token punctuation">.</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> For more information about the errors <span class="token keyword">and</span> possible solutions<span class="token punctuation">,</span> please read the following articles<span class="token punctuation">:</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token punctuation">[</span>Help <span class="token number">1</span><span class="token punctuation">]</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//cwiki.apache.org/confluence/display/MAVEN/MojoFailureException</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> After correcting the problems<span class="token punctuation">,</span> you can resume the build <span class="token keyword">with</span> the command
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span>   mvn <span class="token operator">&lt;</span>goals<span class="token operator">></span> <span class="token operator">-</span>rf <span class="token punctuation">:</span>multi<span class="token operator">-</span>api

Process finished <span class="token keyword">with</span> exit code <span class="token number">1</span>
</code></pre>
<p>这个配置，在spring boot2.0版本之前，其实是完全可以的，在分析错误之前，我们先看一下整个项目的目录结构</p>
<p><img src="/images/multi-module/image-20190727105533948.png" alt="image-20190727105533948"></p>
<p>可以看到在multi-common下面有两个class，在multi-api下面有一个class，那里面的内容就是引用了multi-common中的com.xiaozhangge.common.util.IdHelper，但是现在错误日志却说com.xiaozhangge.common.util不存在，这里就很纳闷了吧，接下来，介绍一下spring boot的打包插件，还得回到parent pom.xml中，使用Spring Initializr创建项目后，默认有一个 spring-boot-maven-plugin 这个maven插件，主要原因就在这里，sprint boot2.0升级以后，对插件也做了相应的升级，如果要解决这个问题，需要在此基础上做一些配置</p>
<pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>
<p>plugin修改以后，关于configuration的配置介绍，可以看spring boot官方的文档</p>
<p><a href="https://docs.spring.io/spring-boot/docs/current/maven-plugin/repackage-mojo.html">maven-plugin</a></p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classifier</span><span class="token punctuation">></span></span>bootJar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>classifier</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">></span></span>${project.build.directory}/boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre>
<p>修改插件以后，在此执行打包命令就可以正常打包，我们再看一下打包以后 target目录的结果，感兴趣的同学可以去相应的目录看一下文件的大小，这里我就不在扩展了，核心日志我也有做标记</p>
<p><img src="/images/multi-module/image-20190727110524269.png" alt="image-20190727110524269"></p>
<p>好了，到这里，一个完整的spring boot多module构建的项目骨架基本完成了，下面介绍一些实用的maven插件，配合spring boot食用更佳。</p>
<p><a href="https://github.com/xiaomozhang/personal-life-multi-module">github</a></p>
<h2 id="常用插件使用介绍"><a href="#常用插件使用介绍" class="headerlink" title="常用插件使用介绍"></a>常用插件使用介绍</h2><h3 id="spring-boot-maven-plugin"><a href="#spring-boot-maven-plugin" class="headerlink" title="spring-boot-maven-plugin"></a>spring-boot-maven-plugin</h3><p>该插件主要用于spring boot项目构建和打包，上面有简单的介绍和官网链接，主要就是配置</p>
<h3 id="templating-maven-plugin"><a href="#templating-maven-plugin" class="headerlink" title="templating-maven-plugin"></a>templating-maven-plugin</h3><p>该插件主要生成一个模板类，可以直接读取maven pom中的artifactId、groupId、version等信息，上面的项目源码中我会做出示例，用了该插件以后，第一次checkout project以后 需要使用maven的 compile构建一下</p>
<h3 id="buildnumber-maven-plugin"><a href="#buildnumber-maven-plugin" class="headerlink" title="buildnumber-maven-plugin"></a>buildnumber-maven-plugin</h3><p>该插件主要解决maven打包以后的时间本地化问题，不然一直会有8小时的时差，一般配合maven-assembly-plugin使用更好</p>
<h3 id="maven-assembly-plugin"><a href="#maven-assembly-plugin" class="headerlink" title="maven-assembly-plugin"></a>maven-assembly-plugin</h3><p>该插件主要用于项目打包以后的文件归档成指定的压缩包，通过配置文件自定义需要归档的文件</p>
<h3 id="maven-compiler-plugin"><a href="#maven-compiler-plugin" class="headerlink" title="maven-compiler-plugin"></a>maven-compiler-plugin</h3><p>该插件主要规范maven project的compiler的jdk版本</p>
<h3 id="git-commit-id-plugin"><a href="#git-commit-id-plugin" class="headerlink" title="git-commit-id-plugin"></a>git-commit-id-plugin</h3><p>该插件用于生产项目的git信息，方便程序读取</p>
<h3 id="maven-jar-plugin、maven-dependency-plugin"><a href="#maven-jar-plugin、maven-dependency-plugin" class="headerlink" title="maven-jar-plugin、maven-dependency-plugin"></a>maven-jar-plugin、maven-dependency-plugin</h3><p>spring boot打包的jar默认是all in one，既一个jar包含所有依赖，可以使用这两个插件，将打出的jar做一个lib的分离</p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 2.x使用mybatis</title>
    <url>/2021/02/01/spring-boot-mybatis/</url>
    <content><![CDATA[<p>orm框架的本质是简化编程中操作数据库的编码，发展到现在基本上就剩两家了，一个是宣称可以不用写一句SQL的hibernate，一个是可以灵活调试动态sql的mybatis,两者各有特点，在企业级系统开发中可以根据需求灵活使用。</p>
<h1 id="使用注解版"><a href="#使用注解版" class="headerlink" title="使用注解版"></a>使用注解版</h1><h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><p>这里使用最新版spring boot【2.0.4.RELEASE】</p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.zz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-sample-mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mybatis-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>mybatis-annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>spring-boot-sample-mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>spring-boot-sample-mybatis project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.reporting.outputEncoding</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis-spring.version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis-spring.version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logback.version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logback.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- web组件 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- mybatis-spring-boot-starter --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token comment" spellcheck="true">&lt;!-- MySQL 驱动--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h2 id="application-yml文件"><a href="#application-yml文件" class="headerlink" title="application.yml文件"></a>application.yml文件</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> life<span class="token punctuation">-</span>spring<span class="token punctuation">-</span>sample<span class="token punctuation">-</span>mybatis
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>10100/life<span class="token punctuation">-</span>mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root

<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.zz.entity

<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></code></pre>
<h2 id="实体对象"><a href="#实体对象" class="headerlink" title="实体对象"></a>实体对象</h2><p>这里为了方便，使用了<a href="https://projectlombok.org/">lombok</a>，不了解的同学可以自己Google看一下</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> deptId<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 使用@Results注解做字段映射
     *
     * @return
     */</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from employee"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"deptId"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"dept_id"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from employee where id=#{id}"</span><span class="token punctuation">)</span>
    Employee <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update employee set name=#{name},birthday=#{birthday},age=#{age},dept_id=#{deptId} where id=#{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from employee where id=#{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into employee(name,birthday,age,dept_id) values(#{name},#{birthday},#{age},#{deptId})"</span><span class="token punctuation">)</span>
    <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="controller通过前端完成增删改查"><a href="#controller通过前端完成增删改查" class="headerlink" title="controller通过前端完成增删改查"></a>controller通过前端完成增删改查</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/emp"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> EmployeeMapper employeeMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"emp:{}"</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Employee <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Employee employee <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"emp:{}"</span><span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> employee<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> Employee employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        employee<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>运行项目以后就可以使用postman工具进行接口请求测试，对应的使用post、get、put等请求，可以自行测试</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">localhost:</span>8080/api/emp/</code></pre>
<p>response</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"二丫"</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
        <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2000-01-01T00:00:00.000+0000"</span><span class="token punctuation">,</span>
        <span class="token property">"deptId"</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"小强 "</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2018-06-01T08:33:52.000+0000"</span><span class="token punctuation">,</span>
        <span class="token property">"deptId"</span><span class="token operator">:</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"史塔克 "</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
        <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2018-06-01T08:33:52.000+0000"</span><span class="token punctuation">,</span>
        <span class="token property">"deptId"</span><span class="token operator">:</span> <span class="token number">3</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"君临城 "</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
        <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2018-06-01T08:33:52.000+0000"</span><span class="token punctuation">,</span>
        <span class="token property">"deptId"</span><span class="token operator">:</span> <span class="token number">4</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"乌鸦 "</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
        <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2018-06-01T08:33:52.000+0000"</span><span class="token punctuation">,</span>
        <span class="token property">"deptId"</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"龙母 "</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
        <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2018-06-01T08:33:52.000+0000"</span><span class="token punctuation">,</span>
        <span class="token property">"deptId"</span><span class="token operator">:</span> <span class="token number">4</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"提利昂 "</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
        <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2018-06-01T08:33:52.000+0000"</span><span class="token punctuation">,</span>
        <span class="token property">"deptId"</span><span class="token operator">:</span> <span class="token number">5</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"小花"</span><span class="token punctuation">,</span>
        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
        <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token string">"2000-01-01T00:00:00.000+0000"</span><span class="token punctuation">,</span>
        <span class="token property">"deptId"</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span></code></pre>
<h1 id="使用xml版"><a href="#使用xml版" class="headerlink" title="使用xml版"></a>使用xml版</h1><p>前面我们可以看到，使用注解版的mybatis可以一行xml文件都不写，但是这个所有的sql都硬编码在mapper文件中，对后期的维护和复用不是特别方便，所有接下来我们看看使用xml完成增删改查</p>
<h2 id="application-yml文件-1"><a href="#application-yml文件-1" class="headerlink" title="application.yml文件"></a>application.yml文件</h2><p>这里和使用注解的区别就是需要指定mapper文件的位置，为了方便我们还有一张dept表，这次使用dept表来进行演示</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> life<span class="token punctuation">-</span>spring<span class="token punctuation">-</span>sample<span class="token punctuation">-</span>mybatis
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>10100/life<span class="token punctuation">-</span>mybatis<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root

<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token comment" spellcheck="true"># 设置实体对象的位置</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.zz.entity
  <span class="token comment" spellcheck="true"># 设置mapper文件存放的位置，这里在classpath目录下的mybatis文件夹中</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/*.xml

<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span></code></pre>
<h2 id="dept实体对象"><a href="#dept实体对象" class="headerlink" title="dept实体对象"></a>dept实体对象</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dept</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="deptMapper对象"><a href="#deptMapper对象" class="headerlink" title="deptMapper对象"></a>deptMapper对象</h2><p>可以看到，我们这里只有mapper接口中的方法声明，没有在上面进行注解操作，那么接下来我们就需要编写mapper.xml文件进行数据库操作，在resources/mybatis文件夹下新建DeptMapper.xml文件</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeptMapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">int</span> <span class="token function">save</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span>Dept dept<span class="token punctuation">)</span><span class="token punctuation">;</span>

    List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Dept <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="mapper-xml文件"><a href="#mapper-xml文件" class="headerlink" title="mapper.xml文件"></a>mapper.xml文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>
<span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zz.mapper.DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base_column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        insert into dept(name) values (#name)
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        update dept set name=#{name} where id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteById<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        delete from dept where id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zz.entity.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select * from dept
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>


    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zz.entity.Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        select * from dept where id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre>
<h2 id="控制器对象"><a href="#控制器对象" class="headerlink" title="控制器对象"></a>控制器对象</h2><p>这里只是为了演示使用xml操作，controller中就不一一写出所有的接口，其实和使用注解完全是一样的</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/dept"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> DeptMapper deptMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dept<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> deptMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这里使用postman工具进行简单的测试，可以看到所有的部门数据全部被查出来了</p>
<pre class=" language-http"><code class="language-http"><span class="token header-name keyword">localhost:</span>8082/api/dept/</code></pre>
<p>response</p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"信息技术部"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"人事部"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"PCB事业部"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"无线终端部"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"测试部"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"后勤保障部"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">"id"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
        <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"鸡犬不宁部"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span></code></pre>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>其实使用spring boot-1.x版本和2.x版本操作基本是一致的</li>
<li>注解方便单表的操作，xml适用于复杂的操作，各有优点，没有最好的，只有最合适的</li>
</ul>
<p>完整代码链接<a href="https://github.com/TyCoding/spring-boot.git">github</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.mybatis.org/mybatis-3/zh/index.html">mybatis</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>redisTemplate常规Jackson2Json Serializer介绍及使用区别</title>
    <url>/2021/02/07/spring-boot-redis-serializer-problems/</url>
    <content><![CDATA[<h2 id="一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据"><a href="#一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据" class="headerlink" title="一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据"></a>一、使用Jackson2JsonRedisSerializer序列化反序列化带泛型的List数据</h2><h3 id="1、使用Jackson2JsonRedisSerializer序列化value的代码："><a href="#1、使用Jackson2JsonRedisSerializer序列化value的代码：" class="headerlink" title="1、使用Jackson2JsonRedisSerializer序列化value的代码："></a>1、使用Jackson2JsonRedisSerializer序列化value的代码：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//redis config基础设置</span>
RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//序列化到redis db</span>
UserToken userToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userToken<span class="token punctuation">.</span><span class="token function">setMobile</span><span class="token punctuation">(</span><span class="token string">"176****6708"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>userToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span>list<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="2、使用Jackson2JsonRedisSerializer序列化后的数据形式："><a href="#2、使用Jackson2JsonRedisSerializer序列化后的数据形式：" class="headerlink" title="2、使用Jackson2JsonRedisSerializer序列化后的数据形式："></a>2、使用Jackson2JsonRedisSerializer序列化后的数据形式：</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">"userId"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">,</span>
    <span class="token property">"mobile"</span><span class="token operator">:</span><span class="token string">"176****6708"</span><span class="token punctuation">,</span>
    <span class="token property">"token"</span><span class="token operator">:</span><span class="token null">null</span><span class="token punctuation">,</span>
    <span class="token property">"platform"</span><span class="token operator">:</span><span class="token null">null</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span></code></pre>
<h3 id="3、使用Jackson2JsonRedisSerializer反序列化时报错"><a href="#3、使用Jackson2JsonRedisSerializer反序列化时报错" class="headerlink" title="3、使用Jackson2JsonRedisSerializer反序列化时报错"></a>3、使用Jackson2JsonRedisSerializer反序列化时报错</h3><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span><span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>userToken1 <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userToken1<span class="token punctuation">.</span><span class="token function">getMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-verilog"><code class="language-verilog">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassCastException<span class="token punctuation">:</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedHashMap cannot be cast to com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>model<span class="token punctuation">.</span>UserToken</code></pre>
<p>原因：序列化带泛型的数据时，会以map的结构进行存储，反序列化是不能将map解析成对象。</p>
<h3 id="4、解决方案：序列化存储时，转成JSON字符串"><a href="#4、解决方案：序列化存储时，转成JSON字符串" class="headerlink" title="4、解决方案：序列化存储时，转成JSON字符串"></a>4、解决方案：序列化存储时，转成JSON字符串</h3><pre class=" language-java"><code class="language-java">UserToken userToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userToken<span class="token punctuation">.</span><span class="token function">setMobile</span><span class="token punctuation">(</span><span class="token string">"176****6708"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>userToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>userToken<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
String list2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span>UserToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>userToken1 <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userToken1<span class="token punctuation">.</span><span class="token function">getMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据"><a href="#二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据" class="headerlink" title="二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据"></a>二、使用GenericJackson2JsonRedisSerializer序列化反序列化带泛型的List数据</h2><h3 id="1、使用GenericJackson2JsonRedisSerializer序列化value的代码："><a href="#1、使用GenericJackson2JsonRedisSerializer序列化value的代码：" class="headerlink" title="1、使用GenericJackson2JsonRedisSerializer序列化value的代码："></a>1、使用GenericJackson2JsonRedisSerializer序列化value的代码：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//redis core serializer</span>
RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//redis option</span>
UserToken userToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userToken<span class="token punctuation">.</span><span class="token function">setMobile</span><span class="token punctuation">(</span><span class="token string">"176****6708"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>userToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">,</span>list<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="2、使用GenericJackson2JsonRedisSerializer序列化后的数据形式："><a href="#2、使用GenericJackson2JsonRedisSerializer序列化后的数据形式：" class="headerlink" title="2、使用GenericJackson2JsonRedisSerializer序列化后的数据形式："></a>2、使用GenericJackson2JsonRedisSerializer序列化后的数据形式：</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>
 <span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span>
     <span class="token punctuation">{</span>
       <span class="token property">"@class"</span><span class="token operator">:</span> <span class="token string">"com.xiaozhangge.model.UserToken"</span><span class="token punctuation">,</span>
       <span class="token property">"userId"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>
       <span class="token property">"mobile"</span><span class="token operator">:</span> <span class="token string">"176****6708"</span><span class="token punctuation">,</span>
       <span class="token property">"token"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>
       <span class="token property">"platform"</span><span class="token operator">:</span> <span class="token null">null</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">]</span></code></pre>
<h3 id="3、使用GenericJackson2JsonRedisSerializer可以正常反序列化"><a href="#3、使用GenericJackson2JsonRedisSerializer可以正常反序列化" class="headerlink" title="3、使用GenericJackson2JsonRedisSerializer可以正常反序列化"></a>3、使用GenericJackson2JsonRedisSerializer可以正常反序列化</h3><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span><span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>userToken1 <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userToken1<span class="token punctuation">.</span><span class="token function">getMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="4、原因："><a href="#4、原因：" class="headerlink" title="4、原因："></a>4、原因：</h3><p>使用GenericJackson2JsonRedisSerializer序列化时，会保存序列化的对象的包名和类名，反序列化时以这个作为标示就可以反序列化成指定的对象。</p>
<h3 id="5、也可以以JSON字符串保存："><a href="#5、也可以以JSON字符串保存：" class="headerlink" title="5、也可以以JSON字符串保存："></a>5、也可以以JSON字符串保存：</h3><pre class=" language-java"><code class="language-java">UserToken userToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userToken<span class="token punctuation">.</span><span class="token function">setMobile</span><span class="token punctuation">(</span><span class="token string">"176****6708"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>userToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>userToken<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
String list2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span>UserToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>userToken1 <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userToken1<span class="token punctuation">.</span><span class="token function">getMobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="三、使用GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo都可以正常序列化反序列化非泛型数组对象。"><a href="#三、使用GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo都可以正常序列化反序列化非泛型数组对象。" class="headerlink" title="三、使用GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo都可以正常序列化反序列化非泛型数组对象。"></a>三、使用GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo都可以正常序列化反序列化非泛型数组对象。</h2><h2 id="四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率："><a href="#四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率：" class="headerlink" title="四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率："></a>四、GenericJackson2JsonRedisSerializer和Jackson2JsonRedisSerializerdo效率：</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> start  <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
UserToken userToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userToken<span class="token punctuation">.</span><span class="token function">setMobile</span><span class="token punctuation">(</span><span class="token string">"176****6708"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayListWithCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>
String data <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
List<span class="token operator">&lt;</span>UserToken<span class="token operator">></span> list2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> UserToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> time <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span></code></pre>
<p>测试后：<br>使用<code>GenericJacksonRedisSerializer</code>序列化反序列化耗时：<code>1467</code><br>使用<code>Jackson2JsonRedisSerializer</code>序列化反序列化耗时：<code>914</code></p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>1、使用Jackson2JsonRedisSerializer需要指明序列化的类Class，可以使用Obejct.class<br>2、使用GenericJacksonRedisSerializer比Jackson2JsonRedisSerializer效率低，占用内存高。<br>3、GenericJacksonRedisSerializer反序列化带泛型的数组类会报转换异常，解决办法存储以JSON字符串存储。<br>4、GenericJacksonRedisSerializer和Jackson2JsonRedisSerializer都是以JSON格式去存储数据，都可以作为Redis的序列化方式。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>RedisTemplate Serializer</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud 配置中⼼</title>
    <url>/2019/04/06/spring-cloud-config/</url>
    <content><![CDATA[<p>在系统架构中，和安全、⽇日志、监控等⾮非功能需求⼀一样，配置管理理也是⼀一种⾮非功能需求。配置中⼼心是整<br>个微服务基础架构体系中的⼀一个组件，它的功能看上去并不不起眼，⽆无⾮非就是简单配置的管理理和存取，但<br>它是整个微服务架构中不不可或缺的⼀一环。另外，配置中⼼心如果真得⽤用好了了，它还能推动技术组织持续交<br>付和DevOps⽂文化转型。</p>
<h1 id="常用配置中心"><a href="#常用配置中心" class="headerlink" title="常用配置中心"></a>常用配置中心</h1><p><img src="/images/config/config.png" alt="img"></p>
<ol>
<li>阿⾥里里巴巴中间件部⻔门很早就⾃自研了了配置中⼼心Diamond，并且是开源的。Diamond对阿⾥里里系统的灵 活稳定性发挥了了⾄至关重要的作⽤用。开源版本的Diamond由于研发时间⽐比较早，使⽤用的技术⽐比较 ⽼老老，功能也不不够完善，⽬目前社区不不热已经不不维护了了。 </li>
<li>Facebook内部也有⼀一整套完善的配置管理理体系，其中⼀一个产品叫Gatekeeper，⽬目前没有开源。 </li>
<li>Netflix内部有⼤大量量的微服务，它的服务的稳定灵活性也重度依赖于配置中⼼心。Netflix开源了了它的配 置中⼼心的客户端，叫变⾊色⻰龙Archaius，⽐比较可惜的是，Netflix没有开源它的配置中⼼心的服务器器端。 </li>
<li>Apollo是携程框架部研发并开源的⼀一款配置中⼼心产品，企业级治理理功能完善，⽬目前社区⽐比较⽕火，在 github上有超过10k星，在国内众多互联⽹网公司有落地案例例。⽬目前<strong>ITOA</strong>也是采⽤用的<strong>Apollo</strong>配置中 ⼼心。 </li>
<li>百度之前也开源过⼀一个叫Disconf的配置中⼼心产品，作者是前百度资深⼯工程师廖绮绮。在Apollo没 有出来之前，Disconf在社区是⽐比较⽕火的，但是⾃自从廖琦琦离开百度之后，他好像没有⾜足够精⼒力力投 ⼊入维护这个项⽬目，⽬目前社区活跃度已经⼤大不不如前。 </li>
<li>以及 Spring Cloud Config，和spring cloud⽣生态是天然⽀支持，当然，我个⼈人觉得作为⼀一个⽣生产级 别的配置中⼼心，spring cloud config还是存在⼀一定的缺陷的，⽐比如⼀一个可视化的管理理界⾯面，没有 spring cloud bus等⽀支持，⽆无法做到热发布等等，但是我们还是简单介绍⼀一下spring cloud config。个⼈人推荐⽣生产使⽤用携程<strong>Apollo</strong>。 </li>
</ol>
<h1 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h1><p>Spring Cloud Config项目是一个解决分布式系统的配置管理方案。它包含了Client和Server两个部分，server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，client通过接口获取数据、并依据此数据初始化自己的应用。Spring cloud使用git或svn存放配置文件，默认情况下使用git。</p>
<p>我们还是以之前的service-producer为基础，并且在项目根目录创建一个cloud-conf-repo文件夹用来存放配置，并且准备三个文件</p>
<pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 开发环境</span>
life-example-producer-dev.properties
<span class="token comment" spellcheck="true"># 测试环境</span>
life-example-producer-test.properties
<span class="token comment" spellcheck="true"># 生产环境</span>
life-example-producer-pro.properties</code></pre>
<p>文件内容为分别为sharplook.instance=sharplook-[dev/test/pro]</p>
<h3 id="Server-端配置"><a href="#Server-端配置" class="headerlink" title="Server 端配置"></a>Server 端配置</h3><h4 id="pom-配置"><a href="#pom-配置" class="headerlink" title="pom 配置"></a>pom 配置</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="属性文件配置"><a href="#属性文件配置" class="headerlink" title="属性文件配置"></a>属性文件配置</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">life-cloud-config</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8899</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8761/eureka/</span>
<span class="token comment" spellcheck="true"># git仓库地址</span>
<span class="token attr-name">spring.cloud.config.server.git.uri</span><span class="token punctuation">=</span>
<span class="token comment" spellcheck="true"># git仓库地址下的相对地址 可以配置多个 用,分割。</span>
<span class="token attr-name">spring.cloud.config.server.git.search-paths</span><span class="token punctuation">=</span>
<span class="token comment" spellcheck="true"># git 仓库用户名</span>
<span class="token attr-name">spring.cloud.config.server.git.username</span><span class="token punctuation">=</span>
<span class="token comment" spellcheck="true"># git 仓库密码</span>
<span class="token attr-name">spring.cloud.config.server.git.password</span><span class="token punctuation">=</span>
<span class="token comment" spellcheck="true"># 如果有分支 可以在这里配置分支名称</span>
<span class="token attr-name">spring.cloud.config.server.git.default-label</span><span class="token punctuation">=</span></code></pre>
<h4 id="启动类配置"><a href="#启动类配置" class="headerlink" title="启动类配置"></a>启动类配置</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>config<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableConfigServer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@EnableConfigServer</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConfigApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>浏览器访问</p>
<pre class=" language-html"><code class="language-html">http://localhost:8899/life-example-producer/dev
http://localhost:8899/life-example-producer/test
http://localhost:8899/life-example-producer/pro</code></pre>
<p>分别会按照我们的配置返回相应的数据，格式如下</p>
<pre class=" language-json"><code class="language-json">// <span class="token number">20190317102625</span>
// http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">8899</span>/life-example-producer/dev

<span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"life-example-producer"</span><span class="token punctuation">,</span>
  <span class="token property">"profiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"dev"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"label"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"131d288174b48601af4461dfde809913c87b91ca"</span><span class="token punctuation">,</span>
  <span class="token property">"state"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>
  <span class="token property">"propertySources"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"https://gitlab.eoitek.net/zengtao/life-cloud-example.git/cloud-conf-repo/life-example-producer-dev.properties"</span><span class="token punctuation">,</span>
      <span class="token property">"source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"sharplook.instance"</span><span class="token operator">:</span> <span class="token string">"sharplook-dev"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>仓库中的配置文件会被转换成web接口，访问可以参照以下的规则：</p>
<ul>
<li>/{application}/{profile}[/{label}]</li>
<li>/{application}-{profile}.yml</li>
<li>/{label}/{application}-{profile}.yml</li>
<li>/{application}-{profile}.properties</li>
<li>/{label}/{application}-{profile}.properties</li>
</ul>
<h3 id="Client配置"><a href="#Client配置" class="headerlink" title="Client配置"></a>Client配置</h3><p>client 主要是其他服务怎么去获取config中的配置信息，还是以service-producer为例</p>
<h4 id="pom-配置-1"><a href="#pom-配置-1" class="headerlink" title="pom 配置"></a>pom 配置</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 添加config客户端依赖 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="属性文件配置-1"><a href="#属性文件配置-1" class="headerlink" title="属性文件配置"></a>属性文件配置</h4><p>application.properties无需修改，新建bootstrap.properties文件，用于配置spring cloud config的服务器信息</p>
<pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置中心地址</span>
<span class="token attr-name">spring.cloud.config.uri</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8899/</span>
<span class="token comment" spellcheck="true"># 使用哪个环境的配置</span>
<span class="token attr-name">spring.cloud.config.profile</span><span class="token punctuation">=</span><span class="token attr-value">dev</span>
<span class="token comment" spellcheck="true"># 当前服务的名称 和 spring.application.name对应即可</span>
<span class="token attr-name">spring.cloud.config.name</span><span class="token punctuation">=</span><span class="token attr-value">${spring.application.name}</span>
<span class="token comment" spellcheck="true"># 读取指定分支配置</span>
<span class="token attr-name">spring.cloud.config.label</span><span class="token punctuation">=</span><span class="token attr-value">master</span></code></pre>
<blockquote>
<p>上面这些与spring-cloud相关的属性必须配置在bootstrap.properties中，config部分内容才能被正确加载。因为config的相关配置会先于application.properties，而bootstrap.properties的加载也是先于application.properties。</p>
</blockquote>
<h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><ul>
<li>无需变更</li>
</ul>
<h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>为了方便测试，还是使用接口访问形式，新建ConfigApi</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>api<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-17.
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/config"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApi</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 这里key 就是自定义在配置中心中的key
     */</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${sharplook.instance}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String instance<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>启动service-producer服务，访问</p>
<pre><code>http://localhost:8080/api/config/</code></pre>
<p>返回</p>
<pre><code>sharplook-dev</code></pre>
<ul>
<li>修改<code>spring.cloud.config.profile=pro</code>配置，重启服务后，访问接口，返现返回结果就是我们在config中的配置</li>
<li>修改配置中心的git中的配置，推送到git以后，再次请求服务，就能看到新的变更配置。</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol>
<li>配置中心是微服务基础架构中不可或缺的核心组件，现代微服务架构和云原生环境，对应用配置管理提出了更高的要求。</li>
<li>配置中心有众多的应用场景，配置中心+功能开关是DevOps最佳实践。用好配置中心，它能帮助技术组织实现持续交付和DevOps文化转型。</li>
<li>Spring Cloud Config相对来说还是达不到生产级别，目前来看携程开源的<a href="https://github.com/ctripcorp/apollo">Apollo</a>配置中心，企业级功能完善，经过大规模生产验证，社区活跃度高，是开源配置中心产品的首选。</li>
</ol>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Eureka 注册中心</title>
    <url>/2019/03/17/spring-cloud-eureka/</url>
    <content><![CDATA[<h1 id="什么是Spring-Cloud"><a href="#什么是Spring-Cloud" class="headerlink" title="什么是Spring Cloud"></a>什么是Spring Cloud</h1><p>Spring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。Spring并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p>
<p>下图是一个基本的Spring Cloud组件架构，核心组件有Eureka、Zuul、Ribbon、Fegin、Hystrix等等。接下来将介绍第一个Eureka组件</p>
<p><img src="/images/spring-cloud-framework.jpg" alt="图片来源于网络，侵删"></p>
<h1 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h1><p>注册中心，管理各种服务功能包括服务的注册、发现、熔断、负载、降级等，比如dubbo admin后台的各种功能。有了服务中心之后，任何一个服务都不能直接去掉用，都需要通过服务中心来调用。通过服务中心来获取服务你不需要关注你调用的项目IP地址，由几台服务器组成，每次直接去服务中心获取可以使用的服务去调用既可。</p>
<p>Eureka是Netflix开源的一款提供服务注册和发现的产品，它提供了完整的Service Registry和Service Discovery实现。也是Spring Cloud体系中最重要最核心的组件之一。</p>
<p>官方介绍:</p>
<blockquote>
<p>Eureka is a REST (Representational State Transfer) based service that is primarily used in the AWS cloud for locating services for the purpose of load balancing and failover of middle-tier servers.</p>
<p>Eureka 是一个基于 REST 的服务，主要在 AWS 云中使用, 定位服务来进行中间层服务器的负载均衡和故障转移。</p>
</blockquote>
<p>用一张图简单说明:</p>
<p><img src="/images/eureka/eureka-architecture-overview.png" alt="图片来源于网络，侵删"></p>
<p>上图简要描述了Eureka的基本架构，由3个角色组成：</p>
<p>1、Eureka Server</p>
<ul>
<li>提供服务注册和发现</li>
</ul>
<p>2、Service Provider</p>
<ul>
<li>服务提供方</li>
<li>将自身服务注册到Eureka，从而使服务消费方能够找到</li>
</ul>
<p>3、Service Consumer</p>
<ul>
<li>服务消费方</li>
<li>从Eureka获取注册服务列表，从而能够消费服务</li>
</ul>
<h2 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h2><p>我们可以用Spring  initialize 构建一个基本的maven项目，基于Spring Cloud Greenwich.SR1 然后自己添加相应的依赖</p>
<h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                        <span class="token comment" spellcheck="true">&lt;!-- 默认goal。在mvn package之后，再次打包可执行的jar/war，同时保留mvn package生成的jar/war为.origin --></span>
                        <span class="token comment" spellcheck="true">&lt;!-- https://docs.spring.io/spring-boot/docs/current/maven-plugin/repackage-mojo.html --></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre>
<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>eureka<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span>EnableEurekaServer<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 添加启动代码中添加@EnableEurekaServer注解
 * Created by xiaozhangge on 2019-03-15.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServerApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EurekaServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="application-properties-配置"><a href="#application-properties-配置" class="headerlink" title="application.properties 配置"></a>application.properties 配置</h3><p>eureka使用8761端口</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">personal-life-cloud-eureka</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8761</span>
<span class="token attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span>
<span class="token comment" spellcheck="true"># 实例名称显示IP</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token comment" spellcheck="true"># 健康检查</span>
<span class="token attr-name">eureka.server.enable-self-preservation</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 清理间隔</span>
<span class="token attr-name">eureka.server.eviction-interval-timer-in-ms</span><span class="token punctuation">=</span><span class="token attr-value">6000</span>
<span class="token comment" spellcheck="true"># 表示是否将自己注册到Eureka Server，默认为true。</span>
<span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 表示是否从Eureka Server获取注册信息，默认为true。</span>
<span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># eureka服务地址 多个地址可使用 , 分隔。</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://${eureka.instance.hostname}:${server.port}/eureka/</span></code></pre>
<p>然后启动项目，访问</p>
<pre><code>http://localhost:8761/</code></pre>
<p><img src="/images/eureka/eureka-instance.png" alt="img"></p>
<h2 id="Eureka-高可用"><a href="#Eureka-高可用" class="headerlink" title="Eureka 高可用"></a>Eureka 高可用</h2><p>注册中心这么关键的服务，如果是单点话，遇到故障就是毁灭性的。在生产中我们可能需要三台或者大于三台的注册中心来保证服务的稳定性，在一个分布式系统中，服务注册中心是最重要的基础部分，理应随时处于可以提供服务的状态。为了维持其可用性，使用集群是很好的解决方案。Eureka通过互相注册的方式来实现高可用的部署，所以我们只需要将Eureke Server配置其他可用的serviceUrl就能实现高可用部署。</p>
<h3 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h3><p>hosts文件中添加以下内容<code>vim /etc/hosts</code></p>
<pre class=" language-shell"><code class="language-shell">127.0.0.1 peer1  
127.0.0.1 peer2  
127.0.0.1 peer3  </code></pre>
<h3 id="修改properties文件"><a href="#修改properties文件" class="headerlink" title="修改properties文件"></a>修改properties文件</h3><ul>
<li>创建 application-peer1.properties 将serviceUrl指向peer2、peer3</li>
</ul>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">life-cloud-eureka</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8761</span>
<span class="token attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token attr-value">peer1</span>
<span class="token comment" spellcheck="true"># 实例名称显示IP</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token comment" spellcheck="true"># 健康检查</span>
<span class="token attr-name">eureka.server.enable-self-preservation</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 清理间隔</span>
<span class="token attr-name">eureka.server.eviction-interval-timer-in-ms</span><span class="token punctuation">=</span><span class="token attr-value">6000</span>
<span class="token comment" spellcheck="true"># 表示是否将自己注册到Eureka Server，默认为true。</span>
<span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 表示是否从Eureka Server获取注册信息，默认为true。</span>
<span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># eureka服务地址 多个地址可使用 , 分隔。</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://peer2:8762/eureka/,http://peer3:8763/eureka/</span></code></pre>
<ul>
<li>创建 application-peer2.properties 将serviceUrl指向peer1、peer3</li>
</ul>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">life-cloud-eureka</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8762</span>
<span class="token attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token attr-value">peer2</span>
<span class="token comment" spellcheck="true"># 实例名称显示IP</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token comment" spellcheck="true"># 健康检查</span>
<span class="token attr-name">eureka.server.enable-self-preservation</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 清理间隔</span>
<span class="token attr-name">eureka.server.eviction-interval-timer-in-ms</span><span class="token punctuation">=</span><span class="token attr-value">6000</span>
<span class="token comment" spellcheck="true"># 表示是否将自己注册到Eureka Server，默认为true。</span>
<span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 表示是否从Eureka Server获取注册信息，默认为true。</span>
<span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># eureka服务地址 多个地址可使用 , 分隔。</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://peer1:8761/eureka/,http://peer3:8763/eureka/</span></code></pre>
<ul>
<li>创建 application-peer3.properties 将serviceUrl指向peer1、peer2</li>
</ul>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">life-cloud-eureka</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8763</span>
<span class="token attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token attr-value">peer3</span>
<span class="token comment" spellcheck="true"># 实例名称显示IP</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token comment" spellcheck="true"># 健康检查</span>
<span class="token attr-name">eureka.server.enable-self-preservation</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 清理间隔</span>
<span class="token attr-name">eureka.server.eviction-interval-timer-in-ms</span><span class="token punctuation">=</span><span class="token attr-value">6000</span>
<span class="token comment" spellcheck="true"># 表示是否将自己注册到Eureka Server，默认为true。</span>
<span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># 表示是否从Eureka Server获取注册信息，默认为true。</span>
<span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token comment" spellcheck="true"># eureka服务地址 多个地址可使用 , 分隔。</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://peer1:8761/eureka/,http://peer2:8762/eureka/</span></code></pre>
<h3 id="打包依次启动"><a href="#打包依次启动" class="headerlink" title="打包依次启动"></a>打包依次启动</h3><pre class=" language-shell"><code class="language-shell">mvn clean package</code></pre>
<ul>
<li>依次启动</li>
</ul>
<pre class=" language-shell"><code class="language-shell">java -jar cloud-eureka-0.0.1.jar --spring.profiles.active=peer1
java -jar cloud-eureka-0.0.1.jar --spring.profiles.active=peer2
java -jar cloud-eureka-0.0.1.jar --spring.profiles.active=peer3</code></pre>
<p>启动完成后，浏览器输入：<a href="http://localhost:8762/">http://localhost:8762/</a> 效果图如下：</p>
<p><img src="/images/eureka/eureka-cluster.png" alt="img"></p>
<p>可以在peer2中看到了peer1、peer3的相关的副本信息。至此eureka集群也已经完成了。</p>
<p>以上完整代码<a href="https://github.com/xiaomozhang/personal-life-cloud-example">github</a></p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>服务提供调用与熔断</title>
    <url>/2019/04/01/spring-cloud-feign/</url>
    <content><![CDATA[<h1 id="服务提供调用与熔断"><a href="#服务提供调用与熔断" class="headerlink" title="服务提供调用与熔断"></a>服务提供调用与熔断</h1><p>之前我们介绍了eureka服务注册中心的搭建，这篇文章介绍一下如何使用eureka服务注册中心，搭建一个简单的服务端注册服务，客户端去调用服务使用的案例。</p>
<p>需要有三个角色：服务注册中心、服务提供者、服务消费者，其中服务注册中心就是我们上一篇的eureka单机版启动既可，流程是首先启动注册中心，服务提供者生产服务并注册到服务中心中，消费者从服务中心中获取服务并执行。</p>
<h2 id="服务提供"><a href="#服务提供" class="headerlink" title="服务提供"></a>服务提供</h2><p>我们假设服务提供者有一个hello方法，可以根据传入的参数，提供输出“hello xxx”的服务</p>
<h3 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h3><p>创建一个springboot项目，pom.xml中添加如下配置，注:旧版的spring cloud和最新版的artifactId不太一样</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>application.properties配置如下：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">life-example-producer</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8761/eureka/</span>
<span class="token comment" spellcheck="true"># 这个配置是为了后面测试负载均衡</span>
<span class="token attr-name">service.instance.name</span><span class="token punctuation">=</span><span class="token attr-value">这是服务器1</span></code></pre>
<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>producer<span class="token punctuation">;</span>

<span class="token keyword">import</span> feign<span class="token punctuation">.</span>Retryer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>EnableHystrix<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@EnableHystrix</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ProducerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Retryer <span class="token function">feignRetryer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// new Retryer.Default(100,TimeUnit.SECONDS.toMillis(1),5);//默认是5次</span>
        <span class="token keyword">return</span> Retryer<span class="token punctuation">.</span>NEVER_RETRY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>api<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexApi</span> <span class="token punctuation">{</span>


    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service.instance.name}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String instanceName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s hello %s - %s"</span><span class="token punctuation">,</span> instanceName<span class="token punctuation">,</span> name<span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>添加@EnableEurekaClient注解后，项目就具有了服务注册的功能。启动工程后，就可以在注册中心的页面看到service-producer服务。</p>
<p><img src="/images/fegin-hystrix/fegin-producer.png" alt="img"></p>
<p>到此服务提供者配置就完成了。</p>
<h2 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h2><h3 id="pom配置-1"><a href="#pom配置-1" class="headerlink" title="pom配置"></a>pom配置</h3><p>和服务提供者一致</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p>application.properties配置如下：</p>
<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">life-example-consumer</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8761/eureka/</span>
<span class="token comment" spellcheck="true"># 开启熔断</span>
<span class="token attr-name">feign.hystrix.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre>
<h3 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>EnableHystrix<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>EnableHystrixDashboard<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>EnableFeignClients<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@EnableHystrix</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableHystrixDashboard</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsumerApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>Feign是一个声明式Web Service客户端。使用Feign能让编写Web Service客户端更加简单, 它的使用方法是定义一个接口，然后在上面添加注解，同时也支持JAX-RS标准的注解。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡。</p>
<h3 id="feign调用实现"><a href="#feign调用实现" class="headerlink" title="feign调用实现"></a>feign调用实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>feign<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>FeignConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>fallback<span class="token punctuation">.</span>ProducerFallback<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * value = 服务提供者的 spring.application.name
 * fallback = 熔断降级处理类
 * configuration = 熔断降级配置
 * &lt;p>
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"life-example-producer"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> ProducerFallback<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> FeignConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProducerService</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 调用的远程方法路由地址需要和服务提供者的一致，并且不要使用GetMapping之类的简化方法
     *
     * @param name
     * @return
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/index"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>
    String <span class="token function">index</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="消费者调用远程服务"><a href="#消费者调用远程服务" class="headerlink" title="消费者调用远程服务"></a>消费者调用远程服务</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>api<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>ProducerService<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/consumer"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexApi</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> ProducerService producerService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> producerService<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>到此，最简单的一个服务注册与调用的例子就完成了。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>依次启动cloud-eureka、service-producer、service-consumer三个项目，并且查看eureka注册情况</p>
<p><img src="/images/fegin-hystrix/fegin-eureka.png" alt="img"></p>
<h3 id="测试服务提供者"><a href="#测试服务提供者" class="headerlink" title="测试服务提供者"></a>测试服务提供者</h3><p>浏览器输入服务提供者路由地址查看是否正常</p>
<pre class=" language-html"><code class="language-html">http://localhost:8080/api/index?name=sharplook</code></pre>
<p>返回结果</p>
<pre class=" language-json"><code class="language-json">hello sharplook - 7359bd06<span class="token number">-8471</span>-4a5d-aa04-7b25b7c13ddb</code></pre>
<p>说明service-producer正常启动，提供的服务也正常。</p>
<h3 id="测试服务调用者"><a href="#测试服务调用者" class="headerlink" title="测试服务调用者"></a>测试服务调用者</h3><p>浏览器输入调用者路由地址，并传递相应的参数</p>
<pre class=" language-html"><code class="language-html">http://localhost:8081/api/consumer/index?name=阿牛</code></pre>
<p>返回结果</p>
<pre class=" language-json"><code class="language-json">hello 阿牛 - f012cf85-9a04-4ae0-b879-42fa860d5015</code></pre>
<p>说明客户端已经成功的通过feign调用了远程服务，并且将结果返回到了浏览器。</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>前面在服务提供者的application.properties文件中配置了一个service.instance.name属性，现在讲程序打包，然后输入不同的instance名称，用来模拟多个服务器</p>
<p>依次启动多个service-producer实例，使用不同的端口以及自定义的service.instance.name</p>
<pre class=" language-shell"><code class="language-shell">java -jar service-producer-0.0.1.jar --server.port=8080 --service.instance.name=这是服务器1

java -jar service-producer-0.0.1.jar --server.port=8081 --service.instance.name=这是服务器2

java -jar service-producer-0.0.1.jar --server.port=8082 --service.instance.name=这是服务器3</code></pre>
<p>启动完成后，会看到eureka中有多个服务提供者</p>
<p><img src="/images/fegin-hystrix/fegin-muilt-producer.png" alt="img"></p>
<p>然后次使用服务消费者去调用</p>
<pre><code>http://localhost:8081/api/consumer/index?name=阿牛</code></pre>
<p>第一次返回结果：</p>
<pre><code>这是服务器1 hello 阿牛 - c280ad85-8475-464e-9856-151c70b8970d</code></pre>
<p>第二次返回结果：</p>
<pre><code>这是服务器2 hello 阿牛 - 4e798f0a-7fda-4063-bb33-bbaaad106f05</code></pre>
<p>第三次返回结果：</p>
<pre><code>这是服务器3 hello 阿牛 - a318c789-9765-4119-a991-b77c72a19ba3</code></pre>
<p>不断的进行测试下去会发现两种结果交替出现，说明两个服务中心自动提供了服务均衡负载的功能。如果我们将服务提供者的数量在提高为N个，测试结果一样，请求会自动轮询到每个服务端来处理。</p>
<h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><h3 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h3><h4 id="雪崩效应"><a href="#雪崩效应" class="headerlink" title="雪崩效应"></a>雪崩效应</h4><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</p>
<p>如果下图所示：A作为服务提供者，B为A的服务消费者，C和D是B的服务消费者。A不可用引起了B的不可用，并将不可用像滚雪球一样放大到C和D时，雪崩效应就形成了。</p>
<p><img src="/images/fegin-hystrix/hystrix-1.png" alt="img"></p>
<h4 id="熔断器（CircuitBreaker）"><a href="#熔断器（CircuitBreaker）" class="headerlink" title="熔断器（CircuitBreaker）"></a>熔断器（CircuitBreaker）</h4><p>熔断器的原理很简单，如同电力过载保护器。它可以实现快速失败，如果它在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器，从而防止应用程序不断地尝试执行可能会失败的操作，使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。熔断器也可以使应用程序能够诊断错误是否已经修正，如果已经修正，应用程序会再次尝试调用操作。</p>
<p>熔断器模式就像是那些容易导致错误的操作的一种代理。这种代理能够记录最近调用发生错误的次数，然后决定使用允许操作继续，或者立即返回错误。 熔断器开关相互转换的逻辑如下图：</p>
<p><img src="/images/fegin-hystrix/hystrix-2.png" alt="img"></p>
<p>熔断器就是保护服务高可用的最后一道防线。</p>
<h4 id="Hystrix特性"><a href="#Hystrix特性" class="headerlink" title="Hystrix特性"></a>Hystrix特性</h4><p><strong>1.断路器机制</strong></p>
<p>断路器很好理解, 当Hystrix Command请求后端服务失败数量超过一定比例(默认50%), 断路器会切换到开路状态(Open). 这时所有请求会直接失败而不会发送到后端服务. 断路器保持在开路状态一段时间后(默认5秒), 自动切换到半开路状态(HALF-OPEN). 这时会判断下一次请求的返回情况, 如果请求成功, 断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). Hystrix的断路器就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力.</p>
<p><strong>2.Fallback</strong></p>
<p>Fallback相当于是降级操作. 对于查询操作, 我们可以实现一个fallback方法, 当请求后端服务出现异常的时候, 可以使用fallback方法返回的值. fallback方法的返回值一般是设置的默认值或者来自缓存.</p>
<p><strong>3.资源隔离</strong></p>
<p>在Hystrix中, 主要通过线程池来实现资源隔离. 通常在使用的时候我们会根据调用的远程服务划分出多个线程池. 例如调用产品服务的Command放入A线程池, 调用账户服务的Command放入B线程池. 这样做的主要优点是运行环境被隔离开了. 这样就算调用服务的代码存在bug或者由于其他原因导致自己所在线程池被耗尽时, 不会对系统的其他服务造成影响. 但是带来的代价就是维护多个线程池会对系统带来额外的性能开销. 如果是对性能有严格要求而且确信自己调用服务的客户端代码不会出问题的话, 可以使用Hystrix的信号模式(Semaphores)来隔离资源.</p>
<h3 id="Feign-Hystrix"><a href="#Feign-Hystrix" class="headerlink" title="Feign Hystrix"></a>Feign Hystrix</h3><p>因为熔断只是作用在服务调用这一端，因此我们根据上一篇的示例代码只需要改动service-consumer项目相关代码就可以。因为，Feign中已经依赖了Hystrix所以在maven配置上不用做任何改动。</p>
<h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">feign.hystrix.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre>
<h4 id="熔断降级处理类"><a href="#熔断降级处理类" class="headerlink" title="熔断降级处理类"></a>熔断降级处理类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>fallback<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>ProducerService<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerFallback</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"life-example-producer 服务不可用 param:%s"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="fallback属性"><a href="#fallback属性" class="headerlink" title="fallback属性"></a>fallback属性</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>feign<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>FeignConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>consumer<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>fallback<span class="token punctuation">.</span>ProducerFallback<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>FeignClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMethod<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestParam<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * value = 服务提供者的 spring.application.name
 * fallback = 熔断降级处理类
 * configuration = 熔断降级配置
 * &lt;p>
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"life-example-producer"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> ProducerFallback<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> configuration <span class="token operator">=</span> FeignConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProducerService</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 调用的远程方法路由地址需要和服务提供者的一致，并且不要使用GetMapping之类的简化方法
     *
     * @param name
     * @return
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/index"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>
    String <span class="token function">index</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>依次启动cloud-eureka、service-producer、service-consumer三个项目，手动停掉服务查看熔断结果</p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>服务网关Zuul集成</title>
    <url>/2019/04/04/spring-cloud-gateway-zuul/</url>
    <content><![CDATA[<h1 id="服务网关-Zuul"><a href="#服务网关-Zuul" class="headerlink" title="服务网关 Zuul"></a>服务网关 Zuul</h1><p>Eureka用于服务的注册于发现，Feign支持服务的调用以及均衡负载，Hystrix处理服务的熔断防止故障扩散。</p>
<p>但是外部的应用如何来访问内部各种各样的微服务呢？在微服务架构中，后端服务往往不直接开放给调用端，而是通过一个API网关根据请求的url，路由到相应的服务。当添加API网关后，在第三方调用端和服务提供方之间就创建了一面墙，这面墙直接与调用方通信进行权限控制，后将请求均衡分发给后台服务端。</p>
<h2 id="Spring-Cloud-Zuul"><a href="#Spring-Cloud-Zuul" class="headerlink" title="Spring Cloud Zuul"></a>Spring Cloud Zuul</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>life-cloud-example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaozhangge<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">life-cloud-zuul</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8888</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8761/eureka/</span>

<span class="token comment" spellcheck="true"># 表示访问xiaozhangge都会跳转到 https://xiaomozhang.github.io/</span>
<span class="token attr-name">zuul.routes.xiaozhangge.path</span><span class="token punctuation">=</span><span class="token attr-value">/xiaozhangge/*</span>
<span class="token attr-name">zuul.routes.xiaozhangge.url</span><span class="token punctuation">=</span><span class="token attr-value">https://xiaomozhang.github.io/</span></code></pre>
<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>zuul<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>EnableEurekaClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>EnableZuulProxy<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>EnableZuulServer<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 * Created by xiaozhangge on 2019-03-16.
 */</span>
<span class="token annotation punctuation">@EnableZuulProxy</span>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuulApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ZuulApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>依次启动cloud-eureka、cloud-zuul</p>
<h3 id="微服务整合"><a href="#微服务整合" class="headerlink" title="微服务整合"></a>微服务整合</h3><p>通过url映射的方式来实现zuul的转发有局限性，比如每增加一个服务就需要配置一条内容，另外后端的服务如果是动态来提供，就不能采用这种方案来配置了。实际上在实现微服务架构时，服务名与服务实例地址的关系在eureka server中已经存在了，所以只需要将Zuul注册到eureka server上去发现其他服务，就可以实现对serviceId的映射。</p>
<h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">life-cloud-zuul</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8888</span>
<span class="token attr-name">eureka.instance.prefer-ip-address</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8761/eureka/</span>

<span class="token comment" spellcheck="true"># 表示访问xiaozhangge 都会跳转到 https://xiaomozhang.github.io/</span>
<span class="token attr-name">zuul.routes.xiaozhangge.path</span><span class="token punctuation">=</span><span class="token attr-value">/xiaozhangge/**</span>
<span class="token attr-name">zuul.routes.xiaozhangge.url</span><span class="token punctuation">=</span><span class="token attr-value">https://xiaomozhang.github.io/</span>

<span class="token comment" spellcheck="true"># 添加微服务路由地址</span>
<span class="token attr-name">zuul.routes.producer.path</span><span class="token punctuation">=</span><span class="token attr-value">/producer/**</span>
<span class="token attr-name">zuul.routes.producer.service-id</span><span class="token punctuation">=</span><span class="token attr-value">life-example-producer</span></code></pre>
<h4 id="启动服务提供者"><a href="#启动服务提供者" class="headerlink" title="启动服务提供者"></a>启动服务提供者</h4><pre class=" language-shell"><code class="language-shell">java -jar service-producer-0.0.1.jar --server.port=8080 --service.instance.name=这是服务器1

java -jar service-producer-0.0.1.jar --server.port=8081 --service.instance.name=这是服务器2

java -jar service-producer-0.0.1.jar --server.port=8082 --service.instance.name=这是服务器3</code></pre>
<p>访问</p>
<pre class=" language-html"><code class="language-html">http://localhost:8888/producer/api/index?name=维尼熊</code></pre>
<p>会发现自动负载均衡，将每个请求分发到不同的服务，至此，整个zuul和微服务整合也就完成了。</p>
<h2 id="spring-cloud-gateway"><a href="#spring-cloud-gateway" class="headerlink" title="spring cloud gateway"></a>spring cloud gateway</h2><p><a href="http://cxytiandi.com/article">猿天地spring cloud gateway系列教程</a></p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring mvc文件上传下载</title>
    <url>/2019/01/29/spring-file-upload-download/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>文件上传是项目开发中最常见的功能。为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器。<br>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。<br>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。而Spring MVC则提供了更简单的封装。<br>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。 </p>
<h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>api<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>MultipartConfigFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamResource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpHeaders<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>MediaType<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ResponseEntity<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64Utils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>FileCopyUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>unit<span class="token punctuation">.</span>DataSize<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>MultipartFile<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>MultipartConfigElement<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletOutputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Path<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * # 禁用 thymeleaf 缓存
 * spring.thymeleaf.cache=false
 * &lt;p>
 * # 是否支持批量上传   (默认值 true)
 * spring.servlet.multipart.enabled=true
 * &lt;p>
 * # 上传文件的临时目录 （一般情况下不用特意修改）
 * spring.servlet.multipart.location=
 * &lt;p>
 * # 上传文件最大为 1M （默认值 1M 根据自身业务自行控制即可）
 * spring.servlet.multipart.max-file-size=1048576
 * &lt;p>
 * # 上传请求最大为 10M（默认值10M 根据自身业务自行控制即可）
 * spring.servlet.multipart.max-request-size=10485760
 * &lt;p>
 * # 文件大小阈值，当大于这个阈值时将写入到磁盘，否则存在内存中，（默认值0 一般情况下不用特意修改）
 * spring.servlet.multipart.file-size-threshold=0
 * &lt;p>
 * # 判断是否要延迟解析文件（相当于懒加载，一般情况下不用特意修改）
 * spring.servlet.multipart.resolve-lazily=false
 * &lt;p>
 * Created by xiaozhangge on 2018/12/6.
 * http://localhost:8080/api/file/download2stream
 * http://localhost:8080/api/file/download
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/file"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileApi</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FileApi<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String FILE_NAME <span class="token operator">=</span> <span class="token string">"main.csv"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String FILE_CONTENT <span class="token operator">=</span> <span class="token string">"key,value"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String FILE_PATH <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span> <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> <span class="token string">"tmp"</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>FILE_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 通过 OutputStream 每次往客户端写 buffer
     *
     * @param response
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        InputStream inStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>FILE_CONTENT<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 设置强制下载不打开</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/force-download"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 设置content-type</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 设置文件名</span>
        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>CONTENT_DISPOSITION<span class="token punctuation">,</span> <span class="token string">"attachment;fileName="</span> <span class="token operator">+</span> FILE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        ServletOutputStream outStream <span class="token operator">=</span> null<span class="token punctuation">;</span>
        BufferedInputStream bufferStream <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            outStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bufferStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>inStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bufferStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                outStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            outStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">close</span><span class="token punctuation">(</span>outStream<span class="token punctuation">,</span> bufferStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 流式下载
     *
     * @return
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download2stream"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Resource<span class="token operator">></span> <span class="token function">download2stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        InputStream inStream <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            inStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>FILE_CONTENT<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Resource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamResource</span><span class="token punctuation">(</span>inStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>CONTENT_DISPOSITION<span class="token punctuation">,</span> <span class="token string">"attachment;fileName="</span> <span class="token operator">+</span> FILE_NAME<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"下载异常:"</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">close</span><span class="token punctuation">(</span>inStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * multipart/form-data
     *
     * @param file
     * @return
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 获取 resources 目录</span>
        <span class="token comment" spellcheck="true">// String realPath = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getServletContext().getRealPath("");</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[文件类型] - [{}]"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[文件名称] - [{}]"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[文件大小] - [{}]"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String fileName <span class="token operator">=</span> FILE_PATH <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Path path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Files<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>

            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"contentType"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fileSize"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 多文件上传
     *
     * @param files
     * @return
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/multi-file-upload"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">multiFileUpload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile<span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>files <span class="token operator">==</span> null <span class="token operator">||</span> files<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> results <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>MultipartFile file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                String fileName <span class="token operator">=</span> FILE_PATH <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"contentType"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fileSize"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> results<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * Base64文件上传
     * &lt;p>
     * base64编码： http://base64.xpcha.com/pic.html
     *
     * @param base64
     * @return
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/base64-upload"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">uploadBase64</span><span class="token punctuation">(</span>String base64<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 防止有的传了 data:image/png;base64, 有的没传的情况</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"base64,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Base64Utils<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// BASE64 方式的 格式和名字需要自己控制（如 png 图片编码后前缀就会是 data:image/png;base64,）</span>
        File tempFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>FILE_PATH <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            FileCopyUtils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> tempFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fileSize"</span><span class="token punctuation">,</span> tempFile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> tempFile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">,</span> tempFile<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Closeable<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> closeables<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>closeables <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>Closeable io <span class="token operator">:</span> closeables<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>io <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"io close exception {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> MultipartConfigElement <span class="token function">multipartConfigElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        MultipartConfigFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultipartConfigFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 最大支持文件大小</span>
        factory<span class="token punctuation">.</span><span class="token function">setMaxFileSize</span><span class="token punctuation">(</span>DataSize<span class="token punctuation">.</span><span class="token function">ofMegabytes</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 最大支持请求大小</span>
        factory<span class="token punctuation">.</span><span class="token function">setMaxRequestSize</span><span class="token punctuation">(</span>DataSize<span class="token punctuation">.</span><span class="token function">ofMegabytes</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 支持文件写入磁盘.</span>
        <span class="token comment" spellcheck="true">// factory.setFileSizeThreshold();</span>

        <span class="token comment" spellcheck="true">// Sets the directory location where files will be stored.</span>
        <span class="token comment" spellcheck="true">// factory.setLocation("上传文件的临时目录");</span>
        <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">createMultipartConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】Spring Kafka 笔记</title>
    <url>/2020/08/17/spring-kafka-note/</url>
    <content><![CDATA[<p><a href="http://blog.seasedge.cn/archives/8.html">Spring Kafka（一）Kafka，你好</a></p>
<p><a href="http://blog.seasedge.cn/archives/9.html">Spring Kafka（二）快速入门，只需三秒</a></p>
<p><a href="http://blog.seasedge.cn/archives/13.html">Spring Kafka（三）操作Topic以及Kafka Tool 2的使用</a></p>
<p><a href="http://blog.seasedge.cn/archives/15.html">Spring Kafka（四）KafkaTemplate发送消息及结果回调</a></p>
<p><a href="http://blog.seasedge.cn/archives/44.html">Spring Kafka（五）使用Kafka事务的两种方式</a></p>
<p><a href="http://blog.seasedge.cn/archives/46.html">Spring Kafka（六）@KafkaListener的花式操作</a></p>
<p><a href="http://blog.seasedge.cn/archives/47.html">Spring Kafka（七） 实现消息转发以及ReplyTemplate</a></p>
<p><a href="http://blog.seasedge.cn/archives/49.html">Spring Kafka（八）KafkaListener定时启动（禁止自启动）</a></p>
<p><a href="http://blog.seasedge.cn/archives/50.html">Spring Kafka（九）配置消息过滤器</a></p>
<p><a href="http://blog.seasedge.cn/archives/51.html">Spring Kafka（十）ConsumerAwareErrorHandler异常处理器</a></p>
]]></content>
      <categories>
        <category>Kafka</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 结合 Quartz 设置定时任务</title>
    <url>/2019/01/29/spring-quartz-scheduled/</url>
    <content><![CDATA[<h2 id="Spring-Boot-原生-Scheduled"><a href="#Spring-Boot-原生-Scheduled" class="headerlink" title="Spring Boot 原生 @Scheduled"></a>Spring Boot 原生 @Scheduled</h2><h3 id="任务配置"><a href="#任务配置" class="headerlink" title="任务配置"></a>任务配置</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledTask</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 表示每隔5000ms，Spring scheduling会调用一次该方法，不论该方法的执行时间是多少</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 表示当方法执行完毕5000ms后，Spring scheduling会再次调用该方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTimeAfterSleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 0 1 * * *"</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">// 提供了一种通用的定时任务表达式，这里表示每隔5秒执行一次，更加详细的信息可以参考cron表达式。</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTimeCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token comment" spellcheck="true">// 告诉Spring创建一个task executor，如果我们没有这个标注，所有@Scheduled标注都不会执行</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>App<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="Spring-Boot-结合-Quartz-实现动态设置定时任务"><a href="#Spring-Boot-结合-Quartz-实现动态设置定时任务" class="headerlink" title="Spring Boot 结合 Quartz 实现动态设置定时任务"></a>Spring Boot 结合 Quartz 实现动态设置定时任务</h2><ul>
<li>需要spring boot版本大于2.x</li>
<li><a href="http://www.quartz-scheduler.org/">http://www.quartz-scheduler.org/</a></li>
</ul>
<h3 id="添加依赖配置"><a href="#添加依赖配置" class="headerlink" title="添加依赖配置"></a>添加依赖配置</h3><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// implementation 'org.quartz-scheduler:quartz:2.3.0'</span>
<span class="token comment" spellcheck="true">// implementation 'org.quartz-scheduler:quartz-jobs:2.3.0'</span>
implementation <span class="token string">'org.springframework.boot:spring-boot-starter-quartz'</span></code></pre>
<h3 id="配置-quartzJobFactory-和-scheduler-对象"><a href="#配置-quartzJobFactory-和-scheduler-对象" class="headerlink" title="配置 quartzJobFactory 和 scheduler 对象"></a>配置 quartzJobFactory 和 scheduler 对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>configure<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>Scheduler<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>TriggerFiredBundle<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AutowireCapableBeanFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContextAware<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>SchedulerFactoryBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>SpringBeanJobFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019/1/29.
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzConfiguration</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 解决Job中注入Spring Bean为null的问题
     */</span>
    <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"quartzJobFactory"</span><span class="token punctuation">)</span>
    <span class="token keyword">class</span> <span class="token class-name">QuartzJobFactory</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBeanJobFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 这个对象Spring会帮我们自动注入进来,也属于Spring技术范畴.</span>
        <span class="token annotation punctuation">@Autowired</span>
        <span class="token keyword">private</span> AutowireCapableBeanFactory capableBeanFactory<span class="token punctuation">;</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> Object <span class="token function">createJobInstance</span><span class="token punctuation">(</span>TriggerFiredBundle bundle<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 调用父类的方法</span>
            <span class="token keyword">final</span> Object jobInstance <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createJobInstance</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 进行注入,这属于Spring的技术,不清楚的可以查看Spring的API.</span>
            capableBeanFactory<span class="token punctuation">.</span><span class="token function">autowireBean</span><span class="token punctuation">(</span>jobInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> jobInstance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token comment" spellcheck="true">/**
     * 注入scheduler到spring，在下面quartzManege会用到
     *
     * @return
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"scheduler"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Scheduler <span class="token function">scheduler</span><span class="token punctuation">(</span>SchedulerFactoryBean schedulerFactoryBean<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// schedulerFactoryBean.setJobFactory(quartzJobFactory);</span>
        <span class="token comment" spellcheck="true">// 该方法会再次初始化 quartz 这里的初始化任务交给spring容器即可</span>
        <span class="token comment" spellcheck="true">// schedulerFactoryBean.afterPropertiesSet();</span>
        Scheduler scheduler <span class="token operator">=</span> schedulerFactoryBean<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> scheduler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="新建一个bean对象，用来保存基本的job信息"><a href="#新建一个bean对象，用来保存基本的job信息" class="headerlink" title="新建一个bean对象，用来保存基本的job信息"></a>新建一个bean对象，用来保存基本的job信息</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>bean<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>NoArgsConstructor<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019/1/18.
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzJob</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer STATUS_RUNNING <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer STATUS_NOT_RUNNING <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer CONCURRENT_IS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer CONCURRENT_NOT <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> String jobId<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * cron 表达式
     */</span>
    <span class="token keyword">private</span> String cronExpression<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 任务调用的方法名
     */</span>
    <span class="token keyword">private</span> String methodName<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 任务是否有状态
     */</span>
    <span class="token keyword">private</span> Integer isConcurrent<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 描述
     */</span>
    <span class="token keyword">private</span> String description<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 任务执行时调用哪个类的方法 包名+类名，完全限定名
     */</span>
    <span class="token keyword">private</span> String beanName<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 触发器名称
     */</span>
    <span class="token keyword">private</span> String triggerName<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 任务状态
     */</span>
    <span class="token keyword">private</span> Integer jobStatus<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 任务名
     */</span>
    <span class="token keyword">private</span> String jobName<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="新建一个统一的QuartzManager，用来统一管理job"><a href="#新建一个统一的QuartzManager，用来统一管理job" class="headerlink" title="新建一个统一的QuartzManager，用来统一管理job"></a>新建一个统一的QuartzManager，用来统一管理job</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>configure<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>QuartzJob<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobBuilder<span class="token punctuation">.</span>newJob<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>TriggerBuilder<span class="token punctuation">.</span>newTrigger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019/1/18.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzManager</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"scheduler"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Scheduler scheduler<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addJob</span><span class="token punctuation">(</span>QuartzJob job<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 通过类名获取实体类，即要执行的定时任务的类</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Job jobEntity <span class="token operator">=</span> <span class="token punctuation">(</span>Job<span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 通过实体类和任务名创建 JobDetail</span>
        JobDetail jobDetail <span class="token operator">=</span> <span class="token function">newJob</span><span class="token punctuation">(</span>jobEntity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 通过触发器名和cron 表达式创建 Trigger</span>
        Trigger cronTrigger <span class="token operator">=</span> <span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getTriggerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 执行定时任务</span>
        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> cronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 更新job cron表达式
     *
     * @param quartzJob
     * @throws SchedulerException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateJobCron</span><span class="token punctuation">(</span>QuartzJob quartzJob<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>
        TriggerKey triggerKey <span class="token operator">=</span> TriggerKey<span class="token punctuation">.</span><span class="token function">triggerKey</span><span class="token punctuation">(</span>quartzJob<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        CronTrigger trigger <span class="token operator">=</span> <span class="token punctuation">(</span>CronTrigger<span class="token punctuation">)</span> scheduler<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        CronScheduleBuilder scheduleBuilder <span class="token operator">=</span> CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>quartzJob<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        trigger <span class="token operator">=</span> trigger<span class="token punctuation">.</span><span class="token function">getTriggerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>scheduleBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">rescheduleJob</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 删除一个job
     *
     * @param quartzJob
     * @throws SchedulerException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteJob</span><span class="token punctuation">(</span>QuartzJob quartzJob<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>
        JobKey jobKey <span class="token operator">=</span> JobKey<span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span>quartzJob<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">deleteJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 恢复一个job
     *
     * @param quartzJob
     * @throws SchedulerException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resumeJob</span><span class="token punctuation">(</span>QuartzJob quartzJob<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>
        JobKey jobKey <span class="token operator">=</span> JobKey<span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span>quartzJob<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">resumeJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 立即执行job
     *
     * @param quartzJob
     * @throws SchedulerException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runAJobNow</span><span class="token punctuation">(</span>QuartzJob quartzJob<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>
        JobKey jobKey <span class="token operator">=</span> JobKey<span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span>quartzJob<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">triggerJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 暂停一个job
     *
     * @param quartzJob
     * @throws SchedulerException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pauseJob</span><span class="token punctuation">(</span>QuartzJob quartzJob<span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>
        JobKey jobKey <span class="token operator">=</span> JobKey<span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span>quartzJob<span class="token punctuation">.</span><span class="token function">getJobName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">pauseJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="新建job任务，实现org-quartz-Job接口"><a href="#新建job任务，实现org-quartz-Job接口" class="headerlink" title="新建job任务，实现org.quartz.Job接口"></a>新建job任务，实现org.quartz.Job接口</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>schedule<span class="token punctuation">;</span>


<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>JobExecutionContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>QuartzJobBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span>DateTimeFormatter<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019/1/29.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleTask</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"execute task:{}"</span><span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINA<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="启动类配置"><a href="#启动类配置" class="headerlink" title="启动类配置"></a>启动类配置</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>quartz<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>QuartzJob<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>QuartzManager<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>SchedulerException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>CommandLineRunner<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019/1/18.
 */</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzSchedulerApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> QuartzManager quartzManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>QuartzSchedulerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            String scheduleTask <span class="token operator">=</span> <span class="token string">"com.xiaozhangge.quartz.schedule.ScheduleTask"</span><span class="token punctuation">;</span>
            QuartzJob job <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuartzJob</span><span class="token punctuation">(</span>scheduleTask<span class="token punctuation">,</span>
                    <span class="token string">"*/1 * * * * ?"</span><span class="token punctuation">,</span>
                    scheduleTask<span class="token punctuation">,</span>
                    <span class="token number">1</span><span class="token punctuation">,</span>
                    scheduleTask<span class="token punctuation">,</span>
                    scheduleTask<span class="token punctuation">,</span>
                    scheduleTask<span class="token punctuation">,</span>
                    QuartzJob<span class="token punctuation">.</span>STATUS_NOT_RUNNING<span class="token punctuation">,</span>
                    scheduleTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
            quartzManager<span class="token punctuation">.</span><span class="token function">addJob</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SchedulerException</span> <span class="token operator">|</span> ClassNotFoundException <span class="token operator">|</span> IllegalAccessException <span class="token operator">|</span> InstantiationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5-源码构建编译</title>
    <url>/2021/10/16/spring5-build-soure-code/</url>
    <content><![CDATA[<h3 id="一-准备工作"><a href="#一-准备工作" class="headerlink" title="一. 准备工作"></a>一. 准备工作</h3><h5 id="1-编译环境"><a href="#1-编译环境" class="headerlink" title="1.编译环境"></a>1.编译环境</h5><p>maven<br>jdk8<br>idea</p>
<h5 id="2-编译版本"><a href="#2-编译版本" class="headerlink" title="2. 编译版本:"></a>2. 编译版本:</h5><p>SpringV5.2.7RELEASE+GradleWapper+jdk1.8.0_131编译</p>
<h3 id="二-源码下载"><a href="#二-源码下载" class="headerlink" title="二. 源码下载"></a>二. 源码下载</h3><p>git地址: <a href="https://github.com/spring-projects/spring-framework"><code>spring-framework</code></a></p>
<p>Spring的源码是发布在github上面的</p>
<blockquote>
<p>　　注: 需要连接加速科学上网软件才行, 不然git特别慢</p>
</blockquote>
<p><img src="/images/spring5-build-soure-code/spring5-build-soure-code-spring-framework-release-tags.png" alt="spring-framework-release-tags.png"><br><img src="/images/spring5-build-soure-code/spring5-build-soure-code-spring-github-page-index.png" alt="spring-github-page-index.png"><br>版本号介绍<br><img src="/images/spring5-build-soure-code/spring5-build-soure-code-new-version-update.png" alt="new-version-update.png"><br>M：M1，M2，…中的M是milestone的简写，意思是里程碑，代表着有重大改进的版本。</p>
<h3 id="三-构建工作准备"><a href="#三-构建工作准备" class="headerlink" title="三. 构建工作准备"></a>三. 构建工作准备</h3><p>安装源码有两种方式:</p>
<p>第一种: 下载spring使用的对应的Gradle版本,安装</p>
<p>第二种: 使用自带的gradleWrapper.</p>
<p>备注: 我在导入项目到idea的时候, 不能够选择使用的gradle编译类型(使用系统的gradle还是gradleWrapper), 所以, 我是自己安装了Gradle, 然后编译的.</p>
<p>查看spring源码中gradle的版本. 下载对应版本的gradle.</p>
<p>在gradle-wrapper.properties中查看版本号<br><img src="/images/spring5-build-soure-code/spring5-build-soure-code-gradle-wrapper-properties.png" alt="gradle-wrapper-properties.png"><br>我们看看到spring5.2.7.RELEASE对应的gradle版本是5.6.4-bin.zip. 我们下载这个文件.</p>
<p>如果使用方法二, gradleWrapper会自动下载, 这是官方推荐的方式. window平台的idea可以选择使用gradleWrapper的方式.</p>
<h3 id="四-编译Spring源码项目"><a href="#四-编译Spring源码项目" class="headerlink" title="四. 编译Spring源码项目"></a>四. 编译Spring源码项目</h3><h5 id="1-修改build-gradle"><a href="#1-修改build-gradle" class="headerlink" title="1. 修改build.gradle"></a>1. 修改build.gradle</h5><p>这个文件就相当于我们Maven的pom.xml 管理项目的依赖等配置</p>
<pre class=" language-properties"><code class="language-properties">设置镜像
<span class="token attr-name">repositories</span> <span class="token attr-value">{</span>
<span class="token attr-name">            maven{</span> <span class="token attr-value">url 'https://maven.aliyun.com/nexus/content/groups/public/'}</span>
<span class="token attr-name">            maven{</span> <span class="token attr-value">url 'https://maven.aliyun.com/nexus/content/repositories/jcenter'}</span>
            mavenCentral()
<span class="token attr-name">            maven</span> <span class="token attr-value">{ url "https://repo.spring.io/libs-spring-framework-build" }</span>
        }</code></pre>
<h4 id="2-编译compileTestJava模块"><a href="#2-编译compileTestJava模块" class="headerlink" title="2. 编译compileTestJava模块"></a>2. 编译compileTestJava模块</h4><p>进入到源码所在文件夹, 执行一下命令. 我的是mac本, 所以需要加./, 如果是windows本就不需要加</p>
<pre class=" language-shell"><code class="language-shell">./gradlew :spring-oxm:compileTestJava</code></pre>
<p>配置了镜像很快（一两分钟）就能编译完成, 如果要很久说明你的镜像没起作用</p>
<h5 id="3-导入项目到idea中-进行编译"><a href="#3-导入项目到idea中-进行编译" class="headerlink" title="3. 导入项目到idea中, 进行编译"></a>3. 导入项目到idea中, 进行编译</h5><p>我这里导入代码, 自动就会进行编译了. 不需要额外的操作. 这个和idea的版本有关,我的idea是2020.1的<br><img src="/images/spring5-build-soure-code/spring5-build-soure-code-build-info.png" alt="soure-code-build-info.png"><br>最后提示finished就ok了.</p>
<h3 id="五-测试源码编译是否成功"><a href="#五-测试源码编译是否成功" class="headerlink" title="五. 测试源码编译是否成功"></a>五. 测试源码编译是否成功</h3><h5 id="1-添加测试模块代码"><a href="#1-添加测试模块代码" class="headerlink" title="1. 添加测试模块代码"></a>1. 添加测试模块代码</h5><p>new-&gt;model-&gt;gradle–&gt;输入模块名称<br><img src="/images/spring5-build-soure-code/spring5-build-soure-code-project-gradle-build-info.png" alt="project-gradle-build-info.png"><br><img src="/images/spring5-build-soure-code/spring5-build-soure-code-spring-ioc-show-example.png" alt="spring-ioc-show-example.png"><br>设置项目名, 设置好以后点击finish</p>
<h5 id="为项目添加依赖"><a href="#为项目添加依赖" class="headerlink" title="为项目添加依赖"></a>为项目添加依赖</h5><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">dependencies</span> <span class="token attr-value">{</span>
<span class="token attr-name">    testCompile</span> <span class="token attr-value">group: 'junit', name: 'junit', version: '4.12' </span>
<span class="token attr-name">    compile(project("</span><span class="token punctuation">:</span><span class="token attr-value">spring-context"))     </span>
}</code></pre>
<p>compile(project(“:spring-context”)) 代表本项目的</p>
<h5 id="2-添加测试文件-测试IoC功能"><a href="#2-添加测试文件-测试IoC功能" class="headerlink" title="2. 添加测试文件, 测试IoC功能"></a>2. 添加测试文件, 测试IoC功能</h5><ul>
<li>为项目添加依赖<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">dependencies</span> <span class="token attr-value">{</span>
<span class="token attr-name">testCompile</span> <span class="token attr-value">group: 'junit', name: 'junit', version: '4.12' </span>
<span class="token attr-name">compile(project("</span><span class="token punctuation">:</span><span class="token attr-value">spring-context"))     </span>
}</code></pre>
compile(project(“:spring-context”)) 代表本项目的<h5 id="2-添加测试文件-测试IoC功能-1"><a href="#2-添加测试文件-测试IoC功能-1" class="headerlink" title="2. 添加测试文件, 测试IoC功能"></a>2. 添加测试文件, 测试IoC功能</h5></li>
<li>为项目添加依赖<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">dependencies</span> <span class="token attr-value">{</span>
<span class="token attr-name">testCompile</span> <span class="token attr-value">group: 'junit', name: 'junit', version: '4.12' </span>
<span class="token attr-name">compile(project("</span><span class="token punctuation">:</span><span class="token attr-value">spring-context"))     </span>
}</code></pre>
compile(project(“:spring-context”)) 代表本项目的</li>
<li>随意添加一个bean<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<p>import org.springframework.stereotype.Service;</p>
<p>@Service<br>public class UserServiceImpl {</p>
<pre><code>public void sayHi(){
    System.out.println("Hello Spring！");
}</code></pre>
<p>}</p>
<pre><code>- 添加启动类
```java 
import cn.tulingxueyuan.beans.UserServiceImpl;
import javafx.application.Application;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan("com.lxl.www")
public class MainStat {

    public static void main(String[] args) {
        ApplicationContext context=new AnnotationConfigApplicationContext(MainStat.class);
        UserServiceImpl bean = context.getBean(UserServiceImpl.class);
        bean.sayHi();

    }

}</code></pre>
<p>启动MainStat并运行. 如果看到如下输出, 表示成功了<br><img src="/images/spring5-build-soure-code/spring5-build-soure-code-spring-run-example.png" alt="spring-run-example.png"><br>代码依然会报错, 是一个git的异常, 这个可以忽略. 看到上面编译成功,并且有打印结果, 就说明成功了.</p>
]]></content>
      <categories>
        <category>build source code</category>
      </categories>
      <tags>
        <tag>spring5</tag>
        <tag>build source code</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud结合nacos实现灰度发版方案</title>
    <url>/2021/10/14/springcloud-nacos-gray-plan-demo/</url>
    <content><![CDATA[<p>最近和组内伙伴一起分享讨论了灰度方案,先将内容整理出来, 具体如下:</p>
<p>灰度方案设计及demo实现</p>
<ul>
<li>架构设计</li>
<li>组件设计及原理</li>
<li>关键代码实现</li>
<li>项目资料<h3 id="一-架构设计"><a href="#一-架构设计" class="headerlink" title="一. 架构设计"></a>一. 架构设计</h3><img src="/images/springcloud-nacos-gray-plan-demo/springcloud-nacos-gray-plan-demo-frame.png" alt="微服务架构图.png"><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4></li>
</ul>
<blockquote>
<p>1:微服务系统在启动时将自己注册到服务注册中心，同时对外发布 Http 接口供其它系统调用(一般都是基于Spring MVC)<br>2:服务消费者基于 Feign 调用服务提供者对外发布的接口，先对调用的本地接口加上注解@FeignClient，Feign会针对 加了该注解的接口生成动态代理，服务消费者会针对 Feign 生成的动态代理去调用方法时，在底层会生成Http协议格式的请求，类似 /stock/deduct?productId=100<br>3:Feign 最终会调用Ribbon从本地的Nacos注册表的缓存里根据服务名取出服务提供在机器的列表，然后进行负载均衡 并选择一台机器出来，对选出来的机器IP和端口拼接之前生成的url请求，生成类似调用http接口地址 <a href="http://192.168.0.60:9000/stock/deduct?productId=100">http://192.168.0.60:9000/stock/deduct?productId=100</a> 最后基于HTTPClient调用请求</p>
</blockquote>
<h4 id="基于微服务架构的原理-来设计灰度方案"><a href="#基于微服务架构的原理-来设计灰度方案" class="headerlink" title="基于微服务架构的原理,来设计灰度方案"></a>基于微服务架构的原理,来设计灰度方案</h4><p><img src="/images/springcloud-nacos-gray-plan-demo/springcloud-nacos-gray-plan-demo-freame-process.png" alt="基于微服务架构的原理,来设计灰度方案.png"></p>
<h4 id="概要流程："><a href="#概要流程：" class="headerlink" title="概要流程："></a>概要流程：</h4><blockquote>
<p>1.全局配置灰度是否启用–在nacos中配置， 动态更新<br>2.配置灰度规则， version=2.0 userId=”1234567” productId=”010-1234567”<br>3.设置灰度服务器， 哪些服务器是灰度服务器。 为其打标签<br>4.启动所有服务， 服务在nacos上进行注册<br>5.客户端发起请求， 带着header参数<br>6.zuul进行过滤，判断是否符合灰度条件， 如果符合，打上灰度标签<br>7.通过feign将灰度标签进行透传<br>8.通过ribbon选择跳转的服务器， 可以指定负载均衡策略<br>9.下一个服务器继续跳转，带上feign的灰度标签，继续请求。</p>
</blockquote>
<p>以上是这个灰度方案实现的整体逻辑和思路</p>
<h3 id="二-组件设计及原理"><a href="#二-组件设计及原理" class="headerlink" title="二. 组件设计及原理"></a>二. 组件设计及原理</h3><h4 id="2-1-灰度的目标"><a href="#2-1-灰度的目标" class="headerlink" title="2.1 灰度的目标"></a>2.1 灰度的目标</h4><p>不同的流量过来, 根据元数据匹配, 走不同的微服务<br><img src="/images/springcloud-nacos-gray-plan-demo/springcloud-nacos-gray-plan-demo-gray-module.png" alt="灰度模型.png"><br>当流量请求过来以后, 根据其匹配的灰度规则的不同, 走的服务有所不同, 可以将其分为三种类型.</p>
<ul>
<li>不匹配任何灰度规则, 则走无灰度服务</li>
<li>匹配灰度规则, 则走对应的灰度服务</li>
<li>同时匹配多个灰度规则, 选择灰度服务<h4 id="2-2-管理后台–设置并管理灰度规则"><a href="#2-2-管理后台–设置并管理灰度规则" class="headerlink" title="2.2 管理后台–设置并管理灰度规则"></a>2.2 管理后台–设置并管理灰度规则</h4>全局灰度标签设置在nacos中, nacos配置的灰度标签的开闭, 可实时自动更新同步.<br>灰度管理后台, 管理后台主要有两大块内容.<br>　　1) 配置灰度规则<br>　　　　1. 根据需要设置灰度规则, 比如: 城市, 用户id, 订单id, 版本号, 学科等<br>　　2) 设置灰度服务器<br>　　　　1. 调用nacos接口, 获取所有微服务ip+port<br>　　　　2. 为灰度服务器打灰度标签<br>　　　　3. 做同步策略, 当灰度服务标签内容有变化, 通知网关, 做相应更新<br><img src="/images/springcloud-nacos-gray-plan-demo/springcloud-nacos-gray-plan-demo-gray-rule-setting.png" alt="灰度规则设置.png"><h4 id="2-3-网关设置–拦截请求-为其打灰度标签"><a href="#2-3-网关设置–拦截请求-为其打灰度标签" class="headerlink" title="2.3. 网关设置–拦截请求, 为其打灰度标签"></a>2.3. 网关设置–拦截请求, 为其打灰度标签</h4><h5 id="网关其实就是各种各样的过滤器-常用的过滤器类型有-pre-前置过滤器-routing-路由过滤器-post过滤器-error过滤器"><a href="#网关其实就是各种各样的过滤器-常用的过滤器类型有-pre-前置过滤器-routing-路由过滤器-post过滤器-error过滤器" class="headerlink" title="网关其实就是各种各样的过滤器, 常用的过滤器类型有:pre:前置过滤器, routing: 路由过滤器, post过滤器, error过滤器"></a>网关其实就是各种各样的过滤器, 常用的过滤器类型有:pre:前置过滤器, routing: 路由过滤器, post过滤器, error过滤器</h5>这里我们定义一个前置过滤器, 过滤所有 过来的请求, 判断其是否匹配灰度规则</li>
</ul>
<p>执行步骤:</p>
<blockquote>
<p>1:初始化灰度规则, 我们首先判断nacos中灰度规则是否启用, 启用则去灰度管理服务器获取有效的灰度规则<br>2:判断请求头是否和某一灰度规则匹配, 如果匹配, 则将请求header添加到请求上下文, 后续feign进行透传. 同时添加到ribbon请求上下文, 做服务选择.</p>
</blockquote>
<p><img src="/images/springcloud-nacos-gray-plan-demo/springcloud-nacos-gray-plan-demo-gateway-filter-rule.png" alt="gateway灰度规则.png"></p>
<h4 id="2-4-ribbon设置-–-根据灰度规则-选择灰度服务器"><a href="#2-4-ribbon设置-–-根据灰度规则-选择灰度服务器" class="headerlink" title="2.4. ribbon设置 – 根据灰度规则, 选择灰度服务器"></a>2.4. ribbon设置 – 根据灰度规则, 选择灰度服务器</h4><p>ribbon是客户端负载均衡, 通过对ribbon上下文中的灰度标签和微服务列表中灰度标签的比较, 来选择一台服务器, 作为目标跳转服务器<br><img src="/images/springcloud-nacos-gray-plan-demo/springcloud-nacos-gray-plan-demo-ribbon-loadbalance-rule.png" alt="ribbon-loadbalance-rule.png"></p>
<h4 id="2-5-自定义Feign拦截器-实现参数-灰度标签-的透传"><a href="#2-5-自定义Feign拦截器-实现参数-灰度标签-的透传" class="headerlink" title="2.5 自定义Feign拦截器, 实现参数(灰度标签)的透传"></a>2.5 自定义Feign拦截器, 实现参数(灰度标签)的透传</h4><p>feign的实质是拦截器, feign将拦截所有的请求跳转, 主要作用是用来做header参数透传, 保证服务间的调用也可以正确选择灰度服务器.<br><img src="/images/springcloud-nacos-gray-plan-demo/springcloud-nacos-gray-plan-demo-custom-feign-intercept.png" alt="custom-feign-intercept.png"></p>
<h3 id="三-demo设计规划及实现"><a href="#三-demo设计规划及实现" class="headerlink" title="三. demo设计规划及实现"></a>三. demo设计规划及实现</h3><h4 id="3-1-微服务规划"><a href="#3-1-微服务规划" class="headerlink" title="3.1. 微服务规划"></a>3.1. 微服务规划</h4><p><img src="/images/springcloud-nacos-gray-plan-demo/springcloud-nacos-gray-plan-demo-cloud-service-list.png" alt="微服务样例列表.png"></p>
<h4 id="3-2-gateway关键代码实现"><a href="#3-2-gateway关键代码实现" class="headerlink" title="3.2 gateway关键代码实现"></a>3.2 gateway关键代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * 过滤器执行的内容
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 第一步: 初始化灰度规则</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initGray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//初始化灰度规则</span>
            <span class="token function">getGrayRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 第二步: 获取请求头(包括请求的来源url和method)</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headerMap <span class="token operator">=</span> <span class="token function">getHeadersInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"headerMap:{},grayRules:{}"</span><span class="token punctuation">,</span> headerMap<span class="token punctuation">,</span> grayRules<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 删除之前的路由到灰度的标记</span>
       <span class="token comment" spellcheck="true">/* if (RibbonFilterContextHolder.getCurrentContext().getAttributes().get(GrayConstant.GRAY_TAG) != null) {
            RibbonFilterContextHolder.getCurrentContext().remove(GrayConstant.GRAY_TAG);
        }*/</span>
        <span class="token comment" spellcheck="true">//灰度开关关闭 -- 无需走灰度, 执行正常的ribbon负载均衡转发策略</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>grayEnable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"灰度开关已关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>grayRules<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> grayRuleMap <span class="token operator">:</span> grayRules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 获取本次灰度的标签,标签的内容是灰度的规则内容</span>
                    String grayTag <span class="token operator">=</span> grayRuleMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_TAG<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment" spellcheck="true">// 第三步: 过滤有效的灰度标签</span>
                    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> resultGrayRuleMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//去掉值为空的灰度规则</span>
                    grayRuleMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> V<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>V<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            resultGrayRuleMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> V<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    resultGrayRuleMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_TAG<span class="token punctuation">)</span><span class="token punctuation">;</span>


                    <span class="token comment" spellcheck="true">//将灰度标签(规则)小写化</span>
                    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> lowerGrayRuleMap <span class="token operator">=</span> <span class="token function">transformUpperCase</span><span class="token punctuation">(</span>resultGrayRuleMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment" spellcheck="true">// 第四步: 判断请求头是否匹配灰度规则</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>headerMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>resultGrayRuleMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> headerMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>lowerGrayRuleMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">// 这是网关通讯使用的全局对象RequestContext</span>
                        RequestContext requestContext <span class="token operator">=</span> RequestContext<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 把灰度规则添加到网关请求头, 后面的请求都可以使用该参数</span>
                        requestContext<span class="token punctuation">.</span><span class="token function">addZuulRequestHeader</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_HEADER<span class="token punctuation">,</span> grayTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 将灰度规则添加到ribbon的上下文</span>
                        RibbonFilterContextHolder<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_TAG<span class="token punctuation">,</span> grayTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"添加灰度tag成功:lowerGrayRuleMap:{},grayTag:{}"</span><span class="token punctuation">,</span> lowerGrayRuleMap<span class="token punctuation">,</span> grayTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"灰度匹配失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这里的逻辑</p>
<p>首先: 获取灰度规则标签. 什么时候获取呢? 第一次请求过来的时候, 去请求灰度标签. 放到全局的map集合中. 后面, 直接拿来就用</p>
<p>第二: 获取请求过来的header, 和灰度规则进行匹配, 如果匹配上了, 那么打灰度标签, 将其灰度请求头添加到请求上下文, 同时添加到ribbon请求的上下文中</p>
<p>接下来, 走feign实现header透传</p>
<h4 id="3-3-feign关键代码实现"><a href="#3-3-feign关键代码实现" class="headerlink" title="3.3 feign关键代码实现"></a>3.3 feign关键代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>RequestTemplate requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        RequestAttributes ra <span class="token operator">=</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//处理特殊情况</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> ra<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ServletRequestAttributes sra <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestAttributes<span class="token punctuation">)</span> ra<span class="token punctuation">;</span>
        HttpServletRequest request <span class="token operator">=</span> sra<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//处理特殊情况</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[feign拦截器] ribbon上下文属性:{}"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>RibbonFilterContextHolder<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>RibbonFilterContextHolder<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_TAG<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RibbonFilterContextHolder<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_TAG<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_HEADER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"灰度feign收到header：{}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_HEADER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            RibbonFilterContextHolder<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_TAG<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_HEADER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_HEADER<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_HEADER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>其实feign的主要作用就是透传, 为什么要透传了呢? 微服务之间的请求, 不只是是首次定向的服务需要进行灰度, 那么后面服务内部相互调用也可能要走灰度, 那么最初请求的请求头就很重要了. 要一直传递下去.</p>
<p>而requestTemplate.header(GrayConstant.GRAY_HEADER, request.getHeader(GrayConstant.GRAY_HEADER));就可以实现参数在整个请求进行透传.</p>
<p>请求的参数带好了, 下面就要进行服务选择了, 有n台服务器, 到底要选择哪台服务器呢? 就是ribbon的负载均衡选择了</p>
<h4 id="3-4-ribbon关键代码实现"><a href="#3-4-ribbon关键代码实现" class="headerlink" title="3.4 ribbon关键代码实现"></a>3.4 ribbon关键代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * 实现父类的负载均衡规则
     *
     * @param key
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Server <span class="token function">choose</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//return choose(getLoadBalancer(), key);</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 调用父类方法, 获取当前的负载均衡器</span>
            BaseLoadBalancer loadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span>BaseLoadBalancer<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">//获取当前的服务名</span>
            String serviceName <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[ribbon负载均衡策略] 当前服务名: {}"</span><span class="token punctuation">,</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//获取服务发现客户端</span>
            NamingService namingService <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">namingServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 获取指定的服务实例列表</span>
            List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> allInstances <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">getAllInstances</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[ribbon负载均衡策略] 可用的服务实例: {}"</span><span class="token punctuation">,</span> allInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>allInstances <span class="token operator">==</span> null <span class="token operator">||</span> allInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"没有可用的服务器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> null<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            RibbonFilterContext context <span class="token operator">=</span> RibbonFilterContextHolder<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"MetadataBalancerRule RibbonFilterContext:{}"</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">>></span> ribbonAttributes <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/**
             * 服务分为三种类型
             * 1. 设置为灰度的服务   ---   灰度服务
             * 2. 先设置了灰度, 后取消了灰度的服务   ---   去灰服务
             * 3. 普通服务-非灰服务
             */</span>
            <span class="token comment" spellcheck="true">// 可供选择的灰度服务</span>
            List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> grayInstances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 非灰服务</span>
            List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> noneGrayInstances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            Instance toBeChooseInstance<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>Instance instance <span class="token operator">:</span> allInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> metadata <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>ribbonAttributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"进行灰度匹配，已匹配灰度服务：{},灰度tag为：{}"</span><span class="token punctuation">,</span> instance<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_TAG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        grayInstances<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>GrayConstant<span class="token punctuation">.</span>GRAY_TAG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">// 非灰度服务</span>
                        noneGrayInstances<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[ribbon负载均衡策略] 灰度服务: {}, 非灰服务:{}"</span><span class="token punctuation">,</span> grayInstances<span class="token punctuation">,</span> noneGrayInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 如果灰度服务不为空, 则走灰度服务</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>grayInstances <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> grayInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 走灰度服务 -- 从本集群中按照权重随机选择一个服务实例</span>
                toBeChooseInstance <span class="token operator">=</span> WeightedBalancer<span class="token punctuation">.</span><span class="token function">chooseInstanceByRandomWeight</span><span class="token punctuation">(</span>grayInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[ribbon负载均衡策略] 灰度规则匹配成功, 匹配的灰度服务是: {}"</span><span class="token punctuation">,</span> toBeChooseInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>toBeChooseInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// 灰度服务为空, 走非断灰的服务</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>noneGrayInstances <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> noneGrayInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 走非灰服务 -- 从本集群中按照权重随机选择一个服务实例</span>
                toBeChooseInstance <span class="token operator">=</span> WeightedBalancer<span class="token punctuation">.</span><span class="token function">chooseInstanceByRandomWeight</span><span class="token punctuation">(</span>noneGrayInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[ribbon负载均衡策略] 不走灰度, 匹配的非灰度服务是: {}"</span><span class="token punctuation">,</span> toBeChooseInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>toBeChooseInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"未找到可匹配服务,实际服务:{}"</span><span class="token punctuation">,</span> allInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
                toBeChooseInstance <span class="token operator">=</span> WeightedBalancer<span class="token punctuation">.</span><span class="token function">chooseInstanceByRandomWeight</span><span class="token punctuation">(</span>allInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[ribbon负载均衡策略] 未找到可匹配服务, 随机选择一个: {}"</span><span class="token punctuation">,</span> toBeChooseInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>toBeChooseInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>以上是梳理了网关的主要逻辑思想和关键代码</p>
<h3 id="四-项目资料"><a href="#四-项目资料" class="headerlink" title="四. 项目资料"></a>四. 项目资料</h3><p>关于以上内容相关的源码,有需要的伙伴可以赞助小张哥喝一杯咖啡,然后在赞赏备注中留下自己的email信息,我会转发code。(code是可以直接运行通过的哦,编译过程中有什么问题可以直接在文章下方给我留言,我会实时通过邮件的方式进行查收的~~)<br><img src="/images/pay/wechat.jpg" alt="小张哥的赞赏码"></p>
]]></content>
      <categories>
        <category>springcloud gray plan</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>nacos</tag>
        <tag>ribbon</tag>
        <tag>feign</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger2 常用注解</title>
    <url>/2020/01/03/swagger-annotation/</url>
    <content><![CDATA[<p>Spring Boot 开发restful接口时，往往会有很多RESTful API，一般会选择swagger对接口进行管理</p>
<h2 id="Spring-Boot添加swagger支持"><a href="#Spring-Boot添加swagger支持" class="headerlink" title="Spring Boot添加swagger支持"></a>Spring Boot添加swagger支持</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><pre class=" language-java"><code class="language-java">
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ParameterBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>PathSelectors<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>schema<span class="token punctuation">.</span>ModelRef<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Parameter<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span>
<span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableSwagger2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swagger2Configuration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Docket <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 构建一个header</span>
        ParameterBuilder parameterBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parameterType</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>BaseConst<span class="token punctuation">.</span>AUTH_TOKEN<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultValue</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">modelRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ModelRef</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        List<span class="token operator">&lt;</span>Parameter<span class="token operator">></span> parameters <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>parameterBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">globalOperationParameters</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.xiaozhangge"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"RESTful APIs"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"描述"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="注解详细说明"><a href="#注解详细说明" class="headerlink" title="注解详细说明"></a>注解详细说明</h2><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left"><strong>取值</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">作用范围</td>
<td align="left">@API</td>
<td>使用位置</td>
</tr>
<tr>
<td align="left">对象属性</td>
<td align="left">@ApiModelProperty</td>
<td>用在出入参数对象的字段上</td>
</tr>
<tr>
<td align="left">协议集描述</td>
<td align="left">@Api</td>
<td>用于controller类上</td>
</tr>
<tr>
<td align="left">协议描述</td>
<td align="left">@ApiOperation</td>
<td>用在controller的方法上</td>
</tr>
<tr>
<td align="left">Response集</td>
<td align="left">@ApiResponses</td>
<td>用在controller的方法上</td>
</tr>
<tr>
<td align="left">Response</td>
<td align="left">@ApiResponse</td>
<td>用在 @ApiResponses里边</td>
</tr>
<tr>
<td align="left">非对象参数集</td>
<td align="left">@ApiImplicitParams</td>
<td>用在controller的方法上</td>
</tr>
<tr>
<td align="left">非对象参数描述</td>
<td align="left">@ApiImplicitParam</td>
<td>用在@ApiImplicitParams的方法里边</td>
</tr>
<tr>
<td align="left">描述返回对象的意义</td>
<td align="left">@ApiModel</td>
<td>用在返回对象类上</td>
</tr>
<tr>
<td align="left">标记@RequestBody</td>
<td align="left">@ApiParam</td>
<td>用在方法参数</td>
</tr>
</tbody></table>
<h2 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a>@ApiImplicitParam</h2><table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>取值</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>paramType</td>
<td>查询参数类型</td>
<td></td>
</tr>
<tr>
<td></td>
<td>path</td>
<td>以地址的形式提交数据</td>
</tr>
<tr>
<td></td>
<td>query</td>
<td>直接跟参数完成自动映射赋值</td>
</tr>
<tr>
<td></td>
<td>body</td>
<td>以流的形式提交 仅支持POST</td>
</tr>
<tr>
<td></td>
<td>header</td>
<td>参数在request headers 里边提交</td>
</tr>
<tr>
<td></td>
<td>form</td>
<td>以form表单的形式提交 仅支持POST</td>
</tr>
<tr>
<td>dataType</td>
<td></td>
<td>参数的数据类型 只作为标志说明 不会验证</td>
</tr>
<tr>
<td></td>
<td>Long</td>
<td></td>
</tr>
<tr>
<td></td>
<td>String</td>
<td></td>
</tr>
<tr>
<td></td>
<td>Integer</td>
<td></td>
</tr>
<tr>
<td>name</td>
<td></td>
<td>接收参数名</td>
</tr>
<tr>
<td>value</td>
<td></td>
<td>接收参数的意义描述</td>
</tr>
<tr>
<td>required</td>
<td></td>
<td>参数是否必填</td>
</tr>
<tr>
<td></td>
<td>true</td>
<td>必填</td>
</tr>
<tr>
<td></td>
<td>false</td>
<td>非必填</td>
</tr>
<tr>
<td>defaultValue</td>
<td></td>
<td>默认值</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Swagger</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/03/18/tools-regex/</url>
    <content><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="center">匹配除了换行符以外的任意字符</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">指定*前边的内容可以连续重复使用任意次以使整个表达式得到匹配</td>
</tr>
<tr>
<td align="center">.*</td>
<td align="center">任意数量的不包含换行的字符</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">单词的开头或结尾，也就是单词的分界处</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">匹配字母、数字、下划线、汉字</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">匹配任意空白字符</td>
</tr>
<tr>
<td align="center">\d</td>
<td align="center">匹配数字</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配字符串开始</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">匹配字符串结束</td>
</tr>
</tbody></table>
<p>反义</p>
<table>
<thead>
<tr>
<th align="center">元字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\W</td>
<td align="center">匹配非字母、下划线、数字、汉字</td>
</tr>
<tr>
<td align="center">\S</td>
<td align="center">匹配不是空白字符串</td>
</tr>
<tr>
<td align="center">\D</td>
<td align="center">匹配任意非数字的字符</td>
</tr>
<tr>
<td align="center">\B</td>
<td align="center">匹配不是单词开始或者结束的位置</td>
</tr>
<tr>
<td align="center">[^x]</td>
<td align="center">匹配除了<code>x</code>以外的任意字符</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
  </entry>
  <entry>
    <title>Vertica 简介</title>
    <url>/2019/03/14/vertica-01/</url>
    <content><![CDATA[<p>Vertica是一款基于列存储的<a href="https://baike.baidu.com/item/MPP">MPP</a> （massively parallel processing）架构的数据库。它可以支持存放多至PB（Petabyte）级别的结构化数据。Vertica是由关系数据库大师Michael Stonebraker(2014 年<a href="https://baike.baidu.com/item/%E5%9B%BE%E7%81%B5%E5%A5%96/324645">图灵奖</a>获得者)所创建，于2011年被<a href="https://baike.baidu.com/item/%E6%83%A0%E6%99%AE/275141">惠普</a>收购并成为其核心大数据平台软件。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Vertica是一款基于列存储的<a href="https://baike.baidu.com/item/MPP">MPP</a>（massively parallel processing）架构的数据库。 它可以支持存放多至PB（Petabyte）级别的结构化数据。Vertica是由关系数据库大师Michael Stonebraker(2014 年<a href="https://baike.baidu.com/item/%E5%9B%BE%E7%81%B5%E5%A5%96">图灵奖</a>获得者)所创建，于2011年被惠普收购并成为其核心大数据平台软件。</p>
<p>Vertica 采用无共享的MPP 架构，基于工业标准的<a href="https://baike.baidu.com/item/x86">x86</a> 服务器，拥有高可扩展性。Vertica 集群中的所有节点100%对等，集群中没有主节点或其他共享资源。通过增加节点，就可以线性地扩展集群的计算能力和数据处理容量。</p>
<p>Vertica 是真正的纯列式数据库，优化器和执行引擎可以忽略表中与查询无关的列。Vertica 不仅仅按列式存储数据，还主动地根据列数据的特点和查询的要求选用最佳的算法对数据进行排序和编码压缩，这就极大地降低磁盘I/O 消耗。同时，Vertica 的执行引擎和优化器也是基于列式数据库设计的，编码压缩过的列数据在Vertica 的执行引擎中进行过滤、关联、分组等操作时不需要解反编码，从而大大降低了<a href="https://baike.baidu.com/item/CPU/120556">CPU</a> 和<a href="https://baike.baidu.com/item/%E5%86%85%E5%AD%98">内存</a>消耗。</p>
<p>Vertica 充分利用列式存储的优点，在保持对前端应用透明的前提下，把数据在集群中的所有节点进行均匀分布的同时，还在多个节点上对同一份数据维护了多个拷贝，确保任意一个扩几个节点出现故障或进入维修状态都不会影响集群的健康状态。这使得Vertica 拥有类似磁盘RAID 一样高可靠性。</p>
<p>无共享的MPP 架构和真正的列式数据库特性，使Vertica 拥有高性能、高扩展性、高压缩率、高健壮性的特点。与传统的解决方案相比，Vertica 可以以30%的成本，实现50 倍-1000 倍的性能提高。</p>
<h2 id="软件优势"><a href="#软件优势" class="headerlink" title="软件优势"></a>软件优势</h2><p>作为全新架构的实时分析平台，Vertica 有很多的创新，特点包括：</p>
<p><strong>列式存储和计算</strong></p>
<p>通过列式计算和强大的主动数据压缩，大幅降低成本高昂的磁盘 <a href="https://baike.baidu.com/item/I%2FO/84718">I/O</a>（主要是传统的以行为存储单位的<a href="https://baike.baidu.com/item/SQL">SQL</a> 数据库使用），执行查询的速度可提升 50 到 1000倍，存储成本最高削减 90%。</p>
<p><strong>“横向扩展式”大规模并行处理 (MPP)</strong></p>
<p>基于无共享的MPP 架构，支持在线添加数量不限的X86 工业标准服务器，可根据需求任意扩展解决方案。</p>
<p><strong>实时分析</strong></p>
<p>通过内存与磁盘混合存储架构，以及原生支持kafka 消息系统的连接，支持数据实时装载和秒级分析。</p>
<p><strong>数据库内部分析库</strong></p>
<p>开箱即用的数据库内时序插值和关联、事件窗口和会话处理、模式匹配、空间地理分析、文本情感分析等高级分析，以及广义线性回归、逻辑回归、K-Means聚类、朴素贝叶斯分类等常用机器学习和预测分析功能。您也可以获取开源分析库，包括源自 CRAN（综合 R 存档网络）的众多分析功能包。</p>
<p><strong>完整的关系数据库和SQL 标准支持</strong></p>
<p>Vertica 支持关系数据库事务处理和ACID 规范，支持SQL-92/SQL-99/SQL-2003 标准，提供ODBC、JDBC、ADO.NET 接口规范驱动，完全兼容传统关系数据库的开发、使用和管理习惯，可以轻松与现有的ETL 和报表工具集成，保护客户已有的投资。</p>
<p><strong>可扩展的数据库内部分析框架</strong></p>
<p>采用面向用户定义的过程式分析的强大开发框架，实现了对于数据库内部处理的开放式访问。除了使用内置的 SQL 分析和聚合函数外，还可借助 C++/Java/R语言软件开发人员套件 (SDK) 定义自己的定制函数。SDK 功能可保证沙盒安全，并使函数能够并行运行以加快运行速度。</p>
<p><strong>原生支持Hadoop</strong></p>
<p>Vertica 可以作为SQL 分析引擎直接部署到Hadoop 集群中，直接存取HDFS上的数据；也可以通过标准SQL 直接访问Hive 等管理的数据，并与Vertica 管理的数据进行关联分析；另外Vertica 还提供应用编程接口 (API)支持与MapReduce、Pig 等框架构建结构化、半结构化和非结构化深度融合的大数据分析应用。</p>
<p><strong>自动实现高可用性</strong></p>
<p>不间断运行，并具有数据复制、故障转移和恢复功能；Vertica 进行了性能优化，并且对业务和运营团队完全透明。</p>
<p><strong>自动优化和性能管理</strong></p>
<p>通过强大的 API 集合来监控系统的资源、后台进程、工作负载及性能，通过工作负载分析和数据库设计器自动优化数据库，简化系统管理。</p>
<p>以上摘自百度百科。</p>
]]></content>
      <categories>
        <category>Vertica</category>
      </categories>
      <tags>
        <tag>Vertica</tag>
      </tags>
  </entry>
  <entry>
    <title>Vertica 基本操作语句</title>
    <url>/2019/03/14/vertica-02/</url>
    <content><![CDATA[<h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><p>基于列存储的数据库，相对于传统的基于行的数据库，它更适合在数据仓库存储方面发挥特长。基于列存储的数据库的优点：</p>
<ul>
<li>对于聚集操作，比如求sum，明显基于列存储的要比基于行存储的快；</li>
<li>对于update操作，不须接触其他列值；</li>
<li>基于行存储的数据库在查询每行记录的多个列值更高效的条件是，row-size比较小，这样一次磁盘读取就可以获取整行；</li>
<li>基于行存储的数据库在insert一行的时候相对更高效，毕竟可一次写入一个连续空间，即一次single disk seek。</li>
</ul>
<p>从实际情况上来看，基于行存储的数据库更适合OLTP（联机事务处理系统），基于列存储的数据库更适合OLAP（联机分析处理系统），比如数据仓库。除此之外，同一列必定是同一类型大小，基于列存储的数据库更容易使用高效的存储方式，与之相对，基于行存储的数据库则只能采用随机方式处理列值了。</p>
<p>Vertica数据库的设计特点是：</p>
<ul>
<li>它是基于列的存储结构，提高了连续的record处理的性能，但是在一般事务中增加了对单独record进行update和delete的开销；</li>
<li>“单独”更新（out-of-place updates）和混合存储结构，提高了查询、插入的性能，但增加了update和delete的开销；</li>
<li>压缩，减少存储开销和IO带宽开销；</li>
<li>完全无共享架构，降低对共享资源的系统竞争。</li>
</ul>
<p>Vertica数据库运行在基于Linux的网格服务器上，目前应用于Amazon Elastic Compute Cloud的数据库管理系统。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="进入-vsql-环境"><a href="#进入-vsql-环境" class="headerlink" title="进入 vsql 环境"></a>进入 vsql 环境</h2><pre class=" language-shell"><code class="language-shell">vsql -U dbadmin -w 123456</code></pre>
<h2 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h2><pre class=" language-shell"><code class="language-shell">dbadmin=> \h</code></pre>
<h2 id="切换vertica用户，用于创建database"><a href="#切换vertica用户，用于创建database" class="headerlink" title="切换vertica用户，用于创建database"></a>切换vertica用户，用于创建database</h2><pre class=" language-shell"><code class="language-shell"># 切换用户
su - dbadmin

# 进入vertica管理工具
/opt/vertica/bin/admintools</code></pre>
<p><a href="https://www.vertica.com/docs/9.2.x/HTML/Content/Authoring/AdministratorsGuide/AdminTools/CreatingADatabase.htm">创建数据库</a></p>
<h1 id="用户与schema查询"><a href="#用户与schema查询" class="headerlink" title="用户与schema查询"></a>用户与schema查询</h1><h2 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v_catalog<span class="token punctuation">.</span>users<span class="token punctuation">;</span></code></pre>
<h2 id="查询schema"><a href="#查询schema" class="headerlink" title="查询schema"></a>查询schema</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> schemata<span class="token punctuation">;</span></code></pre>
<h2 id="某个schema必须附属于某个用户（user），查询用户和schema信息"><a href="#某个schema必须附属于某个用户（user），查询用户和schema信息" class="headerlink" title="某个schema必须附属于某个用户（user），查询用户和schema信息"></a>某个schema必须附属于某个用户（user），查询用户和schema信息</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span> s<span class="token punctuation">.</span>schema_name
<span class="token keyword">FROM</span> users u <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> schemata s <span class="token keyword">ON</span> u<span class="token punctuation">.</span>user_name <span class="token operator">=</span> s<span class="token punctuation">.</span>schema_owner<span class="token punctuation">;</span></code></pre>
<h1 id="创建用户和schema"><a href="#创建用户和schema" class="headerlink" title="创建用户和schema"></a>创建用户和schema</h1><h2 id="创建一个用户"><a href="#创建一个用户" class="headerlink" title="创建一个用户"></a>创建一个用户</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># username:dev_test password:test</span>
<span class="token keyword">create</span> <span class="token keyword">user</span> dev_test identified <span class="token keyword">by</span> <span class="token string">'test'</span><span class="token punctuation">;</span></code></pre>
<h2 id="基于某个用户创建schema"><a href="#基于某个用户创建schema" class="headerlink" title="基于某个用户创建schema"></a>基于某个用户创建schema</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">schema</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> test <span class="token keyword">authorization</span> dev_test<span class="token punctuation">;</span></code></pre>
<h2 id="重命名-备份"><a href="#重命名-备份" class="headerlink" title="重命名(备份)"></a>重命名(备份)</h2><p>dataname数据库为 dataname_bak</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">schema</span> dataname <span class="token keyword">rename</span> <span class="token keyword">to</span> dataname_bak<span class="token punctuation">;</span></code></pre>
<h2 id="删除-schema-dataname"><a href="#删除-schema-dataname" class="headerlink" title="删除 schema(dataname)"></a>删除 schema(dataname)</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">schema</span> dataname <span class="token keyword">cascade</span><span class="token punctuation">;</span>    </code></pre>
<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> test<span class="token punctuation">.</span><span class="token string">"user"</span> <span class="token punctuation">(</span>
    id <span class="token keyword">Integer</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    name <span class="token keyword">Varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    description <span class="token keyword">Varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h1 id="赋权"><a href="#赋权" class="headerlink" title="赋权"></a>赋权</h1><h2 id="一个schema上的权限赋给另一个用户"><a href="#一个schema上的权限赋给另一个用户" class="headerlink" title="一个schema上的权限赋给另一个用户"></a>一个schema上的权限赋给另一个用户</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">USAGE</span> <span class="token keyword">ON</span> <span class="token keyword">SCHEMA</span> dbname_dw <span class="token keyword">TO</span> dev_test<span class="token punctuation">;</span></code></pre>
<h2 id="把对某个表的操作的权限赋给另一个用户"><a href="#把对某个表的操作的权限赋给另一个用户" class="headerlink" title="把对某个表的操作的权限赋给另一个用户"></a>把对某个表的操作的权限赋给另一个用户</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> tw_re_pm_cell_all_cell_h <span class="token keyword">to</span> dev_test<span class="token punctuation">;</span></code></pre>
<h2 id="从某个用户收回对某个schema的使用权限"><a href="#从某个用户收回对某个schema的使用权限" class="headerlink" title="从某个用户收回对某个schema的使用权限"></a>从某个用户收回对某个schema的使用权限</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token keyword">SCHEMA</span> dbname_dw <span class="token keyword">from</span> dev_test<span class="token punctuation">;</span></code></pre>
<h2 id="从某个用户收回对某个表的使用权限"><a href="#从某个用户收回对某个表的使用权限" class="headerlink" title="从某个用户收回对某个表的使用权限"></a>从某个用户收回对某个表的使用权限</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token keyword">table</span> fct_flux_se_flux_flow_whole_ana_d <span class="token keyword">from</span> dev_test<span class="token punctuation">;</span></code></pre>
<h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><h2 id="查询系统中的序列"><a href="#查询系统中的序列" class="headerlink" title="查询系统中的序列"></a>查询系统中的序列</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sequences<span class="token punctuation">;</span></code></pre>
<h2 id="创建序列"><a href="#创建序列" class="headerlink" title="创建序列"></a>创建序列</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 简单语法：</span>
<span class="token keyword">CREATE</span> SEQUENCE my_seq MAXVALUE <span class="token number">5000</span> <span class="token keyword">START</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true"># 标准语法：</span>
<span class="token keyword">CREATE</span> SEQUENCE <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">db</span><span class="token operator">-</span>name<span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token punctuation">]</span>sequence_name
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> INCREMENT <span class="token punctuation">[</span> <span class="token keyword">BY</span> <span class="token punctuation">]</span> positive_or_negative <span class="token punctuation">]</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> MINVALUE minvalue <span class="token operator">|</span> <span class="token keyword">NO</span> MINVALUE <span class="token punctuation">]</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> MAXVALUE maxvalue <span class="token operator">|</span> <span class="token keyword">NO</span> MAXVALUE <span class="token punctuation">]</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> <span class="token keyword">START</span> <span class="token punctuation">[</span> <span class="token keyword">WITH</span> <span class="token punctuation">]</span> <span class="token keyword">start</span> <span class="token punctuation">]</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> CACHE cache <span class="token punctuation">]</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> CYCLE <span class="token operator">|</span> <span class="token keyword">NO</span> CYCLE <span class="token punctuation">]</span></code></pre>
<h2 id="使用序列"><a href="#使用序列" class="headerlink" title="使用序列"></a>使用序列</h2><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 一个新创建还没有使用过的序列，必须首先执行NEXTVAL，然后才能执行CURRVAL。</span>
<span class="token keyword">SELECT</span> NEXTVAL<span class="token punctuation">(</span><span class="token string">'my_seq'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> CURRVAL<span class="token punctuation">(</span><span class="token string">'my_seq'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>在INSERT语句里使用序列</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customer <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Hawkins'</span> <span class="token punctuation">,</span><span class="token string">'John'</span><span class="token punctuation">,</span> <span class="token number">072753</span><span class="token punctuation">,</span> NEXTVAL<span class="token punctuation">(</span><span class="token string">'my_seq'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>在INSERT语句里把序列作为默认值：</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> customer2<span class="token punctuation">(</span>ID <span class="token keyword">INTEGER</span> <span class="token keyword">DEFAULT</span> NEXTVAL<span class="token punctuation">(</span><span class="token string">'my_seq'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                   lname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                   fname <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                   membership_card <span class="token keyword">INTEGER</span>
                                  <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> customer2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">,</span><span class="token string">'Carr'</span><span class="token punctuation">,</span> <span class="token string">'Mary'</span><span class="token punctuation">,</span> <span class="token number">87432</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>删除序列</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> SEQUENCE seq_name<span class="token punctuation">;</span></code></pre>
<h1 id="Vertica创建外部表"><a href="#Vertica创建外部表" class="headerlink" title="Vertica创建外部表"></a>Vertica创建外部表</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> ext1 <span class="token punctuation">(</span>x <span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> COPY <span class="token keyword">FROM</span> <span class="token string">'/tmp/ext1.dat'</span> <span class="token keyword">DELIMITER</span> <span class="token string">','</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> ext1 <span class="token punctuation">(</span>x <span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> COPY <span class="token keyword">FROM</span> <span class="token string">'/tmp/ext1.dat.bz2'</span> BZIP <span class="token keyword">DELIMITER</span> <span class="token string">','</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> ext1 <span class="token punctuation">(</span>x <span class="token keyword">integer</span><span class="token punctuation">,</span> y <span class="token keyword">integer</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> COPY <span class="token punctuation">(</span>x <span class="token keyword">as</span> <span class="token string">'5'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token string">'/tmp/ext1.dat.bz2'</span> BZIP <span class="token keyword">DELIMITER</span> <span class="token string">','</span><span class="token punctuation">;</span></code></pre>
<h1 id="copy执行错误后的Vertica的错误日志"><a href="#copy执行错误后的Vertica的错误日志" class="headerlink" title="copy执行错误后的Vertica的错误日志"></a>copy执行错误后的Vertica的错误日志</h1><pre class=" language-shell"><code class="language-shell">/database/dbname/dbname/v_dbname_node0002_catalog/CopyErrorLogs</code></pre>
<h1 id="从vertica数据的表中导出数据到数据文件"><a href="#从vertica数据的表中导出数据到数据文件" class="headerlink" title="从vertica数据的表中导出数据到数据文件"></a>从vertica数据的表中导出数据到数据文件</h1><pre class=" language-shell"><code class="language-shell">echo `vsql -d dbname -U dbadmin -Atq -w Zongfen_12 -c "select * from test.dim_flow_direction order by flow_type_code"> /database/datastage/export/dim_all/test`</code></pre>
<h1 id="通过数据文件向vertica数据库里加载数据"><a href="#通过数据文件向vertica数据库里加载数据" class="headerlink" title="通过数据文件向vertica数据库里加载数据"></a>通过数据文件向vertica数据库里加载数据</h1><pre class=" language-shell"><code class="language-shell">copy test.fct_flux_se_bus_res_ana_d from '/database/imp_file/fct_flux_se_bus_res_ana_d' on v_dbname_node0002 delimiter '|';</code></pre>
<h1 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h1><h2 id="修改字段为非空"><a href="#修改字段为非空" class="headerlink" title="修改字段为非空"></a>修改字段为非空</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>fct_fournet_wlanap_equp_ana_d <span class="token keyword">alter</span> <span class="token keyword">column</span> day_id <span class="token keyword">set</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre>
<h2 id="更改字段数据类型"><a href="#更改字段数据类型" class="headerlink" title="更改字段数据类型"></a>更改字段数据类型</h2><p>对于数值类型：types–INTEGER, INT, BIGINT, TINYINT, INT8, SMALLINT, and all NUMERIC values of scale &lt;=18 and precision 0 之间是可以互相转化的。此外，numeric类型的精度（precision）是无法更改的，但是长度(scale)是可以修改的，（0-18）之间可以互修改，（19-37）之间可以互修改。</p>
<pre class=" language-sql"><code class="language-sql"> <span class="token keyword">alter</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>dim_micro_area_gsm <span class="token keyword">alter</span> <span class="token keyword">column</span> cell_id <span class="token keyword">set</span> <span class="token keyword">data</span> <span class="token keyword">type</span> <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<h2 id="给表增加字段"><a href="#给表增加字段" class="headerlink" title="给表增加字段"></a>给表增加字段</h2><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">alter</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>DIM_DETAIL_SVCTYPE <span class="token keyword">add</span> <span class="token keyword">column</span> if_app <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="删除表字段"><a href="#删除表字段" class="headerlink" title="删除表字段"></a>删除表字段</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>DIM_DETAIL_SVCTYPE <span class="token keyword">drop</span> <span class="token keyword">column</span> if_app<span class="token punctuation">;</span></code></pre>
<h1 id="数据库表之间导数据"><a href="#数据库表之间导数据" class="headerlink" title="数据库表之间导数据"></a>数据库表之间导数据</h1><pre class=" language-shell"><code class="language-shell">CONNECT TO VERTICA dbname USER dbadmin PASSWORD 'dbname' ON '192.168.1.1',5433;
export TO VERTICA dbname.test.FCT_TNES_GN_NET_M FROM test.FCT_TNES_GN_NET_M;</code></pre>
<h1 id="修改普通表为分区表"><a href="#修改普通表为分区表" class="headerlink" title="修改普通表为分区表"></a>修改普通表为分区表</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>fct_fournet_wlanap_equp_ana_d <span class="token keyword">partition</span> <span class="token keyword">by</span> day_id<span class="token punctuation">;</span></code></pre>
<h1 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>fct_fournet_wlanap_equp_ana_d_x <span class="token keyword">rename</span> <span class="token keyword">to</span> fct_fournet_wlanap_equp_ana_d<span class="token punctuation">;</span></code></pre>
<h1 id="修改表所属的用户"><a href="#修改表所属的用户" class="headerlink" title="修改表所属的用户"></a>修改表所属的用户</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>fct_fournet_wlanap_equp_ana_d owner <span class="token keyword">to</span> dev_test</code></pre>
<h1 id="查询表"><a href="#查询表" class="headerlink" title="查询表"></a>查询表</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">tables</span></code></pre>
<h1 id="projections"><a href="#projections" class="headerlink" title="projections"></a>projections</h1><pre class=" language-sql"><code class="language-sql">projections

<span class="token comment" spellcheck="true"># 查询表对应的projection</span>
<span class="token keyword">SELECT</span> owner_name<span class="token punctuation">,</span> anchor_table_name<span class="token punctuation">,</span> projection_name
  <span class="token keyword">FROM</span> projections
 <span class="token keyword">WHERE</span> projection_basename <span class="token operator">=</span> <span class="token string">'DIM_CFG_LEVEL'</span><span class="token punctuation">;</span></code></pre>
<h1 id="查询列"><a href="#查询列" class="headerlink" title="查询列"></a>查询列</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">columns</span></code></pre>
<h1 id="查询注释"><a href="#查询注释" class="headerlink" title="查询注释"></a>查询注释</h1><pre class=" language-sql"><code class="language-sql">comments

<span class="token comment" spellcheck="true"># 查询表的列对应的注释</span>
<span class="token keyword">SELECT</span> t3<span class="token punctuation">.</span>anchor_table_name <span class="token keyword">AS</span> Table_name<span class="token punctuation">,</span>
       SUBSTR <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>object_name<span class="token punctuation">,</span> INSTR <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>object_name<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> Column_name<span class="token punctuation">,</span>
       t1<span class="token punctuation">.</span><span class="token keyword">comment</span> <span class="token keyword">AS</span> <span class="token keyword">comment</span>
<span class="token keyword">FROM</span> comments t1<span class="token punctuation">,</span> projections t3
 <span class="token keyword">WHERE</span>  SUBSTR <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>object_name<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> INSTR <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>object_name<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span>
              t3<span class="token punctuation">.</span>projection_name
       <span class="token operator">AND</span> t1<span class="token punctuation">.</span>object_type <span class="token operator">=</span> <span class="token string">'COLUMN'</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> t3<span class="token punctuation">.</span>anchor_table_name<span class="token punctuation">;</span></code></pre>
<h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><h2 id="四舍五入、并且保留两位小数"><a href="#四舍五入、并且保留两位小数" class="headerlink" title="四舍五入、并且保留两位小数"></a>四舍五入、并且保留两位小数</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> TRIM <span class="token punctuation">(</span>TO_CHAR <span class="token punctuation">(</span><span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token number">3.456</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'999999999999999999.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       TRIM <span class="token punctuation">(</span>TO_CHAR <span class="token punctuation">(</span><span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'999999999999999999.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       TRIM <span class="token punctuation">(</span>TO_CHAR <span class="token punctuation">(</span><span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token number">3.00</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'999999999999999999.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       TRIM <span class="token punctuation">(</span>TO_CHAR <span class="token punctuation">(</span><span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token number">323542.101</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'999999999999999999.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       TRIM <span class="token punctuation">(</span>TO_CHAR <span class="token punctuation">(</span><span class="token function">ROUND</span> <span class="token punctuation">(</span><span class="token number">3.1067</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'999999999999999999.00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="产生随机数"><a href="#产生随机数" class="headerlink" title="产生随机数"></a>产生随机数</h2><ul>
<li>RANDOM()</li>
</ul>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> RANDOM<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>RANDOMINT</li>
</ul>
<pre class=" language-sql"><code class="language-sql">RANDOMINT <span class="token punctuation">(</span> N <span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>Vertica</category>
      </categories>
      <tags>
        <tag>Vertica</tag>
      </tags>
  </entry>
  <entry>
    <title>Vertica 分析函数</title>
    <url>/2019/03/14/vertica-03/</url>
    <content><![CDATA[<p>分析函数作为 SQL 言语的一种扩展已经被纳入了美国国家标准化组织SQL 委员会的SQL 规范说明书中。所以不同数据库厂商支持的分析函数其语法结构和函数名称也基本一致。这里仅介绍Vertica的的分析函数语法和函数作用，应用函数相关例子略。</p>
<h1 id="分析函数语法"><a href="#分析函数语法" class="headerlink" title="分析函数语法"></a>分析函数语法</h1><pre class=" language-sql"><code class="language-sql">ANALYTIC_FUNCTION（argument<span class="token number">-1</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>，argument<span class="token operator">-</span>n）
<span class="token keyword">OVER</span>（<span class="token punctuation">[</span>window_partition_clause<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>window_order_clause<span class="token punctuation">]</span> 
<span class="token punctuation">[</span>window_frame_clause）</code></pre>
<h2 id="常见函数用途和描述"><a href="#常见函数用途和描述" class="headerlink" title="常见函数用途和描述"></a>常见函数用途和描述</h2><table>
<thead>
<tr>
<th>和</th>
<th>该函数计算组中表达式的累积和</th>
</tr>
</thead>
<tbody><tr>
<td>MIN</td>
<td>在一个组中的数据窗口中查找表达式的最小值</td>
</tr>
<tr>
<td>MAX</td>
<td>在一个组中的数据窗口中查找表达式的最大值</td>
</tr>
<tr>
<td>AVG</td>
<td>用于计算一个组和数据窗口内表达式的平均值。</td>
</tr>
<tr>
<td>计数</td>
<td>对一组内发生的事情进行累积计数</td>
</tr>
<tr>
<td>秩</td>
<td>根据ORDER BY子句中表达式的值，从查询返回的每一行，计算它们与其它行的相对位置</td>
</tr>
<tr>
<td>DENSE_RANK</td>
<td>根据ORDER BY子句中表达式的值，从查询返回的每一行，计算它们与其它行的相对位置</td>
</tr>
<tr>
<td>FIRST_VALUE</td>
<td>返回组<a href="https://www.baidu.com/s?wd=%E4%B8%AD%E6%95%B0%E6%8D%AE&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd">中数据</a>窗口的第一个值</td>
</tr>
<tr>
<td>LAST_VALUE</td>
<td>返回组中数据窗口的最后一个值。</td>
</tr>
<tr>
<td>落后</td>
<td>可以访问结果集中的其它行而不用进行自连接</td>
</tr>
<tr>
<td>铅</td>
<td>LEAD与LAG相反，LEAD可以访问组中当前行之后的行</td>
</tr>
<tr>
<td>ROW_NUMBER</td>
<td>返回有序组中一行的偏移量，从而可用于按特定标准排序的行号</td>
</tr>
<tr>
<td>STDDEV</td>
<td>计算当前行关于组的标准偏离</td>
</tr>
<tr>
<td>STDDEV_POP</td>
<td>该函数计算总体标准偏离，并返回总体变量的平方根</td>
</tr>
<tr>
<td>STDDEV_SAMP</td>
<td>该函数计算累积样本标准偏离，并返回总体变量的平方根</td>
</tr>
<tr>
<td>VAR_POP</td>
<td>该函数返回非空集合的总体变量（忽略null）</td>
</tr>
<tr>
<td>VAR_SAMP</td>
<td>该函数返回非空集合的样本变量（忽略null）</td>
</tr>
<tr>
<td>方差</td>
<td>如果表达式<a href="https://www.baidu.com/s?wd=%E4%B8%AD%E8%A1%8C&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd">中行</a>数为1，则返回0，如果表达式中行数大于1，则返回VAR_SAMP</td>
</tr>
<tr>
<td>CUME_DIST</td>
<td>计算一行在组中的相对位置</td>
</tr>
<tr>
<td>NTILE</td>
<td>将一个组分为“表达式”的散列表示</td>
</tr>
<tr>
<td>PERCENT_RANK</td>
<td>和CUME_DIST（累积分配）函数类似</td>
</tr>
<tr>
<td>PERCENTILE_DISC</td>
<td>返回一个与输入的分布百分比值相对应的数据值</td>
</tr>
<tr>
<td>PERCENTILE_CONT</td>
<td>返回一个与输入的分布百分比值相对应的数据值</td>
</tr>
<tr>
<td>MEDIAN</td>
<td>在一个组中的数据窗口中查找最小值与最大值的平均值</td>
</tr>
</tbody></table>
<h1 id="参数-1，…，参数-n"><a href="#参数-1，…，参数-n" class="headerlink" title="参数-1，…，参数-n"></a>参数-1，…，参数-n</h1><p>分析函数的参数</p>
<h1 id="window-partition-clause"><a href="#window-partition-clause" class="headerlink" title="window_partition_clause"></a>window_partition_clause</h1><p>根据划分表达式设置的规则， PARTITION BY （按… 划分）将一个结果逻辑分成Ñ 个分组划分表达式。在此“ 划分” 和“ 分组” 用作同义词。分析函数独立应用于各个分组，并在应用时重置。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">OVER</span>（<span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> expression <span class="token punctuation">[</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>）</code></pre>
<h1 id="window-order-clause"><a href="#window-order-clause" class="headerlink" title="window_order_clause"></a>window_order_clause</h1><p>ORDER BY （按… 排序）语句规定了每个分组（划分）的数据如何排序。这些必然影响分析函数的结果。</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">OVER</span>（<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> expression <span class="token punctuation">[</span>{<span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span>}<span class="token punctuation">]</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span>NULLS {<span class="token keyword">FIRST</span> <span class="token operator">|</span> <span class="token keyword">LAST</span> <span class="token operator">|</span> AUTO}<span class="token punctuation">]</span> <span class="token punctuation">[</span>，expression <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>）</code></pre>
<h1 id="window-frame-clause"><a href="#window-frame-clause" class="headerlink" title="window_frame_clause"></a>window_frame_clause</h1><p>窗口生成语句用以定义滑动或固定数据窗口，分析函数在分组内进行分析。该语句能够对分组中任意定义的滑动或固定窗口进行计算。</p>
]]></content>
      <categories>
        <category>Vertica</category>
      </categories>
      <tags>
        <tag>Vertica</tag>
      </tags>
  </entry>
  <entry>
    <title>使用webpack构建vue项目</title>
    <url>/2019/10/20/web-vue-starter/</url>
    <content><![CDATA[<h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><p><a href="https://nodejs.org/zh-cn/download/">Nodejs 官网下载地址</a></p>
<p>推荐下载LTS长期支持版本，然后下一步安装即可</p>
<h2 id="查看-node版本"><a href="#查看-node版本" class="headerlink" title="查看 node版本"></a>查看 node版本</h2><pre class=" language-shell"><code class="language-shell">node -v

# 结果
➜  ~ node -v
v10.16.3
➜  ~</code></pre>
<h2 id="查看-npm-版本"><a href="#查看-npm-版本" class="headerlink" title="查看 npm 版本"></a>查看 npm 版本</h2><pre class=" language-shell"><code class="language-shell">npm -v

# 结果
➜  ~ npm -v
6.11.3
➜  ~</code></pre>
<h1 id="安装vue组件以及webpack"><a href="#安装vue组件以及webpack" class="headerlink" title="安装vue组件以及webpack"></a>安装vue组件以及webpack</h1><h2 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 @vue/cli"></a>安装 @vue/cli</h2><pre class=" language-shell"><code class="language-shell">npm install -g @vue/cli</code></pre>
<h2 id="安装-vue-cli-init"><a href="#安装-vue-cli-init" class="headerlink" title="安装 @vue/cli-init"></a>安装 @vue/cli-init</h2><pre class=" language-shell"><code class="language-shell">npm install -g @vue/cli-init</code></pre>
<h2 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h2><pre class=" language-shell"><code class="language-shell">npm install webpack webpack-cli -g</code></pre>
<h1 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h1><pre class=" language-javascript"><code class="language-javascript">vue create vue<span class="token operator">-</span>template</code></pre>
<p>输入<code>vue create vue-template</code>以后，按照提示选择对应的选型，即可创建一个vue脚手架项目</p>
<h1 id="常用学习网站"><a href="#常用学习网站" class="headerlink" title="常用学习网站"></a>常用学习网站</h1><blockquote>
<p>Vue官网：<a href="https://cn.vuejs.org/index.html">https://cn.vuejs.org/index.html</a></p>
<p>Vue路由：<a href="https://router.vuejs.org/">https://router.vuejs.org/</a></p>
<p>Vuex：<a href="https://vuex.vuejs.org/zh/guide/">https://vuex.vuejs.org/zh/guide/</a></p>
<p>ES6语法：<a href="http://es6.ruanyifeng.com/">http://es6.ruanyifeng.com/</a></p>
<p>JS工具库：<a href="https://www.lodashjs.com/docs/latest">https://www.lodashjs.com/docs/latest</a></p>
<p>日期处理：<a href="http://momentjs.cn/docs/">http://momentjs.cn/docs/</a></p>
<p>网络请求：<a href="http://www.axios-js.com/zh-cn/docs/">http://www.axios-js.com/zh-cn/docs/</a></p>
<p>CSS预编译：<a href="https://www.sass.hk/docs/">https://www.sass.hk/docs/</a></p>
<p>Babel：<a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">http://www.ruanyifeng.com/blog/2016/01/babel.html</a></p>
<p>Flex布局：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool</a></p>
<p>HTML教程：<a href="https://www.w3school.com.cn/html/index.asp">https://www.w3school.com.cn/html/index.asp</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下安装MySQL-5.7.17解压版</title>
    <url>/2018/08/10/windows-install-mysql-5-7-17/</url>
    <content><![CDATA[<h1 id="下载MySQL-Community-Server"><a href="#下载MySQL-Community-Server" class="headerlink" title="下载MySQL Community Server"></a>下载MySQL Community Server</h1><p>地址：<a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a></p>
<p>选择Windows (x86, 64-bit), ZIP Archive进行下载。</p>
<p>现在最新版本是5.7.19，笔者这里是5.7.17</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-73ecf6d14210466b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载mysql"></p>
<h1 id="配置mysql-环境变量"><a href="#配置mysql-环境变量" class="headerlink" title="配置mysql 环境变量"></a>配置mysql 环境变量</h1><p>我这里将下载好的mysql-5.7.17 解压到 C:\Program Files\mysql-5.7.17-winx64</p>
<p>配置</p>
<p><strong>MYSQL_HOME  —&gt;  C:\Program Files\mysql-5.7.17-winx64</strong></p>
<p><strong>Path 环境变量中加入    %MYSQL_HOME%/bin;</strong></p>
<p>注意如果path最后一个没有; 记得自己手动添加;</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-c82f23f38b84c1ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="配置环境变量"></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-1ed35c42cf341d90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/7779890-a0475d1295ec9ce4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="配置MYSQL_HOME"> </p>
<h1 id="修改mysql-配置文件"><a href="#修改mysql-配置文件" class="headerlink" title="修改mysql 配置文件"></a>修改mysql 配置文件</h1><p>复制解压目录下的 my-default.ini 文件将名称修改为 my.ini 修改文件内容</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-a6de142ab813ad8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="复制 my.ini 文件"></p>
<p>打开 my.ini 修改文件内容</p>
<p>basedir = C:\Program Files\mysql-5.7.17-winx64</p>
<p>datadir = C:\Program Files\mysql-5.7.17-winx64\data</p>
<p>port = 3306</p>
<p>注意：去掉源文件上述三行前面的#</p>
<p><img src="https://upload-images.jianshu.io/upload_images/7779890-01482d69cb731a3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="配置 my.ini 文件"> </p>
<h1 id="注册windows系统服务"><a href="#注册windows系统服务" class="headerlink" title="注册windows系统服务"></a>注册windows系统服务</h1><p>以管理员权限打开cmd</p>
<p>执行</p>
<p>mysqld install MySQL –defaults-file=”C:\Program Files\mysql-5.7.17-winx64\my.ini”</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-4b560979e280ef7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="安装windows系统服务"></p>
<p>注册表中查看ImagePath的值</p>
<p>我的为</p>
<p>“C:\Program Files\mysql-5.7.17-winx64\bin\mysqld” –defaults-file=”C:\Program Files\mysql-5.7.17-winx64\my.ini” MySQL</p>
<p>其中包含了mysqld，就不修改了。</p>
<p>注册表位置为：</p>
<p>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\MySQL</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-764ad0cb56f7a1b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="查看注册表"></p>
<h1 id="执行mysqld-–initialize进行初始化（生成data目录"><a href="#执行mysqld-–initialize进行初始化（生成data目录" class="headerlink" title="执行mysqld –initialize进行初始化（生成data目录"></a>执行mysqld –initialize进行初始化（生成data目录</h1><p><strong>执行 mysqld –initialize</strong></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-54c06e5e88d80d03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="生成data目录"></p>
<h1 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h1><p>执行 net start mysql</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-36b66e48a493be78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="启动mysql服务"></p>
<h1 id="登录mysql-修改-root-账户默认密码"><a href="#登录mysql-修改-root-账户默认密码" class="headerlink" title="登录mysql 修改 root 账户默认密码"></a>登录mysql 修改 root 账户默认密码</h1><p>默认密码保存在生成data目录下面的 .err 文件中 记事本打开以后查找初始化密码</p>
<p>A temporary password is generated for root@localhost: [密码]</p>
<p>我的为</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-f6105fb43d110ed3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="查看mysql默认密码"></p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-cee82bdbca026017.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="查看mysql默认密码"></p>
<p>执行 mysql –uroot –p  复制刚刚上面的初始化密码完成登录</p>
<p>修改默认密码</p>
<p>执行 SET PASSWORD = PASSWORD(‘’);  我这里将密码设置为空</p>
<p>执行完成以后退出mysql 就可以使用新密码进行登录了</p>
<p><img src="https://upload-images.jianshu.io/upload_images/7779890-2e1ff6ff641fc0a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="使用默认密码登录mysql"> </p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-78b583f159ef7e16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="修改root账户密码为空"></p>
<h1 id="修改mysql-默认编码"><a href="#修改mysql-默认编码" class="headerlink" title="修改mysql 默认编码"></a>修改mysql 默认编码</h1><p>执行 show variables like ‘character_set_%’;  查看 mysql 编码</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-f980b405e8a7a985.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p>
<p>查看mysql默认编码字符</p>
<p>修改 my.ini 文件</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-592115d4c335f4fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p>
<p>修改配置mysql编码</p>
<p>重启mysql</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-b9fe603076e9cbb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p>
<p>重启mysql并且重新登录</p>
<p>执行 show variables like ‘character_set_%’;  查看 mysql 编码</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/7779890-ce2989ab8b44781e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p>
<p>查看修改以后的编码字符 utf8</p>
<p>注意：</p>
<p>网上很多资源都是在[mysqld]下添加</p>
<p>default-character-set=utf8</p>
<p>如果这样改会导致5.7版本mysql无法打开</p>
<p>所以要改为</p>
<p>character-set-server=utf8</p>
<p>改完后，要删除数据库中所有数据，才能使用。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>vertica开启ROS</title>
    <url>/2020/03/12/vertica-enable-ros/</url>
    <content><![CDATA[<p>vertica默认批量插入是关闭的，需要手动设置<code>DataSourceProperties</code>开启，详细参考<code>JDBC Connection Properties</code>，文档中该参数介绍如下：</p>
<ul>
<li>DirectBatchInsert</li>
</ul>
<blockquote>
<p>Determines whether a batch insert stored data directly into <a href="../../Glossary/ROSReadOptimizedStore.htm">ROS</a> (true) or using <a href="javascript:void(0);">AUTO</a> mode (false).</p>
<p>When you load data using AUTO mode, Vertica inserts the data first into the <a href="../../Glossary/WOSWriteOptimizedStore.htm">WOS</a>. If the WOS is full, Vertica inserts the data directly into <a href="../../Glossary/ROSReadOptimizedStore.htm">ROS</a>. For details about load options, see <a href="../../AdministratorsGuide/BulkLoadCOPY/ChoosingALoadMethod.htm">Choosing a Load Method</a>.</p>
<p><strong>Set After Connection:</strong><code> VerticaConnection.setProperty()</code></p>
<p><strong>Default Value:</strong> false</p>
</blockquote>
<p>在jdbc方式和spring中集成数据源方式略有不同，下面分开介绍</p>
<h3 id="JDBC方式"><a href="#JDBC方式" class="headerlink" title="JDBC方式"></a><code>JDBC</code>方式</h3><p>jdbc方式配置比较灵活，可以在<code>DriverManager.getConnection</code>获取连接设置属性</p>
<p>也可以获取到<code>connection</code>以后设置</p>
<ul>
<li>获取连接时</li>
</ul>
<pre class=" language-java"><code class="language-java">Properties myProp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myProp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"ExampleUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myProp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"password123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Enable directBatchInsert for this connection</span>
myProp<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"DirectBatchInsert"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Connection conn<span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>
         <span class="token string">"jdbc:vertica://VerticaHost:5433/ExampleDB"</span><span class="token punctuation">,</span> myProp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span> <span class="token punctuation">.</span> <span class="token punctuation">.</span></code></pre>
<ul>
<li>获取连接后</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token punctuation">(</span>VerticaConnection<span class="token punctuation">)</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"DirectBatchInsert"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="使用HikariDataSource连接池"><a href="#使用HikariDataSource连接池" class="headerlink" title="使用HikariDataSource连接池"></a>使用<code>HikariDataSource</code>连接池</h3><p>当我们使用spring框架开发时，一般会使用数据库连接池对象，spring boot中默认的连接池是<code>HikariCP</code>，下面介绍``HikariCP`如何配置该参数，思路可以参考使用jdbc时获取连接以后的方式。</p>
<p>但是又因为spring中的bean是基于proxy进行创建的，所有我们获取到的连接对象不再是<code>VerticaConnection</code>，而是<code>HikariProxyConnection</code>，但是该对象并没有<code>setProperty()</code>方法，所以<strong>不能使用强制类型转换并且设置该属性</strong>。</p>
<pre class=" language-java"><code class="language-java">Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> flag1 <span class="token operator">=</span> connection <span class="token keyword">instanceof</span> <span class="token class-name">com<span class="token punctuation">.</span>vertica<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>VerticaConnection</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
<span class="token keyword">boolean</span> flag2 <span class="token operator">=</span> connection <span class="token keyword">instanceof</span> <span class="token class-name">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>HikariProxyConnection</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre>
<p><strong>正确做法如下：</strong></p>
<p>获取到当前连接的<code>HikariDataSource</code>对象，然后给该对象设置<code>DataSourceProperties</code>即可开启<code>ROS</code>，并且可以使用连接池管理<code>jdbc</code>连接</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> DataSource <span class="token function">config</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">,</span> HikariConfig config<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isVertica<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  HikariDataSource hikariDataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSource <span class="token keyword">instanceof</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 连接池配置</span>
    hikariDataSource <span class="token operator">=</span> <span class="token punctuation">(</span>HikariDataSource<span class="token punctuation">)</span> dataSource<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>isVertica<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// Loading Batches Directly into ROS Enable directBatchInsert for this connection</span>
      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"DirectBatchInsert"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      hikariDataSource<span class="token punctuation">.</span><span class="token function">setDataSourceProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    hikariDataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getPoolName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hikariDataSource<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hikariDataSource<span class="token punctuation">.</span><span class="token function">setConnectionTestQuery</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getConnectionTestQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hikariDataSource<span class="token punctuation">.</span><span class="token function">setIdleTimeout</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getIdleTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hikariDataSource<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hikariDataSource<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hikariDataSource<span class="token punctuation">.</span><span class="token function">setMaxLifetime</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMaxLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    hikariDataSource<span class="token punctuation">.</span><span class="token function">setMinimumIdle</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMinimumIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> hikariDataSource <span class="token operator">==</span> null <span class="token operator">?</span> dataSource <span class="token operator">:</span> hikariDataSource<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Vertica</category>
      </categories>
      <tags>
        <tag>Vertica</tag>
      </tags>
  </entry>
  <entry>
    <title>小张哥</title>
    <url>/2018/09/05/wei-ni-xiong/</url>
    <content><![CDATA[<p>记录工作中的一些问题和笔记。</p>
]]></content>
      <tags>
        <tag>有心怎么会做不到</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-责任链设计模式</title>
    <url>/2021/10/20/design-patterns-responsibility-chain-design-pattern/</url>
    <content><![CDATA[<p>最近我们要将业务数据统计链路进行抽象, 用户数据链路, 订单数据链路, 仓库数据链路, 还有通用的数据链路, 如何将这些链路统一抽象出来呢?目前研究了两类设计模式: 责任链设计模式和模板方法设计模式. 今天先来说说责任链设计模式.</p>
<p>其实, 说到责任链设计模式, 我们平时使用的也真是挺多的. 比如: 天天用的网关过滤器, 我们请假的审批流, 打游戏通关, 我们写代码常用的日志打印. 他们都使用了责任链设计模式.</p>
<p>下面就来详细研究一下责任链设计模式</p>
<h3 id="一-什么是责任链设计模式"><a href="#一-什么是责任链设计模式" class="headerlink" title="一. 什么是责任链设计模式?"></a>一. 什么是责任链设计模式?</h3><blockquote>
<p>官方定义:<br>责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。<br>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>
</blockquote>
<blockquote>
<p>大白话:<br>定义中提到的两个主体: 请求的发送者和请求的接收者. 用员工请假来举例. 请求发送者是员工, 请求接收者是主管们.<br>「对请求的发送者和接收者进行解耦」: 意思就是员工发起请假申请和主管审批请假解耦.<br>「为请求创建了一个接收者对象的链」: 意思是接收者有多个, 实现了多个接收者进行审批的链条.</p>
</blockquote>
<h3 id="二-责任链设计模式的使用场景"><a href="#二-责任链设计模式的使用场景" class="headerlink" title="二. 责任链设计模式的使用场景"></a>二. 责任链设计模式的使用场景</h3><ul>
<li>网关过滤器: 一个url请求过来, 首先要校验url是否是合法的, 不合法过滤掉, 合法进入下一层校验; 是否是在黑名单中, 如果在过滤掉,不在进行下一层校验; 校验参数是否合规, 不合规过滤掉, 合规进入下一层校验, 等等.</li>
<li>请假审批流: 请假天数小于3天, 直属领导审批即可; 天数大于3天,小于10天, 要部门主管审批; 天数大于10天要总经理审批</li>
<li>戏通关: 完成第一关, 并且分数&gt;90, 才能进入第二关; 完成第二关, 分数&gt;80, 才能进入第三关等等</li>
<li>日志处理: 日志的级别从小到大分别是: dubug, info ,warn, error <ul>
<li>console控制台: 控制台接收debug级别的日志, 那么所有debug, info, warn, error日志内容都打印在console控制台中.</li>
<li>file文件: file接收info级别的日志. 那么info, warn, error级别的日志都会打印到file文件中, 但是debug日志不会打印</li>
<li>error文件: 只接收error级别的日志, 其他界别的日志都不接收.<h3 id="三-责任链设计模式的实现思路"><a href="#三-责任链设计模式的实现思路" class="headerlink" title="三. 责任链设计模式的实现思路"></a>三. 责任链设计模式的实现思路</h3>下面以一个简单的案例[<code>请假审批流</code>]来介绍责任链的实现<h4 id="1-需求"><a href="#1-需求" class="headerlink" title="1. 需求:"></a>1. 需求:</h4>有一个员工小力, 他要请求. 公司规定, 请假3天以内, 直属领导就可以审批. 请假3-10天, 需要部门经理审批. 请假大于10天需要总经理审批.<h4 id="2-通常实现方式"><a href="#2-通常实现方式" class="headerlink" title="2. 通常实现方式"></a>2. 通常实现方式</h4>这个审批流, 我们第一想法是使用if…else…来写.<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">approve</span><span class="token punctuation">(</span>Integer days<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>days <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 直属领导审批</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>days <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> days <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 部门经理审批</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>days <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 总经理审批</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
这样写确实可以实现。 但是他有几个缺点：<blockquote>
<p>1.这个审批方法很长，一大段代码看起来并不美观。 这里看着代码很少,那是因为我没有具体实现审批逻辑, 当审批人很多的时候, if…else…也会很多，就会显得很臃肿了。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p> 2.可扩展性差： 加入现在要在部门经理和总经理之间在家一个审批流。 我们要修改原来的代码，修改原来的代码，就有可能引入bug， 违背了开放-封闭原则。<br> 3.违背单一职责原则：这个类承担了多个角色的多个责任，违背了单一职责原则。<br> 4.不能跨级别审批：加入有一个特殊的人，他请假3天，也需要总经理审批，这个if…else…就没法实现了。</p>
<p>既然可能增加多个审批人，我们可以考虑将具体的审批人做成审批者的子类，利用多态来实现。</p>
<h3 id="3-责任链实现方式"><a href="#3-责任链实现方式" class="headerlink" title="3. 责任链实现方式"></a>3. 责任链实现方式</h3><h4 id="第一步-小力请假-定义一个请假实体类LeaveRequest。这就是请求的发出者"><a href="#第一步-小力请假-定义一个请假实体类LeaveRequest。这就是请求的发出者" class="headerlink" title="第一步: 小力请假, 定义一个请假实体类LeaveRequest。这就是请求的发出者"></a>第一步: 小力请假, 定义一个请假实体类LeaveRequest。这就是请求的发出者</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaveRequest</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 请假的人
     */</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 请假的天数
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> days<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LeaveRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">LeaveRequest</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> days<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>days <span class="token operator">=</span> days<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>有两个属性, 谁请假(name), 请了几天(days).</p>
<h4 id="第二步-抽象请假审批者"><a href="#第二步-抽象请假审批者" class="headerlink" title="第二步: 抽象请假审批者"></a>第二步: 抽象请假审批者</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 抽象的请假处理类
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LeaveHandler</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 处理人姓名
     */</span>
    <span class="token keyword">private</span> String handlerName<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 下一个处理人
     */</span>
    <span class="token keyword">private</span> LeaveHandler nextHandler<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextHandler</span><span class="token punctuation">(</span>LeaveHandler leaveHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> leaveHandler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">LeaveHandler</span><span class="token punctuation">(</span>String handlerName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handlerName <span class="token operator">=</span> handlerName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 具体的处理操作
     * @param leaveRequest
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>LeaveRequest leaveRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这里定义了如下内容:</p>
<blockquote>
<p>1.审批者姓名,<br>2.审批人要执行的操作process()方法。审批的内容是请假信息, 返回值是审批结果，通过或者不通过<br>3.下一个处理者nextHandler：这是重点。也是我们链条能够连续执行的关键。</p>
</blockquote>
<h4 id="第三步：定义具体的操作者"><a href="#第三步：定义具体的操作者" class="headerlink" title="第三步：定义具体的操作者"></a>第三步：定义具体的操作者</h4><ul>
<li>直属领导处理类：DirectLeaveHandler.java</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 天数小于3天, 直属领导处理
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectLeaveHandler</span> <span class="token keyword">extends</span> <span class="token class-name">LeaveHandler</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">DirectLeaveHandler</span><span class="token punctuation">(</span>String directName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>directName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>LeaveRequest leaveRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 随机数大于3则为批准，否则不批准</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandlerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"审批驳回"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leaveRequest<span class="token punctuation">.</span><span class="token function">getDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 审批通过</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandlerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"审批完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandlerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"审批完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>leaveRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这里模拟了领导审批的流程. 如果小于3天, 直属领导直接审批, 可能通过, 可能不通过. 如果超过3天, 提交给下一级领导审批.</p>
<ul>
<li><p>部门经理处理类: ManagerLeaveHandler</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManagerLeaveHandler</span> <span class="token keyword">extends</span> <span class="token class-name">LeaveHandler</span><span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token function">ManagerLeaveHandler</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>LeaveRequest leaveRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 随机数大于3则为批准，否则不批准</span>
      <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandlerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"审批驳回"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leaveRequest<span class="token punctuation">.</span><span class="token function">getDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> leaveRequest<span class="token punctuation">.</span><span class="token function">getDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandlerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"审批完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandlerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"审批完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNextHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>leaveRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>部门经理处理的是3-10天的假期, 如果超过10天, 还要交由下一级领导审批</p>
</li>
<li><p>总经理处理类:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeneralManagerLeavHandler</span> <span class="token keyword">extends</span> <span class="token class-name">LeaveHandler</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">GeneralManagerLeavHandler</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>LeaveRequest leaveRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 随机数大于3则为批准，否则不批准</span>
      <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandlerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"审批驳回"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getHandlerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"审批完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>左右最终流转到总经理的假期都会被审批</p>
<h4 id="第四步-定义客户端发起请求操作"><a href="#第四步-定义客户端发起请求操作" class="headerlink" title="第四步: 定义客户端发起请求操作"></a>第四步: 定义客户端发起请求操作</h4></li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DirectLeaveHandler directLeaveHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectLeaveHandler</span><span class="token punctuation">(</span><span class="token string">"直属主管"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ManagerLeaveHandler managerLeaveHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManagerLeaveHandler</span><span class="token punctuation">(</span><span class="token string">"部门经理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        GeneralManagerLeavHandler generalManagerLeavHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneralManagerLeavHandler</span><span class="token punctuation">(</span><span class="token string">"总经理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        directLeaveHandler<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>managerLeaveHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        managerLeaveHandler<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>generalManagerLeavHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========张三请假2天=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LeaveRequest lxl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaveRequest</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        directLeaveHandler<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>lxl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========李四请假6天=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LeaveRequest wangxiao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaveRequest</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        directLeaveHandler<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>wangxiao<span class="token punctuation">)</span><span class="token punctuation">;</span>


        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========王五请假30天=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LeaveRequest yongMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeaveRequest</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        directLeaveHandler<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>yongMing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这里我们创建了一个直属领导, 一个部门经理,一个总经理. 并设置了上下级关系.<br>然后根据员工请假的天数来判断, 应该如何审批.<br>对于用户而言,他不需要知道前面有多少个领导需要审批. 他只需要提交给第一个领导, 也就是直属领导, 然后不断往下走审批就可以了. 也就是说，在责任链设计模式中，我们只需要拿到链上的第一个处理者，那么链上的每个处理者都有机会处理相应的请求。</p>
<p>以上代码基本上概括了责任链设计模式的使用，但是上述客户端的代码其实也是很繁琐的，后面我们会继续优化责任链设计模式。</p>
<h4 id="第五步-查看结果"><a href="#第五步-查看结果" class="headerlink" title="第五步: 查看结果"></a>第五步: 查看结果</h4><p>由于请假是随机了, 还有可能被驳回. 我们先来看看全部同意的请求结果</p>
<pre class=" language-text"><code class="language-text">========张三请假2天==========
直属主管审批完成
========李四请假6天==========
直属主管审批完成
部门经理审批完成
========王五请假30天==========
直属主管审批完成
部门经理审批完成
总经理审批完成</code></pre>
<p>再来看看有驳回的请求结果</p>
<pre class=" language-text"><code class="language-text">========张三请假2天==========
直属主管审批驳回
========李四请假6天==========
直属主管审批驳回
========王五请假30天==========
直属主管审批完成
部门经理审批驳回</code></pre>
<h4 id="4-责任链概念抽象总结"><a href="#4-责任链概念抽象总结" class="headerlink" title="4. 责任链概念抽象总结"></a>4. 责任链概念抽象总结</h4><p><img src="/images/design-patterns-responsibility-chain-design-pattern/design-patterns-responsibility-chain-design-pattern-interface-abstruct.png" alt="design-patterns-responsibility-chain-design-pattern-interface-abstruct.png"><br>责任链设计模式: 客户端发出一个请求，链上的对象都有机会来处理这一请求，而客户端不需要知道谁是具体的处理对象。多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。 将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止</p>
<p>上面的代码基本上概括了责任链设计模式的使用，但是上述客户端的代码其实也是很繁琐的，后面我优化责任链设计模式。</p>
<h4 id="5-责任链设计模式的优缺点"><a href="#5-责任链设计模式的优缺点" class="headerlink" title="5. 责任链设计模式的优缺点"></a>5. 责任链设计模式的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>动态组合，使请求者和接受者解耦。<br>请求者和接受者松散耦合：请求者不需要知道接受者，也不需要知道如何处理。每个职责对象只负责自己的职责范围，其他的交给后继者。各个组件间完全解耦。<br>动态组合职责：职责链模式会把功能分散到单独的职责对象中，然后在使用时动态的组合形成链，从而可以灵活的分配职责对象，也可以灵活的添加改变对象职责。</p>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>产生很多细粒度的对象：因为功能处理都分散到了单独的职责对象中，每个对象功能单一，要把整个流程处理完，需要很多的职责对象，会产生大量的细粒度职责对象。<br>不一定能处理：每个职责对象都只负责自己的部分，这样就可以出现某个请求，即使把整个链走完，都没有职责对象处理它。这就需要提供默认处理，并且注意构造链的有效性。</p>
<h3 id="四-综合案例-–-网关权限控制"><a href="#四-综合案例-–-网关权限控制" class="headerlink" title="四. 综合案例 – 网关权限控制"></a>四. 综合案例 – 网关权限控制</h3><h4 id="1-明确需求"><a href="#1-明确需求" class="headerlink" title="1. 明确需求"></a>1. 明确需求</h4><p>网关有很多功能: API接口限流, 黑名单拦截, 权限验证, 参数过滤等. 下面我们就通过责任链设计模式来实现网关权限控制。</p>
<h4 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h4><p>来看一下下面的类图.<br><img src="/images/design-patterns-responsibility-chain-design-pattern/design-patterns-responsibility-chain-design-pattern-abstract-gateway-handler.image" alt="design-patterns-responsibility-chain-design-pattern-abstract-gateway-handler.image"><br>可以看到定义了一个抽象的网关处理器. 然后有4个子处理器的实现类.</p>
<h4 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h4><h5 id="第一步-定义抽象的网关处理器类"><a href="#第一步-定义抽象的网关处理器类" class="headerlink" title="第一步: 定义抽象的网关处理器类"></a>第一步: 定义抽象的网关处理器类</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 定义抽象的网关处理器类
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractGatewayHandler</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 定义下一个网关处理器
     */</span>
    <span class="token keyword">protected</span> AbstractGatewayHandler nextGatewayHandler<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextGatewayHandler</span><span class="token punctuation">(</span>AbstractGatewayHandler nextGatewayHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler <span class="token operator">=</span> nextGatewayHandler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 抽象网关执行的服务
     * @param url
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="第二步-定义具体的网关服务"><a href="#第二步-定义具体的网关服务" class="headerlink" title="第二步: 定义具体的网关服务"></a>第二步: 定义具体的网关服务</h4><h5 id="1-API接口限流处理器"><a href="#1-API接口限流处理器" class="headerlink" title="1. API接口限流处理器"></a>1. API接口限流处理器</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * API接口限流处理器
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">APILimitGatewayHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"api接口限流处理, 处理完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现具体的限流服务流程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-黑名单拦截处理器"><a href="#2-黑名单拦截处理器" class="headerlink" title="2. 黑名单拦截处理器"></a>2. 黑名单拦截处理器</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 黑名单处理器
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlankListGatewayHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"黑名单处理, 处理完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 实现具体的限流服务流程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-权限验证处理器"><a href="#3-权限验证处理器" class="headerlink" title="3. 权限验证处理器"></a>3. 权限验证处理器</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 权限验证处理器
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermissionValidationGatewayHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"权限验证处理, 处理完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现具体的限流服务流程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-参数校验处理器"><a href="#4-参数校验处理器" class="headerlink" title="4. 参数校验处理器"></a>4. 参数校验处理器</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 参数校验处理器
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterVerificationGatewayHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数校验处理, 处理完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 实现具体的限流服务流程</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nextGatewayHandler<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="第三步-定义网关客户端-设置网关请求链"><a href="#第三步-定义网关客户端-设置网关请求链" class="headerlink" title="第三步: 定义网关客户端, 设置网关请求链"></a>第三步: 定义网关客户端, 设置网关请求链</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 网关客户端
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        APILimitGatewayHandler apiLimitGatewayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">APILimitGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BlankListGatewayHandler blankListGatewayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlankListGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ParameterVerificationGatewayHandler parameterVerificationGatewayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterVerificationGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PermissionValidationGatewayHandler permissionValidationGatewayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PermissionValidationGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        apiLimitGatewayHandler<span class="token punctuation">.</span><span class="token function">setNextGatewayHandler</span><span class="token punctuation">(</span>blankListGatewayHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        blankListGatewayHandler<span class="token punctuation">.</span><span class="token function">setNextGatewayHandler</span><span class="token punctuation">(</span>parameterVerificationGatewayHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameterVerificationGatewayHandler<span class="token punctuation">.</span><span class="token function">setNextGatewayHandler</span><span class="token punctuation">(</span>permissionValidationGatewayHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        apiLimitGatewayHandler<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这里和之前差不多, 不做太多解释了, 来看运行效果:</p>
<pre class=" language-text"><code class="language-text">api接口限流处理, 处理完成
黑名单处理, 处理完成
参数校验处理, 处理完成
权限验证处理, 处理完成</code></pre>
<p>这样就进行了一系列的网关处理. 当然, 每一次处理都应该返回处理结果, 然后决定是否进行下一次处理. 这里就简化了</p>
<h4 id="第四步-使用工厂模式优化责任链设计模式"><a href="#第四步-使用工厂模式优化责任链设计模式" class="headerlink" title="第四步: 使用工厂模式优化责任链设计模式"></a>第四步: 使用工厂模式优化责任链设计模式</h4><p>在第三步网关客户端中，对责任链进行了初始化操作。 这样, 每次客户端想要发起请求都需要执行一遍初始化操作, 其实完全没有这个必要. 我们可以使用工厂设计模式, 将客户端抽取到工厂中, 每次只需要拿到链上的第一个处理者就可以了.</p>
<h5 id="1-定义网关处理器工厂"><a href="#1-定义网关处理器工厂" class="headerlink" title="1. 定义网关处理器工厂"></a>1. 定义网关处理器工厂</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 网关处理器工厂
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayHandlerFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> AbstractGatewayHandler <span class="token function">getFirstGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        APILimitGatewayHandler apiLimitGatewayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">APILimitGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BlankListGatewayHandler blankListGatewayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlankListGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ParameterVerificationGatewayHandler parameterVerificationGatewayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterVerificationGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PermissionValidationGatewayHandler permissionValidationGatewayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PermissionValidationGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        apiLimitGatewayHandler<span class="token punctuation">.</span><span class="token function">setNextGatewayHandler</span><span class="token punctuation">(</span>blankListGatewayHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        blankListGatewayHandler<span class="token punctuation">.</span><span class="token function">setNextGatewayHandler</span><span class="token punctuation">(</span>parameterVerificationGatewayHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameterVerificationGatewayHandler<span class="token punctuation">.</span><span class="token function">setNextGatewayHandler</span><span class="token punctuation">(</span>permissionValidationGatewayHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> apiLimitGatewayHandler<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>网关处理器工厂定义了各个网关处理器之间的关系, 并返回第一个网关处理器.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 网关客户端
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        GatewayHandlerFactory<span class="token punctuation">.</span><span class="token function">getFirstGatewayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>我们在客户端只需要直接调用第一个网关处理器就可以了, 不需要关心其他的处理器.</p>
<h3 id="五-责任链模式总结"><a href="#五-责任链模式总结" class="headerlink" title="五. 责任链模式总结"></a>五. 责任链模式总结</h3><blockquote>
<p>1.定义一个抽象的父类, 在抽象的父类中定义请求处理的方法 和 下一个处理者.<br>2.然后子类处理器继承分类处理器, 并实现自己的请求处理方法<br>3.设置处理请求链, 可以采用工厂设计模式抽象, 请求者只需要知道整个链条的第一环</p>
</blockquote>
]]></content>
      <categories>
        <category>design pattern</category>
      </categories>
      <tags>
        <tag>design pattern</tag>
        <tag>chain of responsibility</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker-compose构建kafka集群</title>
    <url>/2018/07/28/docker-compose-zk-kafka/</url>
    <content><![CDATA[<p>  上篇说到了docker-compose的一些基本命令，这次使用docker-compose构建kafka集群。在说kafka之前，先简单了解一下kafka是什么东西。</p>
<h2 id="Kafka创建背景"><a href="#Kafka创建背景" class="headerlink" title="Kafka创建背景"></a>Kafka创建背景</h2><p>Kafka是一个消息系统，原本开发自LinkedIn，用作LinkedIn的活动流（Activity Stream）和运营数据处理管道（Pipeline）的基础。现在它已被多家不同类型的公司作为多种类型的数据管道和消息系统使用。</p>
<p>活动流数据是几乎所有站点在对其网站使用情况做报表时都要用到的数据中最常规的部分。活动数据包括页面访问量（Page View）、被查看内容方面的信息以及搜索情况等内容。这种数据通常的处理方式是先把各种活动以日志的形式写入某种文件，然后周期性地对这些文件进行统计分析。运营数据指的是服务器的性能数据（CPU、IO使用率、请求时间、服务日志等等数据)。运营数据的统计方法种类繁多。</p>
<p>近年来，活动和运营数据处理已经成为了网站软件产品特性中一个至关重要的组成部分，这就需要一套稍微更加复杂的基础设施对其提供支持。</p>
<h2 id="Kafka简介"><a href="#Kafka简介" class="headerlink" title="Kafka简介"></a>Kafka简介</h2><p>Kafka是一种分布式的，基于发布/订阅的消息系统。主要设计目标如下：</p>
<ul>
<li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间复杂度的访问性能。</li>
<li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条以上消息的传输。</li>
<li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个Partition内的消息顺序传输。</li>
<li>同时支持离线数据处理和实时数据处理。</li>
<li>Scale out：支持在线水平扩展。</li>
</ul>
<h3 id="为何使用消息系统"><a href="#为何使用消息系统" class="headerlink" title="为何使用消息系统"></a>为何使用消息系统</h3><ul>
<li><p>解耦</p>
<p>在项目启动之初来预测将来项目会碰到什么需求，是极其困难的。消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</p>
</li>
<li><p>冗余</p>
</li>
</ul>
<p>  有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。</p>
<ul>
<li><p>扩展性</p>
<p>因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。扩展就像调大电力按钮一样简单。</p>
</li>
<li><p>灵活性 &amp; 峰值处理能力</p>
<p>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p>
</li>
<li><p>可恢复性</p>
<p>系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</p>
</li>
<li><p>顺序保证</p>
<p>在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。Kafka保证一个Partition内的消息的有序性。</p>
</li>
<li><p>缓冲</p>
<p>在任何重要的系统中，都会有需要不同的处理时间的元素。例如，加载一张图片比应用过滤器花费更少的时间。消息队列通过一个缓冲层来帮助任务最高效率的执行———写入队列的处理会尽可能的快速。该缓冲有助于控制和优化数据流经过系统的速度。</p>
</li>
<li><p>异步通信</p>
<p>很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</p>
</li>
</ul>
<h2 id="常用Message-Queue对比"><a href="#常用Message-Queue对比" class="headerlink" title="常用Message Queue对比"></a>常用Message Queue对比</h2><ul>
<li><p><strong>RabbitMQ</strong></p>
<p>RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</p>
</li>
<li><p><strong>Redis</strong></p>
<p>Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p>
</li>
<li><p><strong>ZeroMQ</strong></p>
<p>ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZeroMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演这个服务器角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</p>
</li>
<li><p><strong>ActiveMQ</strong></p>
<p>ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</p>
</li>
<li><p><strong>Kafka/Jafka</strong></p>
<p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现负载均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。</p>
</li>
</ul>
<h2 id="构建zookeeper、kakfa集群"><a href="#构建zookeeper、kakfa集群" class="headerlink" title="构建zookeeper、kakfa集群"></a>构建zookeeper、kakfa集群</h2><p>  首先kafka依赖于zookeeper，所以在构建kafka集群之前我们先来构建zookeeper集群，zookeeper的集群构建方式很简单，docker官网都有给出docker-compose文件。zookeeper有官方镜像，kakfa暂时还没有，所以我们选择了一个github上目前star最高的镜像<a href="https://github.com/wurstmeister/kafka-docker"><strong>kafka-docker</strong></a>。</p>
<h3 id="编写zookeeper的docker-compose文件"><a href="#编写zookeeper的docker-compose文件" class="headerlink" title="编写zookeeper的docker-compose文件"></a>编写zookeeper的docker-compose文件</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">zoo1</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo1
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 2181<span class="token punctuation">:</span><span class="token number">2181</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo1/data:/data"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo1/datalog:/datalog"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo1/conf:/conf"</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=0.0.0.0<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span><span class="token number">3888</span>

  <span class="token key atrule">zoo2</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo2
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 2182<span class="token punctuation">:</span><span class="token number">2181</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo2/data:/data"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo2/datalog:/datalog"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo2/conf:/conf"</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">2</span>
      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.2=0.0.0.0<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.3=zoo3<span class="token punctuation">:</span>2888<span class="token punctuation">:</span><span class="token number">3888</span>

  <span class="token key atrule">zoo3</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> zookeeper
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> zoo3
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 2183<span class="token punctuation">:</span><span class="token number">2181</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo3/data:/data"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo3/datalog:/datalog"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/zookeeper/zoo3/conf:/conf"</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">ZOO_MY_ID</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">ZOO_SERVERS</span><span class="token punctuation">:</span> server.1=zoo1<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.2=zoo2<span class="token punctuation">:</span>2888<span class="token punctuation">:</span>3888 server.3=0.0.0.0<span class="token punctuation">:</span>2888<span class="token punctuation">:</span><span class="token number">3888</span></code></pre>
<p>  保存文件名为【docker-compose.yml】,我们可以看到整个compose文件中一共运行了三个zookeeper实例，为什么是三个？因为zookeeper内部的选举机制，在集群中有其他节点挂掉的话，至少保证n+1个节点用来选举leader，所以集群至少三个节点。</p>
<p>  现在来说说compose文件中的参数含义：</p>
<ol>
<li>version: ‘3.1’  表示使用第三代compose语法</li>
<li>services 表示一个实例服务</li>
<li>zoo1、zoo2、zoo3是我自己给实例服务起的名字</li>
<li>image 表示需要使用的docker镜像，这里使用的官方镜像，并且没有指定target</li>
<li>restart: always 表示挂掉会一直重启</li>
<li>ports 导出的端口号，因为我这是在一台机器，所以分别使用了2181，2182，2183三个端口</li>
<li>volumes 数据卷目录</li>
<li>environment 环境参数，这里面ZOO_MY_ID表示集群中的zk编号，不可重复，ZOO_SERVERS表示集群中所有的zk服务实例</li>
</ol>
<h3 id="编写kakfa的docker-compose文件"><a href="#编写kakfa的docker-compose文件" class="headerlink" title="编写kakfa的docker-compose文件"></a>编写kakfa的docker-compose文件</h3><p>kakfa的compose文件和zookeeper有些小区别，主要体现在运行方式上面并且我们现在需要创建三个docker-compose文件，唯一的区别就是port不一样。需要注意的是environment参数中的IP地址不要使用localhost或者127.0.0.1，这里需要使用IP地址</p>
<ul>
<li>docker-compose-9092.yml</li>
</ul>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9092<span class="token punctuation">:</span><span class="token number">9092</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/kafka/kafka-9092/docker.sock:/var/run/docker.sock"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/kafka/kafka-9092:/kafka"</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">KAFKA_VERSION</span><span class="token punctuation">:</span> 1.1.0
      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> 192.168.1.6
      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9092</span>
      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> 192.168.1.6<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>192.168.1.6<span class="token punctuation">:</span><span class="token number">2182</span><span class="token punctuation">,</span>192.168.1.6<span class="token punctuation">:</span><span class="token number">2183</span></code></pre>
<ul>
<li>docker-compose-9093.yml</li>
</ul>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9093<span class="token punctuation">:</span><span class="token number">9092</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/kafka/kafka-9093/docker.sock:/var/run/docker.sock"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/kafka/kafka-9093:/kafka"</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">KAFKA_VERSION</span><span class="token punctuation">:</span> 1.1.0
      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> 192.168.1.6
      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9093</span>
      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> 192.168.1.6<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>192.168.1.6<span class="token punctuation">:</span><span class="token number">2182</span><span class="token punctuation">,</span>192.168.1.6<span class="token punctuation">:</span><span class="token number">2183</span></code></pre>
<ul>
<li>docker-compose-9094.yml</li>
</ul>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> wurstmeister/kafka
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> kafka
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 9094<span class="token punctuation">:</span><span class="token number">9092</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/kafka/kafka-9094/docker.sock:/var/run/docker.sock"</span>
      <span class="token punctuation">-</span> <span class="token string">"~/share/docker/compose-data/kafka/kafka-9094:/kafka"</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">KAFKA_VERSION</span><span class="token punctuation">:</span> 1.1.0
      <span class="token key atrule">KAFKA_ADVERTISED_HOST_NAME</span><span class="token punctuation">:</span> 192.168.1.6
      <span class="token key atrule">KAFKA_ADVERTISED_PORT</span><span class="token punctuation">:</span> <span class="token number">9094</span>
      <span class="token key atrule">KAFKA_ZOOKEEPER_CONNECT</span><span class="token punctuation">:</span> 192.168.1.6<span class="token punctuation">:</span><span class="token number">2181</span><span class="token punctuation">,</span>192.168.1.6<span class="token punctuation">:</span><span class="token number">2182</span><span class="token punctuation">,</span>192.168.1.6<span class="token punctuation">:</span><span class="token number">2183</span></code></pre>
<h3 id="运行zk与kakfa集群"><a href="#运行zk与kakfa集群" class="headerlink" title="运行zk与kakfa集群"></a>运行zk与kakfa集群</h3><p>  到这里，我们已经把两个组件的docker-compose文件写好了，现在我们来运行集群。</p>
<h4 id="运行zookeeper集群"><a href="#运行zookeeper集群" class="headerlink" title="运行zookeeper集群"></a>运行zookeeper集群</h4><p>在zookeeper的docker-compose文件夹下面打开终端，运行docker-compose up，这里也可以使用docker-compose up -d 后台运行</p>
<pre class=" language-shell"><code class="language-shell">➜  zk-kafka docker-compose up
Creating network "zk-kafka_default" with the default driver
Pulling zoo1 (zookeeper:)...
latest: Pulling from library/zookeeper
Digest: sha256:a043534003831de15268779b582d407d37291bf7d22292ec7dce242c57a5a2be
Status: Downloaded newer image for zookeeper:latest
Creating zk-kafka_zoo3_1 ... done
Creating zk-kafka_zoo2_1 ... done
Creating zk-kafka_zoo1_1 ... done
Attaching to zk-kafka_zoo1_1, zk-kafka_zoo3_1, zk-kafka_zoo2_1
zoo1_1  | ZooKeeper JMX enabled by default
zoo3_1  | ZooKeeper JMX enabled by default
zoo1_1  | Using config: /conf/zoo.cfg
zoo3_1  | Using config: /conf/zoo.cfg
zoo2_1  | ZooKeeper JMX enabled by default
zoo2_1  | Using config: /conf/zoo.cfg
zoo1_1  | log4j:WARN No appenders could be found for logger (org.apache.zookeeper.server.quorum.QuorumPeerConfig).
zoo1_1  | log4j:WARN Please initialize the log4j system properly.
zoo1_1  | log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
zoo3_1  | log4j:WARN No appenders could be found for logger (org.apache.zookeeper.server.quorum.QuorumPeerConfig).
zoo3_1  | log4j:WARN Please initialize the log4j system properly.
zoo3_1  | log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
zoo2_1  | log4j:WARN No appenders could be found for logger (org.apache.zookeeper.server.quorum.QuorumPeerConfig).
zoo2_1  | log4j:WARN Please initialize the log4j system properly.
zoo2_1  | log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</code></pre>
<h4 id="查看zookeeper的运行情况"><a href="#查看zookeeper的运行情况" class="headerlink" title="查看zookeeper的运行情况"></a>查看zookeeper的运行情况</h4><p>新开终端，执行docker ps，可以看到，我们已经有三个zookeeper实例已经运行起来了</p>
<pre class=" language-shell"><code class="language-shell">➜  ~ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                        NAMES
7278fca16a38        zookeeper           "/docker-entrypoint.…"   24 seconds ago      Up 27 seconds       2888/tcp, 0.0.0.0:2181->2181/tcp, 3888/tcp   zk-kafka_zoo1_1
bc396f78a9d4        zookeeper           "/docker-entrypoint.…"   24 seconds ago      Up 27 seconds       2888/tcp, 3888/tcp, 0.0.0.0:2183->2181/tcp   zk-kafka_zoo3_1
dd9b8be8eebe        zookeeper           "/docker-entrypoint.…"   24 seconds ago      Up 26 seconds       2888/tcp, 3888/tcp, 0.0.0.0:2182->2181/tcp   zk-kafka_zoo2_1</code></pre>
<h4 id="运行kakfa"><a href="#运行kakfa" class="headerlink" title="运行kakfa"></a>运行kakfa</h4><p>在kakfa的docker-compose-909*.yml文件夹下面分布执行下面三个命令</p>
<pre class=" language-shell"><code class="language-shell"># 集群启动方式
docker-compose -f docker-compose-9092.yml up -d
docker-compose -f docker-compose-9093.yml scale kafka=2
docker-compose -f docker-compose-9094.yml scale kafka=3</code></pre>
<h4 id="查看kafka的运行情况"><a href="#查看kafka的运行情况" class="headerlink" title="查看kafka的运行情况"></a>查看kafka的运行情况</h4><p>docker ps 可以看到现在已经有三个zookeeper实例和三个kafka实例</p>
<pre class=" language-shell"><code class="language-shell">➜  ~ docker ps
CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                                        NAMES
31e7e8ad1fc5        wurstmeister/kafka   "start-kafka.sh"         29 seconds ago      Up 37 seconds       0.0.0.0:9094->9092/tcp                       zk-kafka_kafka_3
d9c1fa25f46e        wurstmeister/kafka   "start-kafka.sh"         35 seconds ago      Up 43 seconds       0.0.0.0:9093->9092/tcp                       zk-kafka_kafka_2
caf6b21ba709        wurstmeister/kafka   "start-kafka.sh"         44 seconds ago      Up 52 seconds       0.0.0.0:9092->9092/tcp                       zk-kafka_kafka_1
7278fca16a38        zookeeper            "/docker-entrypoint.…"   37 minutes ago      Up About a minute   2888/tcp, 0.0.0.0:2181->2181/tcp, 3888/tcp   zk-kafka_zoo1_1
bc396f78a9d4        zookeeper            "/docker-entrypoint.…"   37 minutes ago      Up About a minute   2888/tcp, 3888/tcp, 0.0.0.0:2183->2181/tcp   zk-kafka_zoo3_1
dd9b8be8eebe        zookeeper            "/docker-entrypoint.…"   37 minutes ago      Up About a minute   2888/tcp, 3888/tcp, 0.0.0.0:2182->2181/tcp   zk-kafka_zoo2_1
</code></pre>
<h3 id="使用kafka集群进行消息生产与消费"><a href="#使用kafka集群进行消息生产与消费" class="headerlink" title="使用kafka集群进行消息生产与消费"></a>使用kafka集群进行消息生产与消费</h3><h4 id="进入kafka容器"><a href="#进入kafka容器" class="headerlink" title="进入kafka容器"></a>进入kafka容器</h4><p>docker exec -it [container-name] /bin/bash，这里使用的是容器的名称，因为有三个kafka集群，通过docker ps可以看到分别是（zk-kafka_kafka_1，zk-kafka_kafka_2，zk-kafka_kafka_3）所以随便一个都可以</p>
<pre class=" language-shell"><code class="language-shell"># 进入kafka容器
docker exec -it zk-kafka_kafka_1 /bin/bash

# 进入安装目录
cd /opt/kafka/

# 查看topic列表
./bin/kafka-topics.sh --list --zookeeper 192.168.1.6:2181

# 创建 topic
./bin/kafka-topics.sh --create --zookeeper 192.168.1.6:2181 --replication-factor 1 --partitions 1 --topic test

# 生产消息
./bin/kafka-console-producer.sh --broker-list 192.168.1.6:9092 --topic test

# 消费消息
./bin/kafka-console-consumer.sh --bootstrap-server 192.168.1.6:9092 --topic test --from-beginning</code></pre>
<h5 id="查看topic列表"><a href="#查看topic列表" class="headerlink" title="查看topic列表"></a>查看topic列表</h5><pre class=" language-shell"><code class="language-shell">➜  ~ docker exec -it zk-kafka_kafka_1 /bin/bash
bash-4.4# cd /opt/kafka
bash-4.4# pwd
/opt/kafka
bash-4.4# ./bin/kafka-topics.sh --list --zookeeper 192.168.1.6:2181
bash-4.4#</code></pre>
<h5 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h5><pre class=" language-shell"><code class="language-shell">➜  ~ docker exec -it zk-kafka_kafka_1 /bin/bash
bash-4.4# cd /opt/kafka
bash-4.4# pwd
/opt/kafka
bash-4.4# ./bin/kafka-topics.sh --list --zookeeper 192.168.1.6:2181
ion-factor 1 --partitions 1 --topic test --zookeeper 192.168.1.6:2181 --replicati
Created topic "test".
bash-4.4#</code></pre>
<h5 id="消息的生产与消费"><a href="#消息的生产与消费" class="headerlink" title="消息的生产与消费"></a>消息的生产与消费</h5><p>打开两个终端进入容器，一个作为生产者生产消息，一个作为消费者消费消息</p>
<ul>
<li>生产者使用zk-kafka_kafka_1容器，zk使用9092端口</li>
</ul>
<pre class=" language-shell"><code class="language-shell">➜  zk-kafka docker exec -it zk-kafka_kafka_1 /bin/bash
bash-4.4# cd /opt/kafka
bash-4.4# ./bin/kafka-console-producer.sh --broker-list 192.168.1.6:9092 --topic test
>123
>测试数据
>test data
>阿牛
></code></pre>
<ul>
<li>消费者zk-kafka_kafka_2，zk使用9093端口</li>
</ul>
<pre class=" language-shell"><code class="language-shell">➜  ~ docker exec -it zk-kafka_kafka_2 /bin/bash
bash-4.4# cd /opt/kafka
bash-4.4# ./bin/kafka-console-consumer.sh --bootstrap-server 192.168.1.6:9093 --topic test --from-beginning
123
测试数据
test data
阿牛</code></pre>
<ul>
<li>消费者zk-kafka_kafka_3，zk使用9094端口</li>
</ul>
<pre class=" language-shell"><code class="language-shell">➜  ~ docker exec -it zk-kafka_kafka_3 /bin/bash
bash-4.4# cd /opt/kafka
bash-4.4# ./bin/kafka-console-consumer.sh --bootstrap-server 192.168.1.6:9094 --topic test --from-beginning
123
测试数据
test data
阿牛</code></pre>
<p>至此，zookeeper和kakfa集群搭建到此结束</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>中间踩了很多坑，网上参考了很多教程，重点还是需要自己动手折腾</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yeasy.gitbooks.io/docker_practice/compose/compose_file.html">docker从入门到实践</a></p>
<p><a href="https://github.com/wurstmeister/kafka-docker">kakfa-docker</a></p>
<p><a href="https://www.guonanjun.com/268.html">Docker部署Kafka集群</a></p>
<p><a href="https://hub.docker.com/_/zookeeper/">zookeeper-docker</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch 快速上手</title>
    <url>/2019/03/09/elasticsearch-rest-api/</url>
    <content><![CDATA[<h1 id="Elasticsearch-快速上手"><a href="#Elasticsearch-快速上手" class="headerlink" title="Elasticsearch 快速上手"></a>Elasticsearch 快速上手</h1><blockquote>
<p>注：本文档中除无特别说明，请求方式均为<code>GET</code>。所有的请求均在<code>Sense</code>中测试通过</p>
</blockquote>
<p>遵循的格式为</p>
<pre><code>curl -X&lt;REST Verb&gt; &lt;Node&gt;:&lt;Port&gt;/&lt;Index&gt;/&lt;Type&gt;/&lt;ID&gt;</code></pre>
<h3 id="集群健康查看"><a href="#集群健康查看" class="headerlink" title="集群健康查看"></a>集群健康查看</h3><ul>
<li><a href="http://127.0.0.1:9200/_cat/health?v">http://127.0.0.1:9200/_cat/health?v</a></li>
</ul>
<pre><code>epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks 
1441940569 11:02:49  elasticsearch yellow          1         1      7   7    0    0        7             0 </code></pre>
<ul>
<li><a href="http://127.0.0.1:9200/_cat/nodes?v">http://127.0.0.1:9200/_cat/nodes?v</a></li>
</ul>
<pre><code>host ip            heap.percent ram.percent load node.role master name     
acer 169.254.9.202           32          52      d         *      Mys-Tech</code></pre>
<h3 id="列出所有的indices"><a href="#列出所有的indices" class="headerlink" title="列出所有的indices"></a>列出所有的indices</h3><ul>
<li><a href="http://127.0.0.1:9200/_cat/indices?v">http://127.0.0.1:9200/_cat/indices?v</a></li>
</ul>
<pre><code>health status index              pri rep docs.count docs.deleted store.size pri.store.size 
yellow open   .marvel-2015.09.11   1   1       3233            0     10.5mb         10.5mb 
yellow open   .marvel-2015.09.10   1   1       1996            0      3.9mb          3.9mb 
yellow open   news                 5   1       3455            0     17.8mb         17.8mb </code></pre>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>使用<code>PUT</code>请求创建一个countries的索引</p>
<pre><code>curl -XPUT http://127.0.0.1:9200/countries?pretty</code></pre>
<p>输出:</p>
<pre><code>{
   "acknowledged": true
}</code></pre>
<p>查看索引列表</p>
<pre><code>curl -XGET http://127.0.0.1:9200/_cat/indices?v</code></pre>
<p>输出:</p>
<pre><code>health status index              pri rep docs.count docs.deleted store.size pri.store.size 
yellow open   countries              5   1          0            0       575b           575b 
yellow open   .marvel-2015.09.11   1   1       3436            0     11.4mb         11.4mb 
yellow open   .marvel-2015.09.10   1   1       1996            0      3.9mb          3.9mb 
yellow open   news                 5   1       3455            0     17.8mb         17.8mb </code></pre>
<h3 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a>索引文档</h3><ul>
<li>使用自定义id索引文档</li>
</ul>
<p>使用<code>PUT</code>请求创建一个索引为<code>countries</code>类型为<code>country</code>的文档。其文档编号为<code>1</code>，文档内容包含<code>name</code>和<code>capital</code></p>
<pre><code>curl -XPUT http://127.0.0.1:9200/countries/country/1?pretty -d '
{
  "name": "中国",
  "capital": "北京"
}'</code></pre>
<p>输出:</p>
<pre><code>{
   "_index": "countries",
   "_type": "country",
   "_id": "1",
   "_version": 1,
   "created": true
}</code></pre>
<ul>
<li>使用系统分配的id索引文档</li>
</ul>
<pre><code>curl -XPOST http://127.0.0.1:9200/countries/country?pretty -d '
{
  "name": "韩国",
  "capital": "首尔"
}'</code></pre>
<p>注意：使用系统分配的id时使用<code>POST</code>方式提交文档，且在<code>索引\类型</code>url格式中不再有id</p>
<p>输出:</p>
<pre><code>{
   "_index": "countries",
   "_type": "country",
   "_id": "AU-6awteDgxJZYVN-E5I",
   "_version": 1,
   "created": true
}</code></pre>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p>使用自定义id查询文档</p>
<pre><code>curl -XGET http://127.0.0.1:9200/countries/country/1?pretty</code></pre>
<p>输出:</p>
<pre><code>{
   "_index": "countries",
   "_type": "country",
   "_id": "1",
   "_version": 1,
   "found": true,
   "_source": {
      "name": "中国",
      "capital": "北京"
   }
}</code></pre>
<p>使用系统分配的id查询</p>
<pre><code>GET http://127.0.0.1:9200/countries/country/AU-6awteDgxJZYVN-E5I?pretty
</code></pre>
<p>输出:</p>
<pre><code>{
   "_index": "countries",
   "_type": "country",
   "_id": "AU-6awteDgxJZYVN-E5I",
   "_version": 1,
   "found": true,
   "_source": {
      "name": "韩国",
      "capital": "首尔"
   }
}</code></pre>
<h3 id="查看索引信息"><a href="#查看索引信息" class="headerlink" title="查看索引信息"></a>查看索引信息</h3><pre><code>GET http://127.0.0.1:9200/countries/</code></pre>
<p>输出:</p>
<pre><code>{
   "countries": {
      "aliases": {},
      "mappings": {
         "country": {
            "properties": {
               "capital": {
                  "type": "string"
               },
               "name": {
                  "type": "string"
               }
            }
         }
      },
      "settings": {
         "index": {
            "creation_date": "1441941497754",
            "uuid": "UaoQ_WCATaiy5w736cjw2A",
            "number_of_replicas": "1",
            "number_of_shards": "5",
            "version": {
               "created": "1070199"
            }
         }
      },
      "warmers": {}
   }
}</code></pre>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>删除<code>myindex</code>索引</p>
<pre><code>DELETE http://127.0.0.1:9200/myindex/?pretty</code></pre>
<p>输出:</p>
<pre><code>{
   "acknowledged": true
}</code></pre>
<h3 id="索引或替换一个文档"><a href="#索引或替换一个文档" class="headerlink" title="索引或替换一个文档"></a>索引或替换一个文档</h3><p>根据文档id索引或替换文档，若存在则修改替换，否则索引该文档。</p>
<ul>
<li>使用已存在的id</li>
</ul>
<p>修改文档id为1的国家信息。</p>
<pre><code>PUT 'http://127.0.0.1:9200/countries/country/1?pretty'
{
    "name": "日本",
    "capital": "东京"
}</code></pre>
<p>查询其是否已修改</p>
<pre><code>GET http://127.0.0.1:9200/countries/country/1?pretty</code></pre>
<p>输出:</p>
<pre><code>{
   "_index": "countries",
   "_type": "country",
   "_id": "1",
   "_version": 2,
   "found": true,
   "_source": {
      "name": "日本",
      "capital": "东京"
   }
}</code></pre>
<p>可见国家信息已由<code>中国</code>变为<code>日本</code>，其首都信息也发生了变化</p>
<ul>
<li>使用不存在的id则是索引文档</li>
</ul>
<pre><code>PUT http://127.0.0.1:9200/countries/country/2?pretty
{
    "name": "澳大利亚",
    "capital": "悉尼"
}</code></pre>
<p>输出:</p>
<pre><code>{
   "_index": "countries",
   "_type": "country",
   "_id": "2",
   "_version": 1,
   "created": true
}</code></pre>
<h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><ul>
<li>按doc方式更新文档</li>
</ul>
<p>以<code>doc</code>方式修改文档id为1的文档</p>
<pre><code>POST http://127.0.0.1:9200/countries/country/1/_update?pretty
{
  "doc": { "name": "美国","capital": "华盛顿"}
}</code></pre>
<p>其中<code>doc</code>是固定写法,其内容为要修改的文档内容</p>
<ul>
<li>按script方式更新文档</li>
</ul>
<p>以<code>script</code>方式修改文档id为1的文档</p>
<pre><code>POST http://127.0.0.1:9200/countries/country/1/_update?pretty
{
  "script": "ctx._source.name=\"加拿大\";ctx._source.capital=\"渥太华\""
}</code></pre>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><ul>
<li>按文档id删除</li>
</ul>
<pre><code>DELETE http://127.0.0.1:9200/countries/country/1?pretty</code></pre>
<p>输出：</p>
<pre><code>{
   "found": true,
   "_index": "countries",
   "_type": "country",
   "_id": "1",
   "_version": 6
}</code></pre>
<ul>
<li>根据查询结果删除</li>
</ul>
<pre><code>DELETE http://127.0.0.1:9200/countries/country/_query?pretty
{
    "query": { "match": { "name": "美国" } }
}
</code></pre>
<p>输出：</p>
<pre><code>{
   "_indices": {
      "countries": {
         "_shards": {
            "total": 5,
            "successful": 5,
            "failed": 0
         }
      }
   }
}</code></pre>
<p>查询是否还有name为美国的文档</p>
<pre><code>GET http://127.0.0.1:9200/countries/country/_query
{
    "query": { "match_all": { "name": "美国" } }
}</code></pre>
<h3 id="批量处理"><a href="#批量处理" class="headerlink" title="批量处理"></a>批量处理</h3><p>_bulk api</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html</a></p>
<p>遵循格式</p>
<p>/_bulk, /{index}/_bulk, {index}/{type}/_bulk</p>
<pre><code>action_and_meta_data\n
optional_source\n
action_and_meta_data\n
optional_source\n</code></pre>
<p>支持的action有<code>index</code>, <code>create</code>, <code>delete</code>, <code>update</code></p>
<p><code>index</code>和<code>create</code>在下一行跟上要索引的doc<br><code>delete</code>则不需要<br><code>update</code>在下一行跟上<code>doc</code>或<code>script</code></p>
<ul>
<li>批量索引文档</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/country/_bulk?pretty
{"index":{"_id":"1"}}
{"name": "中国","capital": "北京"}
{"index":{"_id":"2"}}
{"name": "美国","capital": "华盛顿"}
{"index":{"_id":"3"}}
{"name": "日本","capital": "东京"}
{"index":{"_id":"4"}}
{"name": "澳大利亚","capital": "悉尼"}
{"index":{"_id":"5"}}
{"name": "印度","capital": "新德里"}
{"index":{"_id":"6"}}
{"name": "韩国","capital": "首尔"}</code></pre>
<p>以上请求将会批量索引6个文档。</p>
<p>输出：</p>
<pre><code>{
   "took": 4,
   "errors": false,
   "items": [
      {
         "index": {
            "_index": "countries",
            "_type": "country",
            "_id": "1",
            "_version": 1,
            "status": 201
         }
      },
      {
         "index": {
            "_index": "countries",
            "_type": "country",
            "_id": "2",
            "_version": 2,
            "status": 200
         }
      },
      {
         "index": {
            "_index": "countries",
            "_type": "country",
            "_id": "3",
            "_version": 1,
            "status": 201
         }
      },
      {
         "index": {
            "_index": "countries",
            "_type": "country",
            "_id": "4",
            "_version": 1,
            "status": 201
         }
      },
      {
         "index": {
            "_index": "countries",
            "_type": "country",
            "_id": "5",
            "_version": 1,
            "status": 201
         }
      },
      {
         "index": {
            "_index": "countries",
            "_type": "country",
            "_id": "6",
            "_version": 1,
            "status": 201
         }
      }
   ]
}</code></pre>
<ul>
<li>批量执行，含index、create、delete、update</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/country/_bulk?pretty
{"index":{"_id":"7"}}
{"name": "新加坡","capital": "渥太华"}
{"create":{"_id":"8"}}
{"name": "德国","capital": "柏林"}
{"update":{"_id":"1"}}
{"doc": {"name": "法国","capital": "巴黎" }}
{"update":{"_id":"3"}}
{"script": "ctx._source.name = \"法国\";ctx._source.capital = \"巴黎\""}
{"delete":{"_id":"2"}}</code></pre>
<p>输出：</p>
<pre><code>{
   "took": 40,
   "errors": false,
   "items": [
      {
         "index": {
            "_index": "countries",
            "_type": "country",
            "_id": "7",
            "_version": 1,
            "status": 201
         }
      },
      {
         "create": {
            "_index": "countries",
            "_type": "country",
            "_id": "8",
            "_version": 1,
            "status": 201
         }
      },
      {
         "update": {
            "_index": "countries",
            "_type": "country",
            "_id": "1",
            "_version": 2,
            "status": 200
         }
      },
      {
         "update": {
            "_index": "countries",
            "_type": "country",
            "_id": "3",
            "_version": 2,
            "status": 200
         }
      },
      {
         "delete": {
            "_index": "countries",
            "_type": "country",
            "_id": "2",
            "_version": 3,
            "status": 200,
            "found": true
         }
      }
   ]
}</code></pre>
<ul>
<li>导入数据</li>
</ul>
<p>countries.json</p>
<pre><code>{"index":{"_id":"1"}}
{"name": "新加坡","capital": "渥太华"}
{"index":{"_id":"2"}}
{"name": "韩国","capital": "首尔"}
{"index":{"_id":"3"}}
{"name": "朝鲜","capital": "平壤"}
{"index":{"_id":"4"}}
{"name": "日本","capital": "东京"}
{"index":{"_id":"5"}}
{"name": "马来西亚","capital": "吉隆坡"}</code></pre>
<p>使用curl的<code>--data-binary</code>参数导入数据</p>
<pre><code>curl XPOST http://127.0.0.1:9200/countries/country/_bulk?pretty --data-binary @countries.json</code></pre>
<p>或者使用postman导入</p>
<pre><code>http://127.0.0.1:9200/countries/country/_bulk?pretty
{"index":{"_id":"1"}}
{"name": "新加坡","capital": "渥太华"}
{"index":{"_id":"2"}}
{"name": "韩国","capital": "首尔"}
{"index":{"_id":"3"}}
{"name": "朝鲜","capital": "平壤"}
{"index":{"_id":"4"}}
{"name": "日本","capital": "东京"}
{"index":{"_id":"5"}}
{"name": "马来西亚","capital": "吉隆坡"}</code></pre>
<h3 id="search-api"><a href="#search-api" class="headerlink" title="search api"></a>search api</h3><ul>
<li>GET方式搜索(queryString)</li>
</ul>
<pre><code>GET http://127.0.0.1:9200/countries/_search?q=*&amp;pretty</code></pre>
<p>注:<code>q=*</code>将匹配索引中的所有文档</p>
<p>输出:</p>
<pre><code>{
   "took": 1,
   "timed_out": false,
   "_shards": {
      "total": 5,
      "successful": 5,
      "failed": 0
   },
   "hits": {
      "total": 10,
      "max_score": 1,
      "hits": [
         {
            "_index": "countries",
            "_type": "country",
            "_id": "4",
            "_score": 1,
            "_source": {
               "name": "日本",
               "capital": "东京"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "_query",
            "_score": 1,
            "_source": {
               "query": {
                  "match_all": {
                     "name": "美国"
                  }
               }
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "5",
            "_score": 1,
            "_source": {
               "name": "印度",
               "capital": "新德里"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "6",
            "_score": 1,
            "_source": {
               "name": "韩国",
               "capital": "首尔"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "1",
            "_score": 1,
            "_source": {
               "name": "新加坡",
               "capital": "渥太华"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "7",
            "_score": 1,
            "_source": {
               "name": "新加坡",
               "capital": "渥太华"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "2",
            "_score": 1,
            "_source": {
               "name": "韩国",
               "capital": "首尔"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "AU-6awteDgxJZYVN-E5I",
            "_score": 1,
            "_source": {
               "name": "韩国",
               "capital": "首尔"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "8",
            "_score": 1,
            "_source": {
               "name": "德国",
               "capital": "柏林"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "3",
            "_score": 1,
            "_source": {
               "name": "朝鲜",
               "capital": "平壤"
            }
         }
      ]
   }
}</code></pre>
<ul>
<li>POST方式搜索(含请求体query)</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "match_all": {}
    }
}</code></pre>
<p>输出:</p>
<pre><code>{
   "took": 1,
   "timed_out": false,
   "_shards": {
      "total": 5,
      "successful": 5,
      "failed": 0
   },
   "hits": {
      "total": 10,
      "max_score": 1,
      "hits": [
         {
            "_index": "countries",
            "_type": "country",
            "_id": "4",
            "_score": 1,
            "_source": {
               "name": "日本",
               "capital": "东京"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "_query",
            "_score": 1,
            "_source": {
               "query": {
                  "match_all": {
                     "name": "美国"
                  }
               }
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "5",
            "_score": 1,
            "_source": {
               "name": "印度",
               "capital": "新德里"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "6",
            "_score": 1,
            "_source": {
               "name": "韩国",
               "capital": "首尔"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "1",
            "_score": 1,
            "_source": {
               "name": "新加坡",
               "capital": "渥太华"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "7",
            "_score": 1,
            "_source": {
               "name": "新加坡",
               "capital": "渥太华"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "2",
            "_score": 1,
            "_source": {
               "name": "韩国",
               "capital": "首尔"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "AU-6awteDgxJZYVN-E5I",
            "_score": 1,
            "_source": {
               "name": "韩国",
               "capital": "首尔"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "8",
            "_score": 1,
            "_source": {
               "name": "德国",
               "capital": "柏林"
            }
         },
         {
            "_index": "countries",
            "_type": "country",
            "_id": "3",
            "_score": 1,
            "_source": {
               "name": "朝鲜",
               "capital": "平壤"
            }
         }
      ]
   }
}</code></pre>
<ul>
<li>限定返回条目</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "match_all": {}
    },
    "size": 1
}</code></pre>
<p><code>size</code>控制返回条目，默认为10</p>
<p>输出:</p>
<pre><code>{
   "took": 1,
   "timed_out": false,
   "_shards": {
      "total": 5,
      "successful": 5,
      "failed": 0
   },
   "hits": {
      "total": 10,
      "max_score": 1,
      "hits": [
         {
            "_index": "countries",
            "_type": "country",
            "_id": "4",
            "_score": 1,
            "_source": {
               "name": "日本",
               "capital": "东京"
            }
         }
      ]
   }
}</code></pre>
<ul>
<li>分页(form,size)</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "match_all": {}
    },
    "from": 2,
    "size": 2
}</code></pre>
<p>使用<code>from</code>和<code>size</code>来翻页。其中<code>form</code>默认为<code>0</code>,<code>size</code>默认为<code>10</code></p>
<ul>
<li>排序(sort)</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "match_all": {}
    },
    "sort": [
       {
          "name": {
             "order": "desc"
          }
       }
    ]
}</code></pre>
<p>其中<code>name</code>为排序字段</p>
<h3 id="限定返回字段"><a href="#限定返回字段" class="headerlink" title="限定返回字段"></a>限定返回字段</h3><pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "match_all": {}
    },
    "_source": ["name"]
}</code></pre>
<p>使用<code>_source</code>来限定返回的字段。这里只返回<code>name</code></p>
<h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><ul>
<li>match_phrase</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "match_phrase": {
           "name": "韩国"
        }
    }
}</code></pre>
<ul>
<li>must</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "bool": {
            "must": [
               {"match": {
                  "name": "日本"
               }},
               {"match": {
                  "capital": "东京"
               }}
            ]
        }
    }
}</code></pre>
<ul>
<li>should</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "bool": {
            "should": [
               {"match": {
                  "name": "日本"
               }},
               {"match": {
                  "name": "韩国"
               }}
            ]
        }
    }
}</code></pre>
<ul>
<li><p>must_not</p>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
  "query": {
      "bool": {
          "must_not": [
             {"match": {
                "name": "日本"
             }},
             {"match": {
                "name": "韩国"
             }}
          ]
      }
  }
}</code></pre>
</li>
<li><p>filter</p>
</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
    "query": {
        "match_all": {}
    },
    "filter": {
        "term": {
           "capital": "东京"
        }
    }
}</code></pre>
<ul>
<li>聚合(aggs)</li>
</ul>
<pre><code>POST http://127.0.0.1:9200/countries/_search?pretty
{
  "size": 0,
  "aggs": {
    "group_by_name": {
      "terms": {
        "field": "name"
      }
    }
  }
}</code></pre>
<p>按<code>name</code>统计分组文档数</p>
<p>输出:</p>
<pre><code>{
   "took": 1,
   "timed_out": false,
   "_shards": {
      "total": 5,
      "successful": 5,
      "failed": 0
   },
   "hits": {
      "total": 10,
      "max_score": 0,
      "hits": []
   },
   "aggregations": {
      "group_by_name": {
         "doc_count_error_upper_bound": 0,
         "sum_other_doc_count": 0,
         "buckets": [
            {
               "key": "韩国",
               "doc_count": 3
            },
            {
               "key": "新加坡",
               "doc_count": 2
            },
            {
               "key": "印度",
               "doc_count": 1
            },
            {
               "key": "德国",
               "doc_count": 1
            },
            {
               "key": "日本",
               "doc_count": 1
            },
            {
               "key": "朝鲜",
               "doc_count": 1
            }
         ]
      }
   }
}</code></pre>
<h3 id="高亮查询-highlight"><a href="#高亮查询-highlight" class="headerlink" title="高亮查询(highlight)"></a>高亮查询(highlight)</h3><pre><code>POST http://127.0.0.1:9200/news/_search?q=李克强
{
    "query" : {
        match_all:{}
    },
    "highlight" : {
        "pre_tags" : ["&lt;font color='red'&gt;", "&lt;b&gt;", "&lt;em&gt;"],
        "post_tags" : ["&lt;/font&gt;", "&lt;b&gt;", "&lt;/em&gt;"],
        "fields" : [
            {"title" : {}},
            {"content" : {
                "fragment_size" : 350,
                "number_of_fragments" : 3,
                "no_match_size": 150
            }}
        ]
    }
}</code></pre>
<pre><code>POST http://127.0.0.1:9200/news/_search?q=李克强
{
    "query" : {
        match_all:{}
    },
    "highlight" : {
        "pre_tags" : ["&lt;font color='red'&gt;&lt;b&gt;&lt;em&gt;"],
        "post_tags" : ["&lt;/font&gt;&lt;b&gt;&lt;/em&gt;"],
        "fields" : [
            {"title" : {}},
            {"content" : {
                "fragment_size" : 350,
                "number_of_fragments" : 3,
                "no_match_size": 150
            }}
        ]
    }
}</code></pre>
<h3 id="删除索引-1"><a href="#删除索引-1" class="headerlink" title="删除索引"></a>删除索引</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html</a></p>
<pre><code>DELETE http://127.0.0.1:9200/news</code></pre>
<h3 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html</a></p>
<pre><code>PUT http://127.0.0.1:9200/news</code></pre>
<h3 id="创建或修改mapping"><a href="#创建或修改mapping" class="headerlink" title="创建或修改mapping"></a>创建或修改mapping</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html</a></p>
<pre><code>PUT /{index}/_mapping/{type}</code></pre>
<pre><code>PUT http://127.0.0.1:9200/news/_mapping/article
{
  "article": {
    "properties": {
      "pubdate": {
        "type": "date",
        "format": "dateOptionalTime"
      },
      "author": {
        "type": "string"
      },
      "content": {
        "type": "string"
      },
      "id": {
        "type": "long"
      },
      "source": {
        "type": "string"
      },
      "title": {
        "type": "string"
      },
      "url": {
        "type": "string"
      }
    }
  }
}</code></pre>
<h3 id="查看mapping"><a href="#查看mapping" class="headerlink" title="查看mapping"></a>查看mapping</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html</a></p>
<pre><code>GET http://127.0.0.1:9200/_all/_mapping

GET http://127.0.0.1:9200/_mapping</code></pre>
<pre><code>GET http://127.0.0.1:9200/news/_mapping/article</code></pre>
<p>输出:</p>
<pre><code>{
  "news": {
    "mappings": {
      "article": {
        "properties": {
          "author": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "id": {
            "type": "long"
          },
          "pubdate": {
            "type": "date",
            "store": true,
            "format": "yyyy-MM-dd HH:mm:ss"
          },
          "source": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      }
    }
  }
}</code></pre>
<h3 id="删除mapping"><a href="#删除mapping" class="headerlink" title="删除mapping"></a>删除mapping</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-mapping.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-mapping.html</a></p>
<pre><code>[DELETE] /{index}/{type}

[DELETE] /{index}/{type}/_mapping

[DELETE] /{index}/_mapping/{type}</code></pre>
<pre><code>DELETE http://127.0.0.1:9200/news/_mapping/article</code></pre>
<p>文章转自:<a href="https://github.com/ameizi/elasticsearch-jest-example/blob/master/elasticsearch%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B.md"><strong>elasticsearch快速上手.md</strong></a></p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>golang从内核到epoll</title>
    <url>/2021/10/12/golang-from-kernel-to-epoll/</url>
    <content><![CDATA[<blockquote>
<p>引子：在之前的文章里 <a href="https://xiaomozhang.github.io/2021/10/12/golang-netpoll-realization-analysis/"><code>golang netpoll的实现与分析</code></a> 讲了一些，对于golang netpoll的实现，但是，数据是怎么通过硬件到达golang的这块不是太明确，今天就主要分析下这一块。</p>
</blockquote>
<h3 id="linux的网络的基本实现"><a href="#linux的网络的基本实现" class="headerlink" title="linux的网络的基本实现"></a>linux的网络的基本实现</h3><p>在 TCP/IP ⽹络分层模型⾥，整个协议栈被分成了物理层、链路层、⽹络层，传输层和应⽤层。物理层对应的是⽹卡和⽹线，应⽤层对应的是我们常⻅的 Nginx，FTP 等等各种应⽤。Linux 实现的是链路层、⽹络层和传输层这三层。<br>在 Linux 内核实现中，链路层协议靠⽹卡驱动来实现，内核协议栈来实现⽹络层和传输层。内核对更上层的应⽤层提供 socket 接⼝来供⽤户进程访问。我们⽤ Linux 的视⻆来看到的 TCP/IP ⽹络分层模型应该是下⾯这个样⼦的。<br><img src="/images/golang-from-kernel-to-epoll/golang-from-kernel-to-epoll-notifyall-process.png" alt="golang-from-kernel-to-epoll-notifyall-process.png"></p>
<h3 id="如何网络事件"><a href="#如何网络事件" class="headerlink" title="如何网络事件"></a>如何网络事件</h3><p>当设备上有数据到达的时候，会给 CPU 的相关引脚上触发⼀个电压变化，以通知 CPU 来处理数据。</p>
<p>也可以把这个叫 <code>硬中断</code></p>
<p>但是我们知道，cpu运行速度很快，但是网络读取数据会很慢，这时候就会长期占用cpu,导致cpu无法处理其他事件，比如，鼠标移动。</p>
<p>那么在linux中是怎么解决掉这个问题的呢？</p>
<p>linux内核将中断处理拆分开，拆分为了2个部分，一个是上面提到的 <code>硬中断</code>，另外就是 <code>软中断</code>。</p>
<p>第一部分接收到cpu电压变化，产生硬中断，然后只做最简单的处理，然后异步的交给硬件去接收信息到缓冲区。这个时候，cpu就已经可以接收其他中断信息过来了。</p>
<p>第二部分就是软中断部分，软中断是怎么做的呢？其实就是对内存的二进制位进行变更，类似于我们平常写业务常用的到的status字段一样，比如网络Io中，当缓冲区接收数据完毕，会将当前状态改为完成。举个例子，epoll读取某个io时间读取完数据时，并不会直接进入就绪态，而是等下次循环遍历判断状态，才会将这个fd塞入就绪列表（当然，这个时间很短，不过相对于cpu来说，这个时间就很长了）。</p>
<p>2.4 以后的内核版本采⽤的下半部实现⽅式是软中断，由 ksoftirqd 内核线程全权处理。和硬中断不同的是，硬中断是通过给 CPU 物理引脚施加电压变化，⽽软中断是通过给内存中的⼀个变量的⼆进制值以通知软中断处理程序。</p>
<p>这也就是为什么知道2.6才有epoll（正式引入）使用的原因，2.4以前内核都不支持这种方式。</p>
<p>总体的数据流转图如下：<br><img src="/images/golang-from-kernel-to-epoll/golang-from-kernel-to-epoll-stream-circulation.png" alt="golang-from-kernel-to-epoll-stream-circulation.png"><br>一个数据从到达网卡，要经历以下步骤才会完成一次数据接收：</p>
<ul>
<li>数据包从外面的网络进入物理网卡。如果目的地址不是该网卡，且该网卡没有开启混杂模式，该包会被网卡丢弃。</li>
<li>网卡将数据包通过DMA的方式写入到指定的内存地址，该地址由网卡驱动分配并初始化。注： 老的网卡可能不支持DMA，不过新的网卡一般都支持。</li>
<li>网卡通过硬件中断（IRQ）通知CPU，告诉它有数据来了</li>
<li>CPU根据中断表，调用已经注册的中断函数，这个中断函数会调到驱动程序（NIC Driver）中相应的函数</li>
<li>驱动先禁用网卡的中断，表示驱动程序已经知道内存中有数据了，告诉网卡下次再收到数据包直接写内存就可以了，不要再通知CPU了，这样可以提高效率，避免CPU不停的被中断。</li>
<li>启动软中断。这步结束后，硬件中断处理函数就结束返回了。由于硬中断处理程序执行的过程中不能被中断，所以如果它执行时间过长，会导致CPU没法响应其它硬件的中断，于是内核引入软中断，这样可以将硬中断处理函数中耗时的部分移到软中断处理函数里面来慢慢处理。</li>
<li>内核中的ksoftirqd进程专门负责软中断的处理，当它收到软中断后，就会调用相应软中断所对应的处理函数，对于上面第6步中是网卡驱动模块抛出的软中断，ksoftirqd会调用网络模块的net_rx_action函数</li>
<li>net_rx_action调用网卡驱动里的poll函数来一个一个的处理数据包</li>
<li>在pool函数中，驱动会一个接一个的读取网卡写到内存中的数据包，内存中数据包的格式只有驱动知道</li>
<li>驱动程序将内存中的数据包转换成内核网络模块能识别的skb格式，然后调用napi_gro_receive函数</li>
<li>napi_gro_receive会处理GRO相关的内容，也就是将可以合并的数据包进行合并，这样就只需要调用一次协议栈。然后判断是否开启了RPS，如果开启了，将会调用enqueue_to_backlog</li>
<li>在enqueue_to_backlog函数中，会将数据包放入CPU的softnet_data结构体的input_pkt_queue中，然后返回，如果input_pkt_queue满了的话，该数据包将会被丢弃，queue的大小可以通过net.core.netdev_max_backlog来配置</li>
<li>CPU会接着在自己的软中断上下文中处理自己input_pkt_queue里的网络数据（调用__netif_receive_skb_core）</li>
<li>如果没开启RPS，napi_gro_receive会直接调用__netif_receive_skb_core</li>
<li>看是不是有AF_PACKET类型的socket（也就是我们常说的原始套接字），如果有的话，拷贝一份数据给它。tcpdump抓包就是抓的这里的包。</li>
<li>调用协议栈相应的函数，将数据包交给协议栈处理。</li>
<li>待内存中的所有数据包被处理完成后（即poll函数执行完成），启用网卡的硬中断，这样下次网卡再收到数据的时候就会通知CPU<h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><img src="/images/golang-from-kernel-to-epoll/golang-from-kernel-to-epoll-epoll-register-ctl.png" alt="golang-from-kernel-to-epoll-epoll-register-ctl.png"><h4 id="poll函数"><a href="#poll函数" class="headerlink" title="poll函数"></a>poll函数</h4>这里的poll函数是说注册的回调函数，在软中断中进行处理的。比如epoll程序，会注册一个“ep_poll_callback”</li>
</ul>
<p>以go epoll为例：</p>
<p>go: accept –&gt; pollDesc.Init -&gt; poll_runtime_pollOpen –&gt; runtime.netpollopen(epoll_create) -&gt; epollctl(EPOLL_CTL_ADD)</p>
<p>go: netpollblock（gopark）,让出cpu-&gt;调度回来，netpoll(0)将协程写入就绪态-&gt;其他操作…</p>
<p>epoll thread: epoll_create(ep_ptable_queue_proc,注册软中断到ksoftirqd，将方法ep_poll_callback注册到)-&gt;epoll_add-&gt;epoll_wait(ep_poll让出cpu)</p>
<p>core: 网卡接收到数据-&gt;dma+硬中断-&gt;软中断-&gt;系统调度到ksoftirqd，处理ep_poll_callback（这里要注意，新的连接进入到程序，不是通过callback,而是走accept）-&gt;获取到之前注册的fd句柄-&gt;copy网卡数据到句柄-&gt;根据事件类型，对fd进行操作（就绪列表）<br><img src="/images/golang-from-kernel-to-epoll/golang-from-kernel-to-epoll-resource-scheduling.png" alt="golang-from-kernel-to-epoll-resource- scheduling.png"><br>部分代码<br>go: accept</p>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// accept阻塞，等待系统事件（等待有客户端进来）</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>fd <span class="token operator">*</span>FD<span class="token punctuation">)</span> <span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>Sockaddr<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> fd<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> fd<span class="token punctuation">.</span><span class="token function">readUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> err <span class="token operator">:=</span> fd<span class="token punctuation">.</span>pd<span class="token punctuation">.</span><span class="token function">prepareRead</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>isFile<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        s<span class="token punctuation">,</span> rsa<span class="token punctuation">,</span> errcall<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">accept</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>Sysfd<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> s<span class="token punctuation">,</span> rsa<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err
        <span class="token punctuation">}</span>
        <span class="token keyword">switch</span> err <span class="token punctuation">{</span>
        <span class="token keyword">case</span> syscall<span class="token punctuation">.</span>EAGAIN<span class="token punctuation">:</span>
            <span class="token keyword">if</span> fd<span class="token punctuation">.</span>pd<span class="token punctuation">.</span><span class="token function">pollable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> err <span class="token operator">=</span> fd<span class="token punctuation">.</span>pd<span class="token punctuation">.</span><span class="token function">waitRead</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>isFile<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                    <span class="token keyword">continue</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token keyword">case</span> syscall<span class="token punctuation">.</span>ECONNABORTED<span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true">// This means that a socket on the listen</span>
            <span class="token comment" spellcheck="true">// queue was closed before we Accept()ed it;</span>
            <span class="token comment" spellcheck="true">// it's a silly error, so try again.</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errcall<span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//accept创建netpoll</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>fd <span class="token operator">*</span>netFD<span class="token punctuation">)</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>netfd <span class="token operator">*</span>netFD<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    d<span class="token punctuation">,</span> rsa<span class="token punctuation">,</span> errcall<span class="token punctuation">,</span> err <span class="token operator">:=</span> fd<span class="token punctuation">.</span>pfd<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> errcall <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>
            err <span class="token operator">=</span> <span class="token function">wrapSyscallError</span><span class="token punctuation">(</span>errcall<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> netfd<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">newFD</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> fd<span class="token punctuation">.</span>family<span class="token punctuation">,</span> fd<span class="token punctuation">.</span>sotype<span class="token punctuation">,</span> fd<span class="token punctuation">.</span>net<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        poll<span class="token punctuation">.</span><span class="token function">CloseFunc</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> err <span class="token operator">=</span> netfd<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//open 创建 ctl_add</span>
        fd<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    lsa<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> syscall<span class="token punctuation">.</span><span class="token function">Getsockname</span><span class="token punctuation">(</span>netfd<span class="token punctuation">.</span>pfd<span class="token punctuation">.</span>Sysfd<span class="token punctuation">)</span>
    netfd<span class="token punctuation">.</span><span class="token function">setAddr</span><span class="token punctuation">(</span>netfd<span class="token punctuation">.</span><span class="token function">addrFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>lsa<span class="token punctuation">)</span><span class="token punctuation">,</span> netfd<span class="token punctuation">.</span><span class="token function">addrFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rsa<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> netfd<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

### <span class="token comment" spellcheck="true">//syscall包。 最终调用的是linux的accept</span>
<span class="token keyword">func</span> <span class="token function">accept</span><span class="token punctuation">(</span>s <span class="token builtin">int</span><span class="token punctuation">,</span> rsa <span class="token operator">*</span>RawSockaddrAny<span class="token punctuation">,</span> addrlen <span class="token operator">*</span>_Socklen<span class="token punctuation">)</span> <span class="token punctuation">(</span>fd <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    r0<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e1 <span class="token operator">:=</span> <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token function">funcPC</span><span class="token punctuation">(</span>libc_accept_trampoline<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>rsa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>addrlen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fd <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>r0<span class="token punctuation">)</span>
    <span class="token keyword">if</span> e1 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        err <span class="token operator">=</span> <span class="token function">errnoErr</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="epoll源码"><a href="#epoll源码" class="headerlink" title="epoll源码"></a>epoll源码</h3><pre class=" language-go"><code class="language-go">static <span class="token builtin">int</span> __init <span class="token function">eventpoll_init</span><span class="token punctuation">(</span>void<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token function">mutex_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pmutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">ep_poll_safewake_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>psw<span class="token punctuation">)</span><span class="token punctuation">;</span>
   epi_cache <span class="token operator">=</span> <span class="token function">kmem_cache_create</span><span class="token punctuation">(</span><span class="token string">"eventpoll_epi"</span><span class="token punctuation">,</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> epitem<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SLAB_HWCACHE_ALIGN<span class="token operator">|</span>EPI_SLAB_DEBUG<span class="token operator">|</span>SLAB_PANIC<span class="token punctuation">,</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
   pwq_cache <span class="token operator">=</span> <span class="token function">kmem_cache_create</span><span class="token punctuation">(</span><span class="token string">"eventpoll_pwq"</span><span class="token punctuation">,</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> eppoll_entry<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> EPI_SLAB_DEBUG<span class="token operator">|</span>SLAB_PANIC<span class="token punctuation">,</span> NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h3><p>epoll用kmem_cache_create（slab分配器）分配内存用来存放struct epitem和struct eppoll_entry。<br>当向系统中添加一个fd时，就创建一个epitem结构体，这是内核管理epoll的基本数据结构：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">struct</span> epitem <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> rb_node  rbn<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用于主结构管理的红黑树</span>
    <span class="token keyword">struct</span> list_head  rdllink<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//事件就绪队列</span>
    <span class="token keyword">struct</span> epitem  <span class="token operator">*</span>next<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//用于主结构体中的链表</span>
    <span class="token keyword">struct</span> epoll_filefd  ffd<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这个结构体对应的被监听的文件描述符信息</span>
    <span class="token builtin">int</span>  nwait<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//poll操作中事件的个数</span>
    <span class="token keyword">struct</span> list_head  pwqlist<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//双向链表，保存着被监视文件的等待队列，功能类似于select/poll中的poll_table</span>
    <span class="token keyword">struct</span> eventpoll  <span class="token operator">*</span>ep<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//该项属于哪个主结构体（多个epitm从属于一个eventpoll）</span>
    <span class="token keyword">struct</span> list_head  fllink<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//双向链表，用来链接被监视的文件描述符对应的struct file。因为file里有f_ep_link,用来保存所有监视这个文件的epoll节点</span>
    <span class="token keyword">struct</span> epoll_event  event<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//注册的感兴趣的事件,也就是用户空间的epoll_event</span>
<span class="token punctuation">}</span></code></pre>
<p>而每个epoll fd（epfd）对应的主要数据结构为：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">struct</span> eventpoll <span class="token punctuation">{</span>
    spin_lock_t       lock<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对本数据结构的访问</span>
    <span class="token keyword">struct</span> mutex      mtx<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//防止使用时被删除</span>
    wait_queue_head_t     wq<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//sys_epoll_wait() 使用的等待队列</span>
    wait_queue_head_t   poll_wait<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//file->poll()使用的等待队列</span>
    <span class="token keyword">struct</span> list_head    rdllist<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//事件满足条件的链表</span>
    <span class="token keyword">struct</span> rb_root      rbr<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用于管理所有fd的红黑树（树根）</span>
    <span class="token keyword">struct</span> epitem      <span class="token operator">*</span>ovflist<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//将事件到达的fd进行链接起来发送至用户空间</span>
<span class="token punctuation">}</span></code></pre>
<p>struct eventpoll在epoll_create时创建。</p>
<pre class=" language-go"><code class="language-go">long <span class="token function">sys_epoll_create</span><span class="token punctuation">(</span><span class="token builtin">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> eventpoll <span class="token operator">*</span>ep<span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">// ...</span>
    <span class="token function">ep_alloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为ep分配内存并进行初始化</span>
 <span class="token comment" spellcheck="true">//调用anon_inode_getfd 新建一个file instance，也就是epoll可以看成一个文件（匿名文件）。</span>
 <span class="token comment" spellcheck="true">//因此我们可以看到epoll_create会返回一个fd。</span>
 <span class="token comment" spellcheck="true">//epoll所管理的所有的fd都是放在一个大的结构eventpoll(红黑树)中，将主结构体struct eventpoll *ep放入file->private项中进行保存（sys_epoll_ctl会取用）</span>

 fd <span class="token operator">=</span> <span class="token function">anon_inode_getfd</span><span class="token punctuation">(</span><span class="token string">"[eventpoll]"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>eventpoll_fops<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> O_RDWR <span class="token operator">|</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> O_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>其中，ep_alloc(struct eventpoll **pep)为pep分配内存，并初始化。<br>其中，上面注册的操作eventpoll_fops定义如下：</p>
<pre class=" language-go"><code class="language-go">static <span class="token keyword">const</span> <span class="token keyword">struct</span> file_operations eventpoll_fops <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span>release <span class="token operator">=</span>  ep_eventpoll_release<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>poll    <span class="token operator">=</span>  ep_eventpoll_poll<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>这样说来，内核中维护了一棵红黑树，大致的结构如下：<br>clip_image002<br>接着是epoll_ctl函数（省略了出错检查等代码）：</p>
<pre class=" language-go"><code class="language-go"> asmlinkage long <span class="token function">sys_epoll_ctl</span><span class="token punctuation">(</span><span class="token builtin">int</span> epfd<span class="token punctuation">,</span><span class="token builtin">int</span> op<span class="token punctuation">,</span><span class="token builtin">int</span> fd<span class="token punctuation">,</span><span class="token keyword">struct</span> epoll_event __user <span class="token operator">*</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">int</span> <span class="token builtin">error</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> file <span class="token operator">*</span>file<span class="token punctuation">,</span><span class="token operator">*</span>tfile<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> eventpoll <span class="token operator">*</span>ep<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> epoll_event epds<span class="token punctuation">;</span>
    <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token operator">-</span>FAULT<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//判断参数的合法性，将 __user *event 复制给 epds。</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ep_op_has_event</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>epds<span class="token punctuation">,</span>event<span class="token punctuation">,</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> epoll_event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> error_return<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//省略跳转到的代码</span>
    file  <span class="token operator">=</span> <span class="token function">fget</span> <span class="token punctuation">(</span>epfd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// epoll fd 对应的文件对象</span>
    tfile <span class="token operator">=</span> <span class="token function">fget</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// fd 对应的文件对象</span>
    <span class="token comment" spellcheck="true">//在create时存入进去的（anon_inode_getfd），现在取用。</span>
    ep <span class="token operator">=</span> file<span class="token operator">-</span><span class="token operator">></span>private<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span>
    <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>mtx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//防止重复添加（在ep的红黑树中查找是否已经存在这个fd）</span>
    epi <span class="token operator">=</span> <span class="token function">epi_find</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span>tfile<span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">case</span> EPOLL_CTL_ADD<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">//增加监听一个fd</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>epi<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                epds<span class="token punctuation">.</span>events <span class="token operator">|=</span> EPOLLERR <span class="token operator">|</span> POLLHUP<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//默认包含POLLERR和POLLHUP事件</span>
                <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token function">ep_insert</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span><span class="token operator">&amp;</span>epds<span class="token punctuation">,</span>tfile<span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在ep的红黑树中插入这个fd对应的epitm结构体。</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span>  <span class="token comment" spellcheck="true">//重复添加（在ep的红黑树中查找已经存在这个fd）。</span>
                <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token operator">-</span>EEXIST<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token builtin">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="ep-insert的实现如下："><a href="#ep-insert的实现如下：" class="headerlink" title="ep_insert的实现如下："></a>ep_insert的实现如下：</h4><pre class=" language-go"><code class="language-go">static <span class="token builtin">int</span> <span class="token function">ep_insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> eventpoll <span class="token operator">*</span>ep<span class="token punctuation">,</span> <span class="token keyword">struct</span> epoll_event <span class="token operator">*</span>event<span class="token punctuation">,</span> <span class="token keyword">struct</span> file <span class="token operator">*</span>tfile<span class="token punctuation">,</span> <span class="token builtin">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token builtin">int</span> <span class="token builtin">error</span> <span class="token punctuation">,</span>revents<span class="token punctuation">,</span>pwake <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   unsigned long flags <span class="token punctuation">;</span>
   <span class="token keyword">struct</span> epitem <span class="token operator">*</span>epi<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//...</span>
   <span class="token comment" spellcheck="true">//安装poll回调函数</span>
   <span class="token function">init_poll_funcptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>epq<span class="token punctuation">.</span>pt<span class="token punctuation">,</span> ep_ptable_queue_proc <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//...</span>
  <span class="token comment" spellcheck="true">//如果要监视的文件状态已经就绪并且还没有加入到就绪队列中,则将当前的epitem加入到就绪队列中</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>revents <span class="token operator">&amp;</span> event<span class="token operator">-</span><span class="token operator">></span>events<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">ep_is_linked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>epi<span class="token operator">-</span><span class="token operator">></span>rdllink<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>epi<span class="token operator">-</span><span class="token operator">></span>rdllink<span class="token punctuation">,</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>rdllist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将当前epi插入到ep->ready队列中。</span>
      <span class="token comment" spellcheck="true">//如果有进程正在等待文件的状态就绪，则唤醒一个等待进程。</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">waitqueue_active</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>wq<span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token function">__wake_up_locked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>wq<span class="token punctuation">,</span>TAKS_UNINTERRUPTIBLE <span class="token operator">|</span> TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//如果有进程等待eventpoll文件本身的事件就绪，</span>
      <span class="token comment" spellcheck="true">//则增加临时变量pwake的值，pwake的值不为0时，</span>
      <span class="token comment" spellcheck="true">//在释放lock后，会唤醒等待进程。 </span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">waitqueue_active</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>poll_wait<span class="token punctuation">)</span><span class="token punctuation">)</span>
         pwake<span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">,</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>pwake<span class="token punctuation">)</span>
      <span class="token function">ep_poll_safewake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>psw<span class="token punctuation">,</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>poll_wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//唤醒等待eventpoll文件状态就绪的进程</span>
   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>这两个函数将ep_ptable_queue_proc注册到epq.pt中的qproc。</p>
<p>执行f_op-&gt;poll(tfile, &amp;epq.pt)时，XXX_poll(tfile, &amp;epq.pt)函数会执行poll_wait()，poll_wait()会调用epq.pt.qproc函数，即为ep_ptable_queue_proc。</p>
<p>ep_ptable_queue_proc函数如下：</p>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 在文件操作中的poll函数中调用，将epoll的回调函数加入到目标文件的唤醒队列中。</span>
static void <span class="token function">ep_ptable_queue_proc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> file <span class="token operator">*</span>file<span class="token punctuation">,</span> wait_queue_head_t <span class="token operator">*</span>whead<span class="token punctuation">,</span> poll_table <span class="token operator">*</span>pt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> epitem <span class="token operator">*</span>epi <span class="token operator">=</span> <span class="token function">ep_item_from_epqueue</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//pt获取struct ep_queue的epi字段。</span>
    <span class="token keyword">struct</span> eppoll_entry <span class="token operator">*</span>pwq<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>epi<span class="token operator">-</span><span class="token operator">></span>nwait <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pwq <span class="token operator">=</span> <span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span>pwq_cache<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">init_waitqueue_func_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pwq<span class="token operator">-</span><span class="token operator">></span>wait<span class="token punctuation">,</span> ep_poll_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pwq<span class="token operator">-</span><span class="token operator">></span>whead <span class="token operator">=</span> whead<span class="token punctuation">;</span>
        pwq<span class="token operator">-</span><span class="token operator">></span>base <span class="token operator">=</span> epi<span class="token punctuation">;</span>
        <span class="token function">add_wait_queue</span><span class="token punctuation">(</span>whead<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pwq<span class="token operator">-</span><span class="token operator">></span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pwq<span class="token operator">-</span><span class="token operator">></span>llink<span class="token punctuation">,</span> <span class="token operator">&amp;</span>epi<span class="token operator">-</span><span class="token operator">></span>pwqlist<span class="token punctuation">)</span><span class="token punctuation">;</span>
        epi<span class="token operator">-</span><span class="token operator">></span>nwait<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//如果分配内存失败，则将nwait置为-1</span>
        epi<span class="token operator">-</span><span class="token operator">></span>nwait <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>ep_ptable_queue_proc(ep_poll_callback)<br>其中struct eppoll_entry定义如下：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">struct</span> eppoll_entry <span class="token punctuation">{</span>
   <span class="token keyword">struct</span> list_head llink<span class="token punctuation">;</span>
   <span class="token keyword">struct</span> epitem <span class="token operator">*</span>base<span class="token punctuation">;</span>
   wait_queue_t wait<span class="token punctuation">;</span>
   wait_queue_head_t <span class="token operator">*</span>whead<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
ep_ptable_queue_proc 函数完成 epitem 加入到特定文件的wait队列任务。
ep_ptable_queue_proc有三个参数：
<span class="token keyword">struct</span> file <span class="token operator">*</span>file<span class="token punctuation">;</span>              该fd对应的文件对象
wait_queue_head_t <span class="token operator">*</span>whead<span class="token punctuation">;</span>      该fd对应的设备等待队列（同<span class="token keyword">select</span>中的mydev<span class="token operator">-</span><span class="token operator">></span>wait_address）
poll_table <span class="token operator">*</span>pt<span class="token punctuation">;</span>                 f_op<span class="token operator">-</span><span class="token operator">></span><span class="token function">poll</span><span class="token punctuation">(</span>tfile<span class="token punctuation">,</span> <span class="token operator">&amp;</span>epq<span class="token punctuation">.</span>pt<span class="token punctuation">)</span>中的epq<span class="token punctuation">.</span>pt</code></pre>
<p>在<code>ep_ptable_queue_proc</code>函数中，引入了另外一个非常重要的数据结构<code>eppoll_entry</code>。</p>
<p><code>eppoll_entry主</code>要完成<code>epitem</code>和<code>epitem</code>事件发生时的<code>callback</code>（<code>ep_poll_callback</code>）函数之间的关联。首先将<code>eppoll_entry</code>的<code>whead</code>指向<code>fd</code>的设备等待队列（同<code>select</code>中的<code>wait_address</code>），然后初始化<code>eppoll_entry</code>的base变量指向<code>epitem</code>，最后通过<code>add_wait_queue</code>将<code>epoll_entry</code>挂载到fd的设备等待队列上。</p>
<p>完成这个动作后，<code>epoll_entry</code>已经被挂载到fd的设备等待队列。</p>
<p>由于<code>ep_ptable_queue_proc</code>函数设置了等待队列的ep_poll_callback回调函数。所以在设备硬件数据到来时，硬件中断处理函数中会唤醒该等待队列上等待的进程时，会调用唤醒函数<code>ep_poll_callback</code>。</p>
<pre class=" language-go"><code class="language-go">static <span class="token builtin">int</span> <span class="token function">ep_poll_callback</span><span class="token punctuation">(</span>wait_queue_t <span class="token operator">*</span>wait<span class="token punctuation">,</span> unsigned mode<span class="token punctuation">,</span> <span class="token builtin">int</span> sync<span class="token punctuation">,</span> void <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token builtin">int</span> pwake <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   unsigned long flags<span class="token punctuation">;</span>
   <span class="token keyword">struct</span> epitem <span class="token operator">*</span>epi <span class="token operator">=</span> <span class="token function">ep_item_from_wait</span><span class="token punctuation">(</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">struct</span> eventpoll <span class="token operator">*</span>ep <span class="token operator">=</span> epi<span class="token operator">-</span><span class="token operator">></span>ep<span class="token punctuation">;</span>
   <span class="token function">spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">//判断注册的事件</span>
   <span class="token comment" spellcheck="true">//有非EPOLLONESHONT或EPOLLET事件</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>epi<span class="token operator">-</span><span class="token operator">></span>event<span class="token punctuation">.</span>events <span class="token operator">&amp;</span> ~EP_PRIVATE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unlikely</span><span class="token punctuation">(</span>ep<span class="token operator">-</span><span class="token operator">></span>ovflist <span class="token operator">!=</span> EP_UNACTIVE_PTR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>epi<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">==</span> EP_UNACTIVE_PTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         epi<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> ep<span class="token operator">-</span><span class="token operator">></span>ovflist<span class="token punctuation">;</span>
         ep<span class="token operator">-</span><span class="token operator">></span>ovflist <span class="token operator">=</span> epi<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ep_is_linked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>epi<span class="token operator">-</span><span class="token operator">></span>rdllink<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> is_linked<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//将该fd加入到epoll监听的就绪链表中</span>
   <span class="token function">list_add_tail</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>epi<span class="token operator">-</span><span class="token operator">></span>rdllink<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>rdllist<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">//唤醒调用epoll_wait()函数时睡眠的进程。用户层epoll_wait(...) 超时前返回。</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">waitqueue_active</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>wq<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token function">__wake_up_locked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>wq<span class="token punctuation">,</span> TASK_UNINTERRUPTIBLE <span class="token operator">|</span> TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">waitqueue_active</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>poll_wait<span class="token punctuation">)</span><span class="token punctuation">)</span>
      pwake<span class="token operator">++</span><span class="token punctuation">;</span>
   out_unlock<span class="token punctuation">:</span> <span class="token function">spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>pwake<span class="token punctuation">)</span>
      <span class="token function">ep_poll_safewake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>psw<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>poll_wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>所以<code>ep_poll_callback</code>函数主要的功能是将被监视文件的等待事件就绪时，将文件对应的epitem实例添加到就绪队列中，当用户调用<code>epoll_wait()</code>时，内核会将就绪队列中的事件报告给用户。</p>
<h4 id="epoll-wait实现如下："><a href="#epoll-wait实现如下：" class="headerlink" title="epoll_wait实现如下："></a>epoll_wait实现如下：</h4><pre class=" language-go"><code class="language-go"><span class="token function">SYSCALL_DEFINE4</span><span class="token punctuation">(</span>epoll_wait<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> epfd<span class="token punctuation">,</span> <span class="token keyword">struct</span> epoll_event __user <span class="token operator">*</span><span class="token punctuation">,</span> events<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> maxevents<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
   <span class="token builtin">int</span> <span class="token builtin">error</span><span class="token punctuation">;</span>
   <span class="token keyword">struct</span> file <span class="token operator">*</span>file<span class="token punctuation">;</span>
   <span class="token keyword">struct</span> eventpoll <span class="token operator">*</span>ep<span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">// 检查maxevents参数。</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>maxevents <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> maxevents <span class="token operator">></span> EP_MAX_EVENTS<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">//检查用户传入的events指向的内存是否可写。</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">access_ok</span><span class="token punctuation">(</span>VERIFY_WRITE<span class="token punctuation">,</span> events<span class="token punctuation">,</span> maxevents <span class="token operator">*</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> epoll_event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
      <span class="token keyword">goto</span> error_return<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token comment" spellcheck="true">//获取epfd对应的eventpoll文件的file实例</span>
   <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token operator">-</span>EBADF<span class="token punctuation">;</span>
   file <span class="token operator">=</span> <span class="token function">fget</span><span class="token punctuation">(</span>epfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span>
      <span class="token keyword">goto</span> error_return<span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">//检查epfd对应的文件操作是不是eventpoll_fops，用来判断epfd是否是一个eventpoll文件。</span>
   <span class="token comment" spellcheck="true">//如果不是则返回EINVAL错误。</span>
   <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_file_epoll</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">goto</span> error_fput<span class="token punctuation">;</span>
   ep <span class="token operator">=</span> file<span class="token operator">-</span><span class="token operator">></span>private_data<span class="token punctuation">;</span>
   <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token function">ep_poll</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> events<span class="token punctuation">,</span> maxevents<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
    error_fput<span class="token punctuation">:</span>
   <span class="token function">fput</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
error_return<span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token builtin">error</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="epoll-wait中对ep-poll进行了调用，ep-poll实现如下："><a href="#epoll-wait中对ep-poll进行了调用，ep-poll实现如下：" class="headerlink" title="epoll_wait中对ep_poll进行了调用，ep_poll实现如下："></a>epoll_wait中对ep_poll进行了调用，ep_poll实现如下：</h4><pre class=" language-go"><code class="language-go">static <span class="token builtin">int</span> <span class="token function">ep_poll</span><span class="token punctuation">(</span><span class="token keyword">struct</span> eventpoll <span class="token operator">*</span>ep<span class="token punctuation">,</span> <span class="token keyword">struct</span> epoll_event __user <span class="token operator">*</span>events<span class="token punctuation">,</span> <span class="token builtin">int</span> maxevents<span class="token punctuation">,</span> long timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">int</span> res<span class="token punctuation">,</span> eavail<span class="token punctuation">;</span>
   unsigned long flags<span class="token punctuation">;</span>
   long jtimeout<span class="token punctuation">;</span>
   wait_queue_t wait<span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">// timeout是以毫秒为单位，这里是要转换为jiffies时间。这里加上999(即1000-1)，是为了向上取整。</span>
   jtimeout <span class="token operator">=</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> timeout <span class="token operator">>=</span> EP_MAX_MSTIMEO<span class="token punctuation">)</span> ?MAX_SCHEDULE_TIMEOUT <span class="token punctuation">:</span> <span class="token punctuation">(</span>timeout <span class="token operator">*</span> HZ <span class="token operator">+</span> <span class="token number">999</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
 retry<span class="token punctuation">:</span>
   <span class="token function">spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>rdllist<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 没有事件，所以需要睡眠。当有事件到来时，睡眠会被ep_poll_callback函数唤醒</span>
      <span class="token function">init_waitqueue_entry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wait<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将current进程放在wait这个等待队列中。</span>
      wait<span class="token punctuation">.</span>flags <span class="token operator">|=</span> WQ_FLAG_EXCLUSIVE<span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 将当前进程加入到eventpoll的等待队列中，等待文件状态就绪或直到超时，或被信号中断。 </span>
      <span class="token function">__add_wait_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>wq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">/* 执行ep_poll_callback()唤醒时应当需要将当前进程唤醒，所以当前进程状态应该为“可唤醒”TASK_INTERRUPTIBLE  */</span>
         <span class="token function">set_current_state</span><span class="token punctuation">(</span>TASK_INTERRUPTIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//TASK_INTERRUPTIBLE 允许被唤醒</span>
         <span class="token comment" spellcheck="true">/* 如果就绪队列不为空，也就是说已经有文件的状态就绪或者超时，则退出循环。*/</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>rdllist<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>jtimeout<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">/* 如果当前进程接收到信号，则退出循环，返回EINTR错误 */</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">signal_pending</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token operator">-</span>EINTR<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
          <span class="token function">spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">/* 主动让出处理器，等待ep_poll_callback()将当前进程唤醒或者超时,返回值是剩余的时间。
从这里开始当前进程会进入睡眠状态，直到某些文件的状态就绪或者超时。
当文件状态就绪时，eventpoll的回调函数ep_poll_callback()会唤醒在ep->wq指向的等待队列中的进程。*/</span>
         jtimeout <span class="token operator">=</span> <span class="token function">schedule_timeout</span><span class="token punctuation">(</span>jtimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token function">spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">__remove_wait_queue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>wq<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">set_current_state</span><span class="token punctuation">(</span>TASK_RUNNING<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/* ep->ovflist链表存储的向用户传递事件时暂存就绪的文件。
    * 所以不管是就绪队列ep->rdllist不为空，或者ep->ovflist不等于
    * EP_UNACTIVE_PTR，都有可能现在已经有文件的状态就绪。
    * ep->ovflist不等于EP_UNACTIVE_PTR有两种情况，一种是NULL，此时
    * 可能正在向用户传递事件，不一定就有文件状态就绪，
    * 一种情况时不为NULL，此时可以肯定有文件状态就绪，
    * 参见ep_send_events()。
    */</span>
   eavail <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">list_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>rdllist<span class="token punctuation">)</span> <span class="token operator">||</span> ep<span class="token operator">-</span><span class="token operator">></span>ovflist <span class="token operator">!=</span> EP_UNACTIVE_PTR<span class="token punctuation">;</span>
    <span class="token function">spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ep<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">/* 如果没有被信号中断，并且有事件就绪，但是没有获取到事件(有可能被其他进程获取到了)，并且没有超时，则跳转到retry标签处，重新等待文件状态就绪。 */</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res <span class="token operator">&amp;&amp;</span> eavail <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">ep_send_events</span><span class="token punctuation">(</span>ep<span class="token punctuation">,</span> events<span class="token punctuation">,</span> maxevents<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> jtimeout<span class="token punctuation">)</span>
      <span class="token keyword">goto</span> retry<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 返回获取到的事件的个数或者错误码 */</span>
   <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h3><p>####混杂模式</p>
<blockquote>
<p>混杂模式（英语：promiscuous mode）是电脑网络中的术语。是指一台机器的网卡能够接收所有经过它的数据流，而不论其目的地址是否是它。<br> 混杂模式常用于网络分析</p>
</blockquote>
<h4 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h4><blockquote>
<p>DMA，全称Direct Memory Access，即直接存储器访问。<br> DMA传输将数据从一个地址空间复制到另一个地址空间，提供在外设和存储器之间或者存储器和存储器之间的高速数据传输。当CPU初始化这个传输动作，传输动作本身是由DMA控制器来实现和完成的。DMA传输方式无需CPU直接控制传输，也没有中断处理方式那样保留现场和恢复现场过程，通过硬件为RAM和IO设备开辟一条直接传输数据的通道，使得CPU的效率大大提高。</p>
</blockquote>
<p>DMA的主要特征:</p>
<ul>
<li>每个通道都直接连接专用的硬件DMA请求，每个通道都同样支持软件触发，这些功能通过软件来配置。</li>
<li>在同一个DMA模块上，多个请求间的优先权可以通过软件编程设置（共有四级：很高、高、中等和低），优先权设置相等时由硬件决定（请求0优先于请求1，依此类推）。</li>
<li>独立数据源和目标数据区的传输宽度（字节、半字、全字），模拟打包和拆包的过程。源和目标地址必须按数据传输宽度对齐。</li>
<li>支持循环的缓冲器管理。</li>
<li>每个通道都有3个事件标志（DMA半传输、DMA传输完成和DMA传输出错），这3个事件标志逻辑或成为一个单独的中断请求。</li>
<li>存储器和存储器间的传输、外设和存储器、存储器和外设之间的传输。</li>
<li>闪存、SRAM、外设的SRAM、APB1、APB2和AHB外设均可作为访问的源和目标。</li>
<li>可编程的数据传输数目：最大为65535（0xFFFF）。<h4 id="非阻塞socket编程处理EAGAIN错误"><a href="#非阻塞socket编程处理EAGAIN错误" class="headerlink" title="非阻塞socket编程处理EAGAIN错误"></a>非阻塞socket编程处理EAGAIN错误</h4>在linux进行非阻塞的socket接收数据时经常出现<code>Resource temporarily unavailable，errno代码为11(EAGAIN)</code>，这是什么意思？</li>
</ul>
<p>这表明你在非阻塞模式下调用了阻塞操作，在该操作没有完成就返回这个错误，这个错误不会破坏<code>socket</code>的同步，不用管它，下次循环接着<code>recv</code>就可以。对非阻塞<code>socket</code>而言，<code>EAGAIN</code>不是一种错误。在<code>VxWorks</code>和<code>Windows</code>上，<code>EAGAIN</code>的名字叫做<code>EWOULDBLOCK</code>。</p>
]]></content>
      <categories>
        <category>Golang Kernel epoll</category>
      </categories>
      <tags>
        <tag>Golang Kernel epoll</tag>
      </tags>
  </entry>
  <entry>
    <title>golang netpoll的实现与分析</title>
    <url>/2021/10/12/golang-netpoll-realization-analysis/</url>
    <content><![CDATA[<h3 id="1-io模型"><a href="#1-io模型" class="headerlink" title="1:io模型"></a>1:io模型</h3><p>计算机的io模型区分为多种，目前用的最多的也就是nio、epoll、select。<br>结合不同场景使用不同的io模型才是正解。<br>具体可以查看我之前写的io模型演进。<a href="https://xiaomozhang.github.io/2021/10/12/service-io-model-evolution/"><code>io模型演进</code></a></p>
<h3 id="2-golang中网络io"><a href="#2-golang中网络io" class="headerlink" title="2:golang中网络io"></a>2:golang中网络io</h3><p>golang天然适合并发，为什么？一个是轻量级的协程，二个是将复杂的io进行了抽象化，简化了流程。<br>比如我们简单的访问一个http服务，几行简单的代码就能实现</p>
<pre class=" language-go"><code class="language-go">tr <span class="token operator">:=</span> <span class="token operator">&amp;</span>recordingTransport<span class="token punctuation">{</span><span class="token punctuation">}</span>
client <span class="token operator">:=</span> <span class="token operator">&amp;</span>Client<span class="token punctuation">{</span>Transport<span class="token punctuation">:</span> tr<span class="token punctuation">}</span>
url <span class="token operator">:=</span> <span class="token string">"http://dummy.faketld/"</span>
client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Note: doesn't hit network</span></code></pre>
<p>那么golang对Io做了哪些优化呢？能实现如此简单的切换呢？</p>
<h3 id="3-groutinue-针对io事件的调度"><a href="#3-groutinue-针对io事件的调度" class="headerlink" title="3:groutinue 针对io事件的调度"></a>3:groutinue 针对io事件的调度</h3><p>我们这里假设你对groutinue调度已经有一定的了解了。<br>我们知道,在go中，每个process绑定一个虚拟的machine,而在machine中，是具有一个g0的，g0在本地遍历自己的队列获取g或者从全局队列获取g。<br><img src="/images/golang-netpoll-realization-analysis/golang-netpoll-realization-analysis-groutinue-sched.png" alt="grouting-schedule.png"><br>我们也知道了，在g运行的时候，g会把执行权交给g0进行重新调度，那么在io事件中，g是怎么把事件交还给g0的呢？这时候就牵扯到我们今天的主角—-netpoll。</p>
<h3 id="4-netpoll"><a href="#4-netpoll" class="headerlink" title="4:netpoll"></a>4:netpoll</h3><p>o语言在网络轮询器中使用 I/O 多路复用模型处理 I/O 操作，但是他没有选择最常见的系统调用 select。 select 也可以提供 I/O 多路复用的能力，但是使用它有比较多的限制：</p>
<ul>
<li>监听能力有限 — 最多只能监听 1024 个文件描述符，可以通过手动修改limit来改变，但是各方面成本比较大；</li>
<li>内存拷贝开销大 — 需要维护一个较大的数据结构存储文件描述符，该结构需要拷贝到内核中；</li>
<li>时间复杂度 — 返回准备就绪的事件个数后，需要遍历所有的文件描述符；</li>
</ul>
<p>golang官方统一封装一个网络事件的poll，和平台无关，为epoll/kqueue/port/AIX/Windows 提供了特定的实现。</p>
<ul>
<li>src/runtime/netpoll_epoll.go</li>
<li>src/runtime/netpoll_kqueue.go</li>
<li>src/runtime/netpoll_solaris.go</li>
<li>src/runtime/netpoll_windows.go</li>
<li>src/runtime/netpoll_aix.go</li>
<li>src/runtime/netpoll_fake.go</li>
</ul>
<p>这些模块在不同平台上实现了相同的功能，构成了一个常见的树形结构。编译器在编译 Go 语言程序时，会根据目标平台选择树中特定的分支进行编译</p>
<p>必须实现的方法有：</p>
<pre class=" language-text"><code class="language-text">​netpollinit 初始化网络轮询器，通过 `sync.Once` 和 `netpollInited` 变量保证函数只会调用一次
​netpollopen 监听文件描述符上的边缘触发事件，创建事件并加入监听poll_runtime_pollOpen函数，这个函数将用户态协程的pollDesc信息写入到epoll所在的单独线程，从而实现用户态和内核态的关联。
​netpoll  轮询网络并返回一组已经准备就绪的 Goroutine，传入的参数会决定它的行为：
  - 如果参数小于0，阻塞等待文件就绪
  - 如果参数等于0，非阻塞轮询
  - 如果参数大于0，阻塞定期轮询
​netpollBreak 唤醒网络轮询器，例如：计时器向前修改时间时会通过该函数中断网络轮询器
​netpollIsPollDescriptor  判断文件描述符是否被轮询器使用</code></pre>
<p>netpoll中有2个重要的结构体：</p>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//pollCache  </span>
<span class="token comment" spellcheck="true">//pollDesc</span>

<span class="token keyword">type</span> pollDesc <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    link <span class="token operator">*</span>pollDesc <span class="token comment" spellcheck="true">// in pollcache, protected by pollcache.lock</span>

    <span class="token comment" spellcheck="true">// The lock protects pollOpen, pollSetDeadline, pollUnblock and deadlineimpl operations.</span>
    <span class="token comment" spellcheck="true">// This fully covers seq, rt and wt variables. fd is constant throughout the PollDesc lifetime.</span>
    <span class="token comment" spellcheck="true">// pollReset, pollWait, pollWaitCanceled and runtime·netpollready (IO readiness notification)</span>
    <span class="token comment" spellcheck="true">// proceed w/o taking the lock. So closing, everr, rg, rd, wg and wd are manipulated</span>
    <span class="token comment" spellcheck="true">// in a lock-free way by all operations.</span>
    <span class="token comment" spellcheck="true">// NOTE(dvyukov): the following code uses uintptr to store *g (rg/wg),</span>
    <span class="token comment" spellcheck="true">// that will blow up when GC starts moving objects.</span>
    lock    mutex <span class="token comment" spellcheck="true">// protects the following fields</span>
    fd      <span class="token builtin">uintptr</span>
    closing <span class="token builtin">bool</span>
    everr   <span class="token builtin">bool</span>      <span class="token comment" spellcheck="true">// marks event scanning error happened</span>
    user    <span class="token builtin">uint32</span>    <span class="token comment" spellcheck="true">// user settable cookie</span>
    rseq    <span class="token builtin">uintptr</span>   <span class="token comment" spellcheck="true">// protects from stale read timers</span>
    rg      <span class="token builtin">uintptr</span>   <span class="token comment" spellcheck="true">// pdReady, pdWait, G waiting for read or nil</span>
    rt      timer     <span class="token comment" spellcheck="true">// read deadline timer (set if rt.f != nil)</span>
    rd      <span class="token builtin">int64</span>     <span class="token comment" spellcheck="true">// read deadline</span>
    wseq    <span class="token builtin">uintptr</span>   <span class="token comment" spellcheck="true">// protects from stale write timers</span>
    wg      <span class="token builtin">uintptr</span>   <span class="token comment" spellcheck="true">// pdReady, pdWait, G waiting for write or nil</span>
    wt      timer     <span class="token comment" spellcheck="true">// write deadline timer</span>
    wd      <span class="token builtin">int64</span>     <span class="token comment" spellcheck="true">// write deadline</span>
    self    <span class="token operator">*</span>pollDesc <span class="token comment" spellcheck="true">// storage for indirect interface. See (*pollDesc).makeArg.</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> pollCache <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    lock  mutex
    first <span class="token operator">*</span>pollDesc
    <span class="token comment" spellcheck="true">// PollDesc objects must be type-stable,</span>
    <span class="token comment" spellcheck="true">// because we can get ready notification from epoll/kqueue</span>
    <span class="token comment" spellcheck="true">// after the descriptor is closed/reused.</span>
    <span class="token comment" spellcheck="true">// Stale notifications are detected using seq variable,</span>
    <span class="token comment" spellcheck="true">// seq is incremented when deadlines are changed or descriptor is reused.</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li><code>rseq</code> 和 <code>wseq</code> — 表示文件描述符被重用或者计时器被重置；</li>
<li><code>rg</code> 和 <code>wg</code> — 表示二进制的信号量，可能为 pdReady、pdWait、等待文件描述符可读或者可写的 Goroutine 以及 nil；</li>
<li><code>rd</code> 和 <code>wd</code> — 等待文件描述符可读或者可写的截止日期；</li>
<li><code>rt</code> 和 <code>wt</code> — 用于等待文件描述符的计时器；<br>golang关于io时间做了很多统一的封装在runtime/netpoll之下（其实调用的是internal/poll包下的）,然后通过internal包下对 runtime包进行调用，internal包下也封装了一个同名的pollDesc对象，不过是一个指针(关于internal有个细节就是这个包是不能被外部调用)：<pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> pollDesc <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  runtimeCtx <span class="token builtin">uintptr</span>
<span class="token punctuation">}</span></code></pre>
其实最终都是对runtime底下的调用，只不过封装了一些易用的方法，比如read,write,做了一些抽象化的处理。<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">runtime_pollServerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//初始化</span>
<span class="token keyword">func</span> <span class="token function">runtime_pollOpen</span><span class="token punctuation">(</span>fd <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uintptr</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打开</span>
<span class="token keyword">func</span> <span class="token function">runtime_pollClose</span><span class="token punctuation">(</span>ctx <span class="token builtin">uintptr</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//关闭</span>
<span class="token keyword">func</span> <span class="token function">runtime_pollWait</span><span class="token punctuation">(</span>ctx <span class="token builtin">uintptr</span><span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token comment" spellcheck="true">//等待</span>
<span class="token keyword">func</span> <span class="token function">runtime_pollWaitCanceled</span><span class="token punctuation">(</span>ctx <span class="token builtin">uintptr</span><span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>  <span class="token comment" spellcheck="true">//等待并（失败时）退出</span>
<span class="token keyword">func</span> <span class="token function">runtime_pollReset</span><span class="token punctuation">(</span>ctx <span class="token builtin">uintptr</span><span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>  <span class="token comment" spellcheck="true">//重置状态,复用</span>
<span class="token keyword">func</span> <span class="token function">runtime_pollSetDeadline</span><span class="token punctuation">(</span>ctx <span class="token builtin">uintptr</span><span class="token punctuation">,</span> d <span class="token builtin">int64</span><span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置读/写超时时间</span>
<span class="token keyword">func</span> <span class="token function">runtime_pollUnblock</span><span class="token punctuation">(</span>ctx <span class="token builtin">uintptr</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 解锁 </span>
<span class="token keyword">func</span> <span class="token function">runtime_isPollServerDescriptor</span><span class="token punctuation">(</span>fd <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span>  
<span class="token comment" spellcheck="true">// 这里的ctx实际上是一个io fd，不是上下文</span>
<span class="token comment" spellcheck="true">// mod 是 r 或者 w  ,io事件毕竟只有有这两种</span>
<span class="token comment" spellcheck="true">// d 意义和time.d差不多，就是关于时间的</span></code></pre>
这些方法的具体实现都在runtime下，我们挑几个重要的看看：</li>
</ul>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//将就绪好得io事件，写入就绪的grotion对列</span>
<span class="token comment" spellcheck="true">// netpollready is called by the platform-specific netpoll function.</span>
<span class="token comment" spellcheck="true">// It declares that the fd associated with pd is ready for I/O.</span>
<span class="token comment" spellcheck="true">// The toRun argument is used to build a list of goroutines to return</span>
<span class="token comment" spellcheck="true">// from netpoll. The mode argument is 'r', 'w', or 'r'+'w' to indicate</span>
<span class="token comment" spellcheck="true">// whether the fd is ready for reading or writing or both.</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">// This may run while the world is stopped, so write barriers are not allowed.</span>
<span class="token comment" spellcheck="true">//go:nowritebarrier</span>
<span class="token keyword">func</span> <span class="token function">netpollready</span><span class="token punctuation">(</span>toRun <span class="token operator">*</span>gList<span class="token punctuation">,</span> pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> rg<span class="token punctuation">,</span> wg <span class="token operator">*</span>g
    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'r'</span> <span class="token operator">||</span> mode <span class="token operator">==</span> <span class="token string">'r'</span><span class="token operator">+</span><span class="token string">'w'</span> <span class="token punctuation">{</span>
        rg <span class="token operator">=</span> <span class="token function">netpollunblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'w'</span> <span class="token operator">||</span> mode <span class="token operator">==</span> <span class="token string">'r'</span><span class="token operator">+</span><span class="token string">'w'</span> <span class="token punctuation">{</span>
        wg <span class="token operator">=</span> <span class="token function">netpollunblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> rg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        toRun<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> wg <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        toRun<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//轮询时调用的方法，如果io就绪了返回ok，如果没就绪，返回flase</span>
<span class="token comment" spellcheck="true">// returns true if IO is ready, or false if timedout or closed</span>
<span class="token comment" spellcheck="true">// waitio - wait only for completed IO, ignore errors</span>
<span class="token keyword">func</span> <span class="token function">netpollblock</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int32</span><span class="token punctuation">,</span> waitio <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    gpp <span class="token operator">:=</span> <span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>rg
    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'w'</span> <span class="token punctuation">{</span>
        gpp <span class="token operator">=</span> <span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>wg
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// set the gpp semaphore to pdWait</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        old <span class="token operator">:=</span> <span class="token operator">*</span>gpp
        <span class="token keyword">if</span> old <span class="token operator">==</span> pdReady <span class="token punctuation">{</span>
            <span class="token operator">*</span>gpp <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> old <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
            <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"runtime: double wait"</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">Casuintptr</span><span class="token punctuation">(</span>gpp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pdWait<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// need to recheck error states after setting gpp to pdWait</span>
    <span class="token comment" spellcheck="true">// this is necessary because runtime_pollUnblock/runtime_pollSetDeadline/deadlineimpl</span>
    <span class="token comment" spellcheck="true">// do the opposite: store to closing/rd/wd, membarrier, load of rg/wg</span>
    <span class="token keyword">if</span> waitio <span class="token operator">||</span> <span class="token function">netpollcheckerr</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> mode<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//gopark是很重要得一个方法，本质上是让出当前协程执行权，一般是返回到g0让g0重新调度</span>
        <span class="token function">gopark</span><span class="token punctuation">(</span>netpollblockcommit<span class="token punctuation">,</span> unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>gpp<span class="token punctuation">)</span><span class="token punctuation">,</span> waitReasonIOWait<span class="token punctuation">,</span> traceEvGoBlockNet<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// be careful to not lose concurrent pdReady notification</span>
    old <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">Xchguintptr</span><span class="token punctuation">(</span>gpp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> old <span class="token operator">></span> pdWait <span class="token punctuation">{</span>
        <span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">"runtime: corrupted polldesc"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> old <span class="token operator">==</span> pdReady
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//获取到当前io所在的协程，如果协程已关闭，直接返回nil</span>
<span class="token keyword">func</span> <span class="token function">netpollunblock</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int32</span><span class="token punctuation">,</span> ioready <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">*</span>g <span class="token punctuation">{</span>
    gpp <span class="token operator">:=</span> <span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>rg
    <span class="token keyword">if</span> mode <span class="token operator">==</span> <span class="token string">'w'</span> <span class="token punctuation">{</span>
        gpp <span class="token operator">=</span> <span class="token operator">&amp;</span>pd<span class="token punctuation">.</span>wg
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        old <span class="token operator">:=</span> <span class="token operator">*</span>gpp
        <span class="token keyword">if</span> old <span class="token operator">==</span> pdReady <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> old <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ioready <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Only set pdReady for ioready. runtime_pollWait</span>
            <span class="token comment" spellcheck="true">// will check for timeout/cancel before waiting.</span>
            <span class="token keyword">return</span> <span class="token boolean">nil</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">var</span> <span class="token builtin">new</span> <span class="token builtin">uintptr</span>
        <span class="token keyword">if</span> ioready <span class="token punctuation">{</span>
            <span class="token builtin">new</span> <span class="token operator">=</span> pdReady
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">Casuintptr</span><span class="token punctuation">(</span>gpp<span class="token punctuation">,</span> old<span class="token punctuation">,</span> <span class="token builtin">new</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> old <span class="token operator">==</span> pdWait <span class="token punctuation">{</span>
                old <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>思考：</p>
<blockquote>
<p>1、 a、b两个协程，b io阻塞，完成后，一直没有获取到调度权，会出现什么后果。<br> 2、 a、b两个协程，b io阻塞，2s time out,但是a一直占用执行权，b一直没有获取到调度权，5s后才获得到，b对使用端已经超时，这时候是超时还是不超时</p>
</blockquote>
<p>所以设置的timeout，不一定是真实的io waiting，可能是没有获取到执行权。</p>
<h3 id="5-怎么触发读事件的？"><a href="#5-怎么触发读事件的？" class="headerlink" title="5:怎么触发读事件的？"></a>5:怎么触发读事件的？</h3><p>因为写io是我们主动操作的，那么读是怎么进行操作的呢？这是一个被动的状态<br>首先我们了解一个结构体。golang中所有的网络事件和文件读写都用fd进行标识(位于internal包下)。</p>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// FD is a file descriptor. The net and os packages use this type as a</span>
<span class="token comment" spellcheck="true">// field of a larger type representing a network connection or OS file.</span>
<span class="token keyword">type</span> FD <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Lock sysfd and serialize access to Read and Write methods.</span>
    fdmu fdMutex

    <span class="token comment" spellcheck="true">// System file descriptor. Immutable until Close.</span>
    Sysfd <span class="token builtin">int</span>

    <span class="token comment" spellcheck="true">// I/O poller.</span>
    pd pollDesc

    <span class="token comment" spellcheck="true">// Writev cache.</span>
    iovecs <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span>syscall<span class="token punctuation">.</span>Iovec

    <span class="token comment" spellcheck="true">// Semaphore signaled when file is closed.</span>
    csema <span class="token builtin">uint32</span>

    <span class="token comment" spellcheck="true">// Non-zero if this file has been set to blocking mode.</span>
    isBlocking <span class="token builtin">uint32</span>

    <span class="token comment" spellcheck="true">// Whether this is a streaming descriptor, as opposed to a</span>
    <span class="token comment" spellcheck="true">// packet-based descriptor like a UDP socket. Immutable.</span>
    IsStream <span class="token builtin">bool</span>

    <span class="token comment" spellcheck="true">// Whether a zero byte read indicates EOF. This is false for a</span>
    <span class="token comment" spellcheck="true">// message based socket connection.</span>
    ZeroReadIsEOF <span class="token builtin">bool</span>

    <span class="token comment" spellcheck="true">// Whether this is a file rather than a network socket.</span>
    isFile <span class="token builtin">bool</span>
<span class="token punctuation">}</span></code></pre>
<p>我们看到，fd中关联的pollDesc,通过pollDesc调用了runtime包内部的实现的各种平台的io事件。</p>
<p>当我们进行read操作时（下面是代码截取）</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">{</span>
    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ignoringEINTRIO</span><span class="token punctuation">(</span>syscall<span class="token punctuation">.</span>Read<span class="token punctuation">,</span> fd<span class="token punctuation">.</span>Sysfd<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        n <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">if</span> err <span class="token operator">==</span> syscall<span class="token punctuation">.</span>EAGAIN <span class="token operator">&amp;&amp;</span> fd<span class="token punctuation">.</span>pd<span class="token punctuation">.</span><span class="token function">pollable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> err <span class="token operator">=</span> fd<span class="token punctuation">.</span>pd<span class="token punctuation">.</span><span class="token function">waitRead</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span>isFile<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> fd<span class="token punctuation">.</span><span class="token function">eofError</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token keyword">return</span> n<span class="token punctuation">,</span> err
    <span class="token punctuation">}</span></code></pre>
<p>会阻塞调用waiteRead方法，方法内部主要就是调用的runtime_pollWait。</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">poll_runtime_pollWait</span><span class="token punctuation">(</span>pd <span class="token operator">*</span>pollDesc<span class="token punctuation">,</span> mode <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    errcode <span class="token operator">:=</span> <span class="token function">netpollcheckerr</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> errcode <span class="token operator">!=</span> pollNoError <span class="token punctuation">{</span>
        <span class="token keyword">return</span> errcode
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// As for now only Solaris, illumos, and AIX use level-triggered IO.</span>
    <span class="token keyword">if</span> GOOS <span class="token operator">==</span> <span class="token string">"solaris"</span> <span class="token operator">||</span> GOOS <span class="token operator">==</span> <span class="token string">"illumos"</span> <span class="token operator">||</span> GOOS <span class="token operator">==</span> <span class="token string">"aix"</span> <span class="token punctuation">{</span>
        <span class="token function">netpollarm</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token operator">!</span><span class="token function">netpollblock</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        errcode <span class="token operator">=</span> <span class="token function">netpollcheckerr</span><span class="token punctuation">(</span>pd<span class="token punctuation">,</span> <span class="token function">int32</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> errcode <span class="token operator">!=</span> pollNoError <span class="token punctuation">{</span>
            <span class="token keyword">return</span> errcode
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// Can happen if timeout has fired and unblocked us,</span>
        <span class="token comment" spellcheck="true">// but before we had a chance to run, timeout has been reset.</span>
        <span class="token comment" spellcheck="true">// Pretend it has not happened and retry.</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pollNoError
<span class="token punctuation">}</span></code></pre>
<p>这里主要是由netpollblock控制,netpollblock方法我们上面就说过，当io还未就绪的时候，直接释放当前的执行权，否则就是已经可读写的io事件，直接进行读取操作即可。</p>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6:总结"></a>6:总结</h3><p>整体流程<br>listenStream –&gt; bind&amp;listen&amp;init –&gt; pollDesc.Init -&gt; poll_runtime_pollOpen –&gt; runtime.netpollopen -&gt; epollctl(EPOLL_CTL_ADD)<br><img src="/images/golang-netpoll-realization-analysis/golang-netpoll-realization-analysis-epoll_ctl_add.jpg" alt="epoll_ctl_add.png"><br>pollDesc是由pollCache进行维护的，并且不受GC监控</p>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Must be in non-GC memory because can be referenced</span>
<span class="token comment" spellcheck="true">// only from epoll/kqueue internals.</span>
mem <span class="token operator">:=</span> <span class="token function">persistentalloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span>pdSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>other_sys<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    pd <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pollDesc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> i<span class="token operator">*</span>pdSize<span class="token punctuation">)</span><span class="token punctuation">)</span>
    pd<span class="token punctuation">.</span>link <span class="token operator">=</span> c<span class="token punctuation">.</span>first
    c<span class="token punctuation">.</span>first <span class="token operator">=</span> pd
<span class="token punctuation">}</span></code></pre>
<p>golang中遇到io事件时，统一对其做了封装，首先建立系统事件（本文主要针对epoll），然后让出cpu（gopark），然后进行协程调度执行其他g。当g io事件完成时，会从epoll进行交互看是否就绪（epoll就绪列表），就绪则pop取出一个g往下执行，未就绪则调度其他g。（其实pop取就绪列表也有一定逻辑，时候延时处理之类的）</p>
<p>runtime/proc.go，</p>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Finds a runnable goroutine to execute.</span>
<span class="token comment" spellcheck="true">// Tries to steal from other P's, get g from local or global queue, poll network.</span>
<span class="token keyword">func</span> <span class="token function">findrunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>gp <span class="token operator">*</span>g<span class="token punctuation">,</span> inheritTime <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _g_ <span class="token operator">:=</span> <span class="token function">getg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">// The conditions here and in handoffp must agree: if</span>
    <span class="token comment" spellcheck="true">// findrunnable would return a G to run, handoffp must start</span>
    <span class="token comment" spellcheck="true">// an M.</span>

top<span class="token punctuation">:</span>
    _p_ <span class="token operator">:=</span> _g_<span class="token punctuation">.</span>m<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//......</span>
    <span class="token comment" spellcheck="true">// Poll network.</span>
    <span class="token comment" spellcheck="true">// This netpoll is only an optimization before we resort to stealing.</span>
    <span class="token comment" spellcheck="true">// We can safely skip it if there are no waiters or a thread is blocked</span>
    <span class="token comment" spellcheck="true">// in netpoll already. If there is any kind of logical race with that</span>
    <span class="token comment" spellcheck="true">// blocked thread (e.g. it has already returned from netpoll, but does</span>
    <span class="token comment" spellcheck="true">// not set lastpoll yet), this thread will do blocking netpoll below</span>
    <span class="token comment" spellcheck="true">// anyway.</span>
    <span class="token keyword">if</span> <span class="token function">netpollinited</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>netpollWaiters<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> atomic<span class="token punctuation">.</span><span class="token function">Load64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lastpoll<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> list <span class="token operator">:=</span> <span class="token function">netpoll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// non-blocking</span>
            gp <span class="token operator">:=</span> list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">injectglist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span>
            <span class="token function">casgstatus</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> _Gwaiting<span class="token punctuation">,</span> _Grunnable<span class="token punctuation">)</span>
            <span class="token keyword">if</span> trace<span class="token punctuation">.</span>enabled <span class="token punctuation">{</span>
                <span class="token function">traceGoUnpark</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> gp<span class="token punctuation">,</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//......</span>
<span class="token punctuation">}</span></code></pre>
<p>另外在sysmon中，也对netpoll进行了调度。</p>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Always runs without a P, so write barriers are not allowed.</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//go:nowritebarrierrec</span>
<span class="token keyword">func</span> <span class="token function">sysmon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
    sched<span class="token punctuation">.</span>nmsys<span class="token operator">++</span>
    <span class="token function">checkdead</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//......</span>
    <span class="token comment" spellcheck="true">// poll network if not polled for more than 10ms</span>
    lastpoll <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">Load64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lastpoll<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">netpollinited</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lastpoll <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lastpoll<span class="token operator">+</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span> <span class="token operator">&lt;</span> now <span class="token punctuation">{</span>
        atomic<span class="token punctuation">.</span><span class="token function">Cas64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sched<span class="token punctuation">.</span>lastpoll<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>lastpoll<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>
        list <span class="token operator">:=</span> <span class="token function">netpoll</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// non-blocking - returns list of goroutines</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Need to decrement number of idle locked M's</span>
            <span class="token comment" spellcheck="true">// (pretending that one more is running) before injectglist.</span>
            <span class="token comment" spellcheck="true">// Otherwise it can lead to the following situation:</span>
            <span class="token comment" spellcheck="true">// injectglist grabs all P's but before it starts M's to run the P's,</span>
            <span class="token comment" spellcheck="true">// another M returns from syscall, finishes running its G,</span>
            <span class="token comment" spellcheck="true">// observes that there is no work to do and no other running M's</span>
            <span class="token comment" spellcheck="true">// and reports deadlock.</span>
            <span class="token function">incidlelocked</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token function">injectglist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span>
            <span class="token function">incidlelocked</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//......</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="7-备注"><a href="#7-备注" class="headerlink" title="7:备注"></a>7:备注</h3><blockquote>
<p>epoll</p>
<ul>
<li>epoll是由系统内核单独维护的一个线程,不由go本身维护</li>
</ul>
</blockquote>
<blockquote>
<p>常量</p>
<ul>
<li>FD_CLOEXEC用来设置文件的close-on-exec状态标准。 这，emm 就挺难理解得。</li>
</ul>
</blockquote>
<blockquote>
<p>gc</p>
<ul>
<li>pollDesc是由pollCache进行维护的，并且不受GC监控(persistentalloc方法分配)，所以，在正常情况关于io的操作，我们一定要进行手动关闭，对epoll中的引用对象进行清理(具体实现在poll_runtime_Semrelease)。</li>
</ul>
</blockquote>
<pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Must be in non-GC memory because can be referenced</span>
<span class="token comment" spellcheck="true">// only from epoll/kqueue internals.</span>
mem <span class="token operator">:=</span> <span class="token function">persistentalloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span>pdSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memstats<span class="token punctuation">.</span>other_sys<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    pd <span class="token operator">:=</span> <span class="token punctuation">(</span><span class="token operator">*</span>pollDesc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> i<span class="token operator">*</span>pdSize<span class="token punctuation">)</span><span class="token punctuation">)</span>
    pd<span class="token punctuation">.</span>link <span class="token operator">=</span> c<span class="token punctuation">.</span>first
    c<span class="token punctuation">.</span>first <span class="token operator">=</span> pd
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>sysmon</p>
<ul>
<li>Go 的标准库提供了一种监测应用程序的线程,并帮你 (找寻) 程序可能遇到的瓶颈. 该线程称为sysmon，即系统监视器 (system monitor).在GMP 模型中,这个 (特殊) 线程未链接任何的 P, 这意味着调度器 (scheduler) 没有将其考虑在内, 因此始终处于运行状态.</li>
</ul>
</blockquote>
<p><img src="/images/golang-netpoll-realization-analysis/golang-netpoll-realization-analysis-sysmon-running-status.png" alt="netpoll-sysmon-running-status.png"><br>sysmon线程的作用很广, 主要涉及以下方面:</p>
<ul>
<li>由应用程序创建的计时器 (timers). sysmon线程查看应该在运行却仍在等待执行时间的计时器. 在这种情况下, Go 将查看空闲的 M 和 P 列表, 以便尽可能快地运行它们.</li>
<li>网络轮询器和系统调用. 它将运行在网络操作中被阻塞的 goroutine.</li>
<li>垃圾回收器（如果已经很长时间没有运行）. 如果垃圾回收器已经两分钟没有运行,则 sysmon 将强制执行一轮垃圾回收 (GC).</li>
<li>长时间运行的 goroutine 的抢占. 任何运行时间超过10 毫秒的 goroutine 都会被抢占, 将运行时间 (running time) 留给其他 goroutine.</li>
</ul>
]]></content>
      <categories>
        <category>Golang netpoll</category>
      </categories>
      <tags>
        <tag>Golang netpoll</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Golang UDP编程</title>
    <url>/2021/10/07/golang-udp-protocol-study/</url>
    <content><![CDATA[<p>本周在排查golang守护进程服务通过udp server服务接收教师端服务日志时,需要学生端本机发送udp数据信息样例测试我们守护进程消费日志信息相关的问题。故对我们Go UDP这块相关的知识内容进行了深入了解和学习。通过以下文章,带我们深入的去了解Go服务中UDP的编程基础以及原理。</p>
<p>用户数据报协议（User Datagram Protocol，缩写为UDP），又称用户数据报文协议，是一个简单的面向数据报(package-oriented)的传输层协议，正式规范为RFC 768。UDP只提供数据的不可靠传递，它一旦把应用程序发给网络层的数据发送出去，就不保留数据备份（所以UDP有时候也被认为是不可靠的数据报协议）。UDP在IP数据报的头部仅仅加入了复用和数据校验。</p>
<p>由于缺乏可靠性且属于非连接导向协议，UDP应用一般必须允许一定量的丢包、出错和复制粘贴。但有些应用，比如TFTP，如果需要则必须在应用层增加根本的可靠机制。但是绝大多数UDP应用都不需要可靠机制，甚至可能因为引入可靠机制而降低性能。流媒体（流技术）、即时多媒体游戏和IP电话（VoIP）一定就是典型的UDP应用。如果某个应用需要很高的可靠性，那么可以用传输控制协议（TCP协议）来代替UDP。</p>
<p>由于缺乏拥塞控制（congestion control），需要基于网络的机制来减少因失控和高速UDP流量负荷而导致的拥塞崩溃效应。换句话说，因为UDP发送者不能够检测拥塞，所以像使用包队列和丢弃技术的路由器这样的网络基本设备往往就成为降低UDP过大通信量的有效工具。数据报拥塞控制协议（DCCP）设计成通过在诸如流媒体类型的高速率UDP流中，增加主机拥塞控制，来减小这个潜在的问题。<br>典型网络上的众多使用UDP协议的关键应用一定程度上是相似的。这些应用包括域名系统（DNS）、简单网络管理协议（SNMP）、动态主机配置协议（DHCP）、路由信息协议（RIP）和某些影音流服务等等。<br><strong>UDP报头</strong></p>
<table class="wikitable" style="margin: 0 auto; text-align: center;"><tbody><tr><th style="border-bottom:none; border-right:none;"><span style="font-family:sans-serif;font-size:100%;color:grey;background-color:transparent;;">偏移</span></th><th style="border-left:none;"><a title="八字节">字节</a></th><th colspan="8">0</th><th colspan="8">1</th><th colspan="8">2</th><th colspan="8">3</th></tr><tr><th style="border-top: none">字节</th><th><tt><a class="mw-disambig" title="比特">位</a></tt></th><th><tt>&nbsp;0</tt></th><th><tt>&nbsp;1</tt></th><th><tt>&nbsp;2</tt></th><th><tt>&nbsp;3</tt></th><th><tt>&nbsp;4</tt></th><th><tt>&nbsp;5</tt></th><th><tt>&nbsp;6</tt></th><th><tt>&nbsp;7</tt></th><th><tt>&nbsp;8</tt></th><th><tt>&nbsp;9</tt></th><th><tt>10</tt></th><th><tt>11</tt></th><th><tt>12</tt></th><th><tt>13</tt></th><th><tt>14</tt></th><th><tt>15</tt></th><th><tt>16</tt></th><th><tt>17</tt></th><th><tt>18</tt></th><th><tt>19</tt></th><th><tt>20</tt></th><th><tt>21</tt></th><th><tt>22</tt></th><th><tt>23</tt></th><th><tt>24</tt></th><th><tt>25</tt></th><th><tt>26</tt></th><th><tt>27</tt></th><th><tt>28</tt></th><th><tt>29</tt></th><th><tt>30</tt></th><th><tt>31</tt></th></tr><tr><th>0</th><th><tt>0</tt></th><td colspan="16" style="background:#fdd;">来源连接端口</td><td colspan="16">目的连接端口</td></tr><tr><th>4</th><th><tt>32</tt></th><td colspan="16">报长</td><td colspan="16" style="background:#ffdddd;">检查码</td></tr></tbody></table>
**IPv4伪头部**
<table class="wikitable" style="margin: 0 auto; text-align: center;"><tbody><tr style="text-align:center;"><th><span style="font-family:sans-serif;font-size:100%;color:grey;background-color:transparent;;">位</span></th><th colspan="8" style="width:75px;">0 – 7</th><th colspan="8" style="width:75px;">8 – 15</th><th colspan="8" style="width:75px;">16 – 23</th><th colspan="8" style="width:75px;">24 – 31</th></tr><tr style="text-align:center;"><th>0</th><td colspan="32" style="background:#fdd;">来源地址</td></tr><tr style="text-align:center;"><th>32</th><td colspan="32" style="background:#fdd;">目的地址</td></tr><tr style="text-align:center;"><th>64</th><td colspan="8" style="background:#fdd;">全零</td><td colspan="8" style="background:#fdd;">协议名</td><td colspan="16" style="background:#fdd;">UDP报文长度</td></tr><tr style="text-align:center;"><th>96</th><td colspan="16">来源连接端口</td><td colspan="16">目的连接端口</td></tr><tr style="text-align:center;"><th>128</th><td colspan="16">报文长度</td><td colspan="16">检验和</td></tr><tr style="text-align:center;"><th>160+</th><td colspan="32">&nbsp;<br>数据<br>&nbsp;</td></tr></tbody></table>

<p><strong>IPv6伪头部</strong></p>
<table class="wikitable" style="margin: 0 auto; text-align: center;"><tbody><tr style="text-align:center;"><th><span style="font-family:sans-serif;font-size:100%;color:grey;background-color:transparent;;">位</span></th><th colspan="8" style="width:75px;">0 – 7</th><th colspan="8" style="width:75px;">8 – 15</th><th colspan="8" style="width:75px;">16 – 23</th><th colspan="8" style="width:75px;">24 – 31</th></tr><tr style="text-align:center;"><th>0</th><td colspan="32" rowspan="4" style="background:#fdd;">来源地址</td></tr><tr style="text-align:center;"><th>32</th></tr><tr style="text-align:center;"><th>64</th></tr><tr style="text-align:center;"><th>96</th></tr><tr style="text-align:center;"><th>128</th><td colspan="32" rowspan="4" style="background:#fdd;">目的地址</td></tr><tr style="text-align:center;"><th>160</th></tr><tr style="text-align:center;"><th>192</th></tr><tr style="text-align:center;"><th>224</th></tr><tr style="text-align:center;"><th>256</th><td colspan="32" style="background:#fdd;">UDP报文长</td></tr><tr style="text-align:center;"><th>288</th><td colspan="24" style="background:#fdd;">全零</td><td colspan="8" style="background:#fdd;">下一个指针位置</td></tr><tr style="text-align:center;"><th>320</th><td colspan="16">来源连接端口</td><td colspan="16">目的连接端口</td></tr><tr style="text-align:center;"><th>352</th><td colspan="16">报文长</td><td colspan="16">校验和</td></tr><tr style="text-align:center;"><th>384+</th><td colspan="32">&nbsp;<br>数据<br>&nbsp;</td></tr></tbody></table>

<p>以上大段的背景介绍引自维基百科。<br>而TCP是面向连接(connection-oriented)的协议，可以提供可靠的数据传输。<br>本文讲介绍Go语言的UDP库及其使用方法，以及了解使用过程中的细节和陷阱。</p>
<h2 id="1-一个简单的例子"><a href="#1-一个简单的例子" class="headerlink" title="1:一个简单的例子"></a>1:一个简单的例子</h2><p>首先看一个简单的UDP的例子，这个例子演示了Go UDP通过Dial方式发送数据报的例子。</p>
<pre class=" language-go"><code class="language-go">### server端服务样例
<span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"net"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Local: &lt;%s> \n"</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">LocalAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        n<span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">ReadFromUDP</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error during read: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s> %s\n"</span><span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">WriteToUDP</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> remoteAddr<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-go"><code class="language-go">
<span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"net"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    sip <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span>
    srcAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    dstAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ip<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srcAddr<span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s>\n"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>可以看到, Go UDP的处理类似TCP的处理，虽然不像TCP面向连接的方式ListenTCP和Accept的方式建立连接,但是它通过ListenUDP和ReadFromUDP可以接收各个客户端发送的数据报，并通过WriteToUDP写数据给特定的客户端。</p>
<p>我们稍微修改一下client1.go,让它保持UDP Socket文件一直打开：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ip <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span>
    srcAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    dstAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ip<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srcAddr<span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>Stdin<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s>\n"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>使用 netstat可以看到这个网络文件描述符(因为我在同一台机器上运行服务器，所以你会看到两条记录，一个是服务器打开的，一个是客户端打开的)。</p>
<pre class=" language-go"><code class="language-go">udp4       <span class="token number">0</span>      <span class="token number">0</span>  localhost<span class="token number">.54676</span>        localhost<span class="token number">.9981</span>
udp4       <span class="token number">0</span>      <span class="token number">0</span>  localhost<span class="token number">.9981</span>         <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span>
</code></pre>
<p>或者使用lsof命令查看：</p>
<pre class=" language-go"><code class="language-go">server1   <span class="token number">59312</span> smallnest    3u  IPv4 <span class="token number">0xad793a9a54467f61</span>      0t0  UDP localhost<span class="token punctuation">:</span><span class="token number">9981</span>
client1   <span class="token number">59323</span> smallnest    3u  IPv4 <span class="token number">0xad793a9a544681c1</span>      0t0  UDP localhost<span class="token punctuation">:</span><span class="token number">54676</span><span class="token operator">-</span><span class="token operator">></span>localhost<span class="token punctuation">:</span><span class="token number">9981</span></code></pre>
<h2 id="2-更复杂的例子"><a href="#2-更复杂的例子" class="headerlink" title="2:更复杂的例子"></a>2:更复杂的例子</h2><p>我们还可以将上面的例子演化一下，实现双向的读写。</p>
<p>服务器端代码不用修改，因为它已经实现了读写，读是通过listener.ReadFromUDP,写通过listener.WriteToUDP。</p>
<p>客户端修改为读写：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"net"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ip <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span>
    srcAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    dstAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ip<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srcAddr<span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"read %s from &lt;%s>\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>这里client的写是Write,读是Read。</p>
<h2 id="3-等价的客户端和服务器"><a href="#3-等价的客户端和服务器" class="headerlink" title="3:等价的客户端和服务器"></a>3:等价的客户端和服务器</h2><p>下面这个是两个服务器通信的例子，互为客户端和服务器，在发送数据报的时候，我们可以将发送的一方称之为源地址，发送的目的地一方称之为目标地址。</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"net"</span>
    <span class="token string">"os"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">read</span><span class="token punctuation">(</span>conn <span class="token operator">*</span>net<span class="token punctuation">.</span>UDPConn<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
        n<span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">ReadFromUDP</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error during read: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"receive %s from &lt;%s>\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> remoteAddr<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    addr1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    addr2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9982</span><span class="token punctuation">}</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listener1<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> addr1<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">go</span> <span class="token function">read</span><span class="token punctuation">(</span>listener1<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
        listener1<span class="token punctuation">.</span><span class="token function">WriteToUDP</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"ping to #2: "</span><span class="token operator">+</span>addr2<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        listener1<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> addr2<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">go</span> <span class="token function">read</span><span class="token punctuation">(</span>listener1<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
        listener1<span class="token punctuation">.</span><span class="token function">WriteToUDP</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"ping to #1: "</span><span class="token operator">+</span>addr1<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>Stdin<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="4-Read和Write方法集的比较"><a href="#4-Read和Write方法集的比较" class="headerlink" title="4:Read和Write方法集的比较"></a>4:Read和Write方法集的比较</h2><p>前面的例子中客户端有时使用DialUDP建立数据报的源对象和目标对象(地址和端口), 它会创建UDP Socket文件描述符,然后调用内部的connect为这个文件描述符设置源地址和目标地址，这时Go将它称之为connected,尽管我们知道UDP是无连接的协议，Go这种叫法我想根源来自Unix/Linux的UDP的实现。这个方法返回*UDPConn。</p>
<p>有的时候却可以通过ListenUDP返回的<em>UDPConn直接往某个目标地址发送数据报，而不是通过DialUDP方式发送，原因在于两者返回的</em>UDPConn是不同的。前者是connected，后者是unconnected。</p>
<p>你必须清楚知道你的UDP是连接的(connected)还是未连接(unconnected)的，这样你才能正确的选择的读写方法。</p>
<p>如果<em>UDPConn是connected,读写方法是Read和Write。<br>如果</em>UDPConn是unconnected,读写方法是ReadFromUDP和WriteToUDP（以及ReadFrom和WriteTo)。</p>
<p>事实上Go的这种设计和Unix/Linux设计一致，下面是Linux关于UDP的文档：</p>
<pre class=" language-go"><code class="language-go">When a UDP socket is created<span class="token punctuation">,</span> its local and remote addresses are unspecified<span class="token punctuation">.</span> Datagrams can be sent immediately using sendto or sendmsg with a valid destination address as an argument<span class="token punctuation">.</span> When connect is called on the socket<span class="token punctuation">,</span> the <span class="token keyword">default</span> destination address is set and datagrams can now be sent using send or write without specifying a destination address<span class="token punctuation">.</span> It is still possible to send to other destinations by passing an address to sendto or sendmsg<span class="token punctuation">.</span> In order to receive packets<span class="token punctuation">,</span> the socket can be bound to a local address first by using bind<span class="token punctuation">.</span> Otherwise<span class="token punctuation">,</span> the socket layer will automatically assign a free local port out of the <span class="token keyword">range</span> defined by <span class="token operator">/</span>proc<span class="token operator">/</span>sys<span class="token operator">/</span>net<span class="token operator">/</span>ipv4<span class="token operator">/</span>ip_local_port_range and bind the socket to INADDR_ANY<span class="token punctuation">.</span></code></pre>
<p>ReadFrom和WriteTo是为了实现PacketConn接口而实现的方法，它们的实现基本上和ReadFromUDP和WriteToUDP一样，只不过地址换成了更通用的Addr,而不是具体化的UDPAddr。<br>还有几种情况需要弄清楚:</p>
<h3 id="4-1-因为unconnected的UDPConn还没有目标地址，所以需要把目标地址当作参数传入到WriteToUDP的方法中，但是unconnected的UDPConn可以调用Read方法吗？"><a href="#4-1-因为unconnected的UDPConn还没有目标地址，所以需要把目标地址当作参数传入到WriteToUDP的方法中，但是unconnected的UDPConn可以调用Read方法吗？" class="headerlink" title="4.1 因为unconnected的UDPConn还没有目标地址，所以需要把目标地址当作参数传入到WriteToUDP的方法中，但是unconnected的UDPConn可以调用Read方法吗？"></a>4.1 因为unconnected的<em>UDPConn还没有目标地址，所以需要把目标地址当作参数传入到WriteToUDP的方法中，但是unconnected的</em>UDPConn可以调用Read方法吗？</h3><p>答案是可以,但是在这种情况下，客户端的地址信息就被忽略了。</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Local: &lt;%s> \n"</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">LocalAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        n<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error during read: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s>\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4-2-unconnected的-UDPConn可以调用Write方法吗？"><a href="#4-2-unconnected的-UDPConn可以调用Write方法吗？" class="headerlink" title="4.2 unconnected的*UDPConn可以调用Write方法吗？"></a>4.2 unconnected的*UDPConn可以调用Write方法吗？</h3><p>答案是不可以， 因为不知道目标地址。</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Local: &lt;%s> \n"</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">LocalAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>出错：</p>
<pre class=" language-go"><code class="language-go">write udp <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">9981</span><span class="token punctuation">:</span> write<span class="token punctuation">:</span> destination address requiredsmallnestMBP<span class="token punctuation">:</span>udp smallnest</code></pre>
<h3 id="4-3-connected的-UDPConn可以调用WriteToUDP方法吗？"><a href="#4-3-connected的-UDPConn可以调用WriteToUDP方法吗？" class="headerlink" title="4.3 connected的*UDPConn可以调用WriteToUDP方法吗？"></a>4.3 connected的*UDPConn可以调用WriteToUDP方法吗？</h3><p>答案是不可以， 因为目标地址已经设置。<br>即使是相同的目标地址也不可以。</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ip <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span>
    srcAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    dstAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ip<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srcAddr<span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">WriteToUDP</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>报错</p>
<pre class=" language-go"><code class="language-go">write udp <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">50141</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">9981</span><span class="token punctuation">:</span> use of WriteTo with pre<span class="token operator">-</span>connected connection</code></pre>
<h3 id="4-3-connected的-UDPConn如果调用Closed以后可以调用WriteToUDP方法吗？"><a href="#4-3-connected的-UDPConn如果调用Closed以后可以调用WriteToUDP方法吗？" class="headerlink" title="4.3 connected的*UDPConn如果调用Closed以后可以调用WriteToUDP方法吗？"></a>4.3 connected的*UDPConn如果调用Closed以后可以调用WriteToUDP方法吗？</h3><p>答案是不可以。</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ip <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span>
    srcAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    dstAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ip<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srcAddr<span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">WriteToUDP</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>同样的报错：</p>
<pre class=" language-go"><code class="language-go">write udp <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">59074</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">9981</span><span class="token punctuation">:</span> use of WriteTo with pre<span class="token operator">-</span>connected connection</code></pre>
<h3 id="4-4-connected的-UDPConn可以调用ReadFromUDP方法吗？"><a href="#4-4-connected的-UDPConn可以调用ReadFromUDP方法吗？" class="headerlink" title="4.4 connected的*UDPConn可以调用ReadFromUDP方法吗？"></a>4.4 connected的*UDPConn可以调用ReadFromUDP方法吗？</h3><p>答案是可以,但是它的功能基本和Read一样，只能和它connected的对端通信。<br>看下面的client的例子：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ip <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span>
    srcAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    dstAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ip<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srcAddr<span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">{</span>
            n<span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">ReadFromUDP</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error during read: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s> %s\n"</span><span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>Stdin<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>*UDPConn还有一个通用的WriteMsgUDP(b, oob []byte, addr *UDPAddr)，同时支持connected和unconnected的UDPConn:</p>
<p>1、如果UDPConn还未连接，那么它会发送数据报给addr<br>2、如果UDPConn已连接，那么它会发送数据报给连接的对端，这种情况下addr应该为nil</p>
<h2 id="5、通用多播编程"><a href="#5、通用多播编程" class="headerlink" title="5、通用多播编程"></a>5、通用多播编程</h2><p>Go标准库也支持多播，但是我们首先我们看通用的多播是如何实现的，它使用golang.org/x/net/ipv4或者golang.org/x/net/ipv6进行控制。</p>
<p>首先找到要进行多播所使用的网卡,然后监听本机合适的地址和服务端口。<br>将这个应用加入到多播组中，它就可以从组中监听包信息，当然你还可以对包传输进行更多的控制设置。<br>应用收到包后还可以检查包是否来自这个组的包。</p>
<p>完整的代码如下：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"net"</span>
    <span class="token string">"golang.org/x/net/ipv4"</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//1. 得到一个interface</span>
    en4<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">InterfaceByName</span><span class="token punctuation">(</span><span class="token string">"en4"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    group <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">IPv4</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//2. bind一个本地地址</span>
    c<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenPacket</span><span class="token punctuation">(</span><span class="token string">"udp4"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0:1024"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> c<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//3.</span>
    p <span class="token operator">:=</span> ipv4<span class="token punctuation">.</span><span class="token function">NewPacketConn</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">JoinGroup</span><span class="token punctuation">(</span>en4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> group<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//4.更多的控制</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">SetControlMessage</span><span class="token punctuation">(</span>ipv4<span class="token punctuation">.</span>FlagDst<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">//5.接收消息</span>
    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        n<span class="token punctuation">,</span> cm<span class="token punctuation">,</span> src<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">ReadFrom</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> cm<span class="token punctuation">.</span>Dst<span class="token punctuation">.</span><span class="token function">IsMulticast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> cm<span class="token punctuation">.</span>Dst<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"received: %s from &lt;%s>\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>
                n<span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">WriteTo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cm<span class="token punctuation">,</span> src<span class="token punctuation">)</span>
                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Unknown group"</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>同一个应用可以加入到多个组中，多个应用也可以加入到同一个组中。<br>多个UDP listener可以监听同样的端口，加入到同一个group中。</p>
<pre class=" language-go"><code class="language-go">It is possible <span class="token keyword">for</span> multiple UDP listeners that listen on the same UDP port to join the same multicast group<span class="token punctuation">.</span> The net <span class="token keyword">package</span> will provide a socket that listens to a wildcard address with reusable UDP port when an appropriate multicast address prefix is passed to the net<span class="token punctuation">.</span>ListenPacket or net<span class="token punctuation">.</span>ListenUDP<span class="token punctuation">.</span></code></pre>
<pre class=" language-go"><code class="language-go">c1<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenPacket</span><span class="token punctuation">(</span><span class="token string">"udp4"</span><span class="token punctuation">,</span> <span class="token string">"224.0.0.0:1024"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// error handling</span>
<span class="token punctuation">}</span>
<span class="token keyword">defer</span> c1<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
c2<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenPacket</span><span class="token punctuation">(</span><span class="token string">"udp4"</span><span class="token punctuation">,</span> <span class="token string">"224.0.0.0:1024"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// error handling</span>
<span class="token punctuation">}</span>
<span class="token keyword">defer</span> c2<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p1 <span class="token operator">:=</span> ipv4<span class="token punctuation">.</span><span class="token function">NewPacketConn</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> p1<span class="token punctuation">.</span><span class="token function">JoinGroup</span><span class="token punctuation">(</span>en0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span><span class="token function">IPv4</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// error handling</span>
<span class="token punctuation">}</span>
p2 <span class="token operator">:=</span> ipv4<span class="token punctuation">.</span><span class="token function">NewPacketConn</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span>
<span class="token keyword">if</span> err <span class="token operator">:=</span> p2<span class="token punctuation">.</span><span class="token function">JoinGroup</span><span class="token punctuation">(</span>en0<span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span><span class="token function">IPv4</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// error handling</span>
<span class="token punctuation">}</span></code></pre>
<p>还支持Source-specific multicasting特性。</p>
<h2 id="6、标准库多播编程"><a href="#6、标准库多播编程" class="headerlink" title="6、标准库多播编程"></a>6、标准库多播编程</h2><p>标准库的多播编程简化了上面的操作，当然也减少了更多的控制。如果想实现一个简单的多播程序，可以使用这样的方法。</p>
<p>服务器端的代码：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//如果第二参数为nil,它会使用系统指定多播接口，但是不推荐这样使用</span>
    addr<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ResolveUDPAddr</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token string">"224.0.0.250:9981"</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenMulticastUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Local: &lt;%s> \n"</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">LocalAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        n<span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">ReadFromUDP</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error during read: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s> %s\n"</span><span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>写个客户端测试一下：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ip <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"224.0.0.250"</span><span class="token punctuation">)</span>
    srcAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    dstAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ip<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srcAddr<span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s>\n"</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>
<h2 id="7、广播"><a href="#7、广播" class="headerlink" title="7、广播"></a>7、广播</h2><p>关于单播、多播、广播和任播可以参考我以前写的一篇文章: 单播，组播(多播)，广播以及任播。</p>
<p>广播的编程方式和多播的编程方式有所不同。简单说，广播意味着你吼一嗓子，局域网内的所有的机器都会收到。</p>
<p>服务器端代码：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Local: &lt;%s> \n"</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">LocalAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token punctuation">{</span>
        n<span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">ReadFromUDP</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"error during read: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"&lt;%s> %s\n"</span><span class="token punctuation">,</span> remoteAddr<span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> listener<span class="token punctuation">.</span><span class="token function">WriteToUDP</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> remoteAddr<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>客户端代码有所不同，它不是通过DialUDP “连接” 广播地址，而是通过ListenUDP创建一个unconnected的 *UDPConn,然后通过WriteToUDP发送数据报，这和你脑海中的客户端不太一致：</p>
<pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ip <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ParseIP</span><span class="token punctuation">(</span><span class="token string">"172.24.14.255"</span><span class="token punctuation">)</span>
    srcAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> net<span class="token punctuation">.</span>IPv4zero<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
    dstAddr <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>UDPAddr<span class="token punctuation">{</span>IP<span class="token punctuation">:</span> ip<span class="token punctuation">,</span> Port<span class="token punctuation">:</span> <span class="token number">9981</span><span class="token punctuation">}</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenUDP</span><span class="token punctuation">(</span><span class="token string">"udp"</span><span class="token punctuation">,</span> srcAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">WriteToUDP</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dstAddr<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    data <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>
    n<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">ReadFrom</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"read %s from &lt;%s>\n"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>Stdin<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre>
<p>你局域网内的广播地址可能和例子中的不同，你可以通过ifconfig查看。</p>
<p>广播地址(Broadcast Address)是专门用于同时向网络中所有工作站进行发送的一个地址。在使用TCP/IP 协议的网络中，主机标识段host ID 为全1 的IP 地址为广播地址，广播的分组传送给host ID段所涉及的所有计算机。例如，对于10.1.1.0 （255.255.255.0 ）网段，其广播地址为10.1.1.255 （255 即为2 进制的11111111 ），当发出一个目的地址为10.1.1.255 的分组（封包）时，它将被分发给该网段上的所有计算机。</p>
<h2 id="8、任播"><a href="#8、任播" class="headerlink" title="8、任播"></a>8、任播</h2><p>在互联网中，通常使用边界网关协议来实现任播。比如域名根服务器就是通过任播的方式提供。13台根服务器使用13个任播地址，但是有500多台实际服务器。<br>你可以通过单播的方式发送数据包，只有最快的(最近的)的一个UDP服务器接收到。</p>
<p>Anycasting最初是在RFC1546中提出并定义的，它的最初语义是，在IP网络上通过一个Anycast地址标识一组提供特定服务的主机，同时服务访问方并不关心提供服务的具体是哪一台主机(比如DNS或者镜像服务)，访问该地址的报文可以被IP网络路由到这一组目标中的任何一台主机上，它提供的是一种无状态的、尽力而为的服务。</p>
<p>RFC2373(IP Version 6 Addressing Architecture, July 1998)提供了较新的说明和动机：任播地址的一个期望应用是标识属于某个提供互联网服务的机构的路由器集合。这种地址可以用作IPv6路由标题的中间地址,使数据分组通过某一聚合或聚合序列传递。其他可能的用途是标识属于某一子网的路由器组或提供进入某一路由范围入口的路由器组。<br>RFC2373标准对任播的定义是，当一个单播地址被分配到多于一个的接口上时，发到该接口的报文被网络路由到由路由协议度量的“最近”的目标接口上。与Unicast和Multicast类似，Anycast也是IP网络的一种通信模式。Unicast允许源结点向单一目标结点发送数据报，Multicast允许源结点向一组目标结点发送数据报，而Anycast则允许源结点向一组目标结点中的一个结点发送数据报，而这个结点由路由系统选择，对源结点透明；同时，路由系统选择“最近”的结点为源结点提供服务，从而在一定程序上为源结点提供了更好的服务也减轻了网络负载。</p>
<h2 id="9、参考文档"><a href="#9、参考文档" class="headerlink" title="9、参考文档"></a>9、参考文档</h2><blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AE">https://zh.wikipedia.org/wiki/用户数据报协议</a><br><a href="https://golang.org/pkg/net/">https://golang.org/pkg/net/</a><br><a href="http://man7.org/linux/man-pages/man7/udp.7.html">http://man7.org/linux/man-pages/man7/udp.7.html</a><br><a href="https://godoc.org/golang.org/x/net/ipv4">https://godoc.org/golang.org/x/net/ipv4</a><br><a href="https://github.com/golang/go/issues/13391">https://github.com/golang/go/issues/13391</a><br><a href="http://baike.baidu.com/view/473043.htm">http://baike.baidu.com/view/473043.htm</a><br><a href="http://baike.baidu.com/view/2032315.htm">http://baike.baidu.com/view/2032315.htm</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Golang Udp</category>
      </categories>
      <tags>
        <tag>Golang Udp</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 新特性-日期api</title>
    <url>/2019/02/13/java8-localdatetime/</url>
    <content><![CDATA[<p>Java 8的一个新增的重要特性就是引入了新的时间和日期API，它们被包含在<code>java.time</code>包中。借助新的时间和日期API可以以更简洁的方法处理时间和日期。</p>
<p>在介绍本篇文章内容之前，我们先来讨论Java 8为什么要引入新的日期API，与之前的时间和日期处理方式有什么不同？</p>
<p>在Java 8之前，所有关于时间和日期的API都存在各种使用方面的缺陷，主要有：</p>
<ol>
<li>Java的<code>java.util.Date</code>和<code>java.util.Calendar</code>类易用性差，不支持时区，而且他们都不是线程安全的；</li>
<li>用于格式化日期的类<code>DateFormat</code>被放在<code>java.text</code>包中，它是一个抽象类，所以我们需要实例化一个<code>SimpleDateFormat</code>对象来处理日期格式化，并且<code>DateFormat</code>也是非线程安全，这意味着如果你在多线程程序中调用同一个<code>DateFormat</code>对象，会得到意想不到的结果。</li>
<li>对日期的计算方式繁琐，而且容易出错，因为月份是从0开始的，从<code>Calendar</code>中获取的月份需要加一才能表示当前月份。</li>
</ol>
<p>由于以上这些问题，出现了一些三方的日期处理框架，例如Joda-Time，date4j等开源项目。但是，Java需要一套标准的用于处理时间和日期的框架，于是Java 8中引入了新的日期API。新的日期API是<a href="https://jcp.org/en/jsr/detail?id=310">JSR-310</a>规范的实现，Joda-Time框架的作者正是JSR-310的规范的倡导者，所以能从Java 8的日期API中看到很多Joda-Time的特性。</p>
<h2 id="Java-8日期-时间类"><a href="#Java-8日期-时间类" class="headerlink" title="Java 8日期/时间类"></a>Java 8日期/时间类</h2><p>Java 8的日期和时间类包含<code>LocalDate</code>、<code>LocalTime</code>、<code>Instant</code>、<code>Duration</code>以及<code>Period</code>，这些类都包含在<code>java.time</code>包中，下面我们看看这些类的用法。</p>
<h3 id="LocalDate和LocalTime"><a href="#LocalDate和LocalTime" class="headerlink" title="LocalDate和LocalTime"></a><code>LocalDate</code>和<code>LocalTime</code></h3><p><code>LocalDate</code>类表示一个具体的日期，但不包含具体时间，也不包含时区信息。可以通过<code>LocalDate</code>的静态方法<code>of()</code>创建一个实例，<code>LocalDate</code>也包含一些方法用来获取年份，月份，天，星期几等：</p>
<pre class=" language-java"><code class="language-java">LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 初始化一个日期：2017-01-04</span>
<span class="token keyword">int</span> year <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 年份：2017</span>
Month month <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 月份：JANUARY</span>
<span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 月份中的第几天：4</span>
DayOfWeek dayOfWeek <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 一周的第几天：WEDNESDAY</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">lengthOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 月份的天数：31</span>
<span class="token keyword">boolean</span> leapYear <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 是否为闰年：false</span></code></pre>
<p>也可以调用静态方法<code>now()</code>来获取当前日期：</p>
<pre class=" language-java"><code class="language-java">LocalDate now <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>LocalTime</code>和<code>LocalDate</code>类似，他们之间的区别在于<code>LocalDate</code>不包含具体时间，而<code>LocalTime</code>包含具体时间，例如：</p>
<pre class=" language-java"><code class="language-java">LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 初始化一个时间：17:23:52</span>
<span class="token keyword">int</span> hour <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 时：17</span>
<span class="token keyword">int</span> minute <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 分：23</span>
<span class="token keyword">int</span> second <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 秒：52</span></code></pre>
<h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a><code>LocalDateTime</code></h3><p><code>LocalDateTime</code>类是<code>LocalDate</code>和<code>LocalTime</code>的结合体，可以通过<code>of()</code>方法直接创建，也可以调用<code>LocalDate</code>的<code>atTime()</code>方法或<code>LocalTime</code>的<code>atDate()</code>方法将<code>LocalDate</code>或<code>LocalTime</code>合并成一个<code>LocalDateTime</code>：</p>
<pre class=" language-java"><code class="language-java">LocalDateTime ldt1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JANUARY<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JANUARY<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime ldt2 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>LocalDateTime</code>也提供用于向<code>LocalDate</code>和<code>LocalTime</code>的转化：</p>
<pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> ldt1<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalTime time <span class="token operator">=</span> ldt1<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a><code>Instant</code></h3><p><code>Instant</code>用于表示一个时间戳，它与我们常使用的<code>System.currentTimeMillis()</code>有些类似，不过<code>Instant</code>可以精确到纳秒（Nano-Second），<code>System.currentTimeMillis()</code>方法只精确到毫秒（Milli-Second）。如果查看<code>Instant</code>源码，发现它的内部使用了两个常量，<code>seconds</code>表示从1970-01-01 00:00:00开始到现在的秒数，<code>nanos</code>表示纳秒部分（<code>nanos</code>的值不会超过<code>999,999,999</code>）。<code>Instant</code>除了使用<code>now()</code>方法创建外，还可以通过<code>ofEpochSecond</code>方法创建：</p>
<pre class=" language-java"><code class="language-java">Instant instant <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>ofEpochSecond()</code>方法的第一个参数为秒，第二个参数为纳秒，上面的代码表示从1970-01-01 00:00:00开始后两分钟的10万纳秒的时刻，控制台上的输出为：</p>
<pre><code>1970-01-01T00:02:00.000100Z</code></pre>
<h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a><code>Duration</code></h3><p><code>Duration</code>的内部实现与<code>Instant</code>类似，也是包含两部分：<code>seconds</code>表示秒，<code>nanos</code>表示纳秒。两者的区别是<code>Instant</code>用于表示一个时间戳（或者说是一个时间点），而<code>Duration</code>表示一个时间段，所以<code>Duration</code>类中不包含<code>now()</code>静态方法。可以通过<code>Duration.between()</code>方法创建<code>Duration</code>对象：</p>
<pre class=" language-java"><code class="language-java">LocalDateTime from <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JANUARY<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2017-01-05 10:07:00</span>
LocalDateTime to <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>FEBRUARY<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 2017-02-05 10:07:00</span>
Duration duration <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 表示从 2017-01-05 10:07:00 到 2017-02-05 10:07:00 这段时间</span>

<span class="token keyword">long</span> days <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 这段时间的总天数</span>
<span class="token keyword">long</span> hours <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这段时间的小时数</span>
<span class="token keyword">long</span> minutes <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这段时间的分钟数</span>
<span class="token keyword">long</span> seconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 这段时间的秒数</span>
<span class="token keyword">long</span> milliSeconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这段时间的毫秒数</span>
<span class="token keyword">long</span> nanoSeconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这段时间的纳秒数</span></code></pre>
<p><code>Duration</code>对象还可以通过<code>of()</code>方法创建，该方法接受一个时间段长度，和一个时间单位作为参数：</p>
<pre class=" language-java"><code class="language-java">Duration duration1 <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 5天</span>
Duration duration2 <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MILLIS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1000毫秒</span></code></pre>
<h3 id="Period"><a href="#Period" class="headerlink" title="Period"></a><code>Period</code></h3><p><code>Period</code>在概念上和<code>Duration</code>类似，区别在于<code>Period</code>是以年月日来衡量一个时间段，比如2年3个月6天：</p>
<pre class=" language-java"><code class="language-java">Period period <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>Period</code>对象也可以通过<code>between()</code>方法创建，值得注意的是，由于<code>Period</code>是以年月日衡量时间段，所以between()方法只能接收LocalDate类型的参数：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 2017-01-05 到 2017-02-05 这段时间</span>
Period period <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>
                LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="日期的操作和格式化"><a href="#日期的操作和格式化" class="headerlink" title="日期的操作和格式化"></a>日期的操作和格式化</h2><h3 id="增加和减少日期"><a href="#增加和减少日期" class="headerlink" title="增加和减少日期"></a>增加和减少日期</h3><p>Java 8中的日期/时间类都是不可变的，这是为了保证线程安全。当然，新的日期/时间类也提供了方法用于创建对象的可变版本，比如增加一天或者减少一天：</p>
<pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 2017-01-05</span>

LocalDate date1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 修改为 2016-01-05</span>
LocalDate date2 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withMonth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 修改为 2017-02-05</span>
LocalDate date3 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 修改为 2017-01-01</span>

LocalDate date4 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 增加一年 2018-01-05</span>
LocalDate date5 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 减少两个月 2016-11-05</span>
LocalDate date6 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 增加5天 2017-01-10</span></code></pre>
<p>上面例子中对于日期的操作比较简单，但是有些时候我们要面临更复杂的时间操作，比如将时间调到下一个工作日，或者是下个月的最后一天，这时候我们可以使用<code>with()</code>方法的另一个重载方法，它接收一个<code>TemporalAdjuster</code>参数，可以使我们更加灵活的调整日期：</p>
<pre class=" language-java"><code class="language-java">LocalDate date7 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token function">nextOrSame</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 返回下一个距离当前时间最近的星期日</span>
LocalDate date9 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token function">lastInMonth</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回本月最后一个星期六</span></code></pre>
<p>要使上面的代码正确编译，你需要使用静态导入<code>TemporalAdjusters</code>对象：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span>TemporalAdjusters<span class="token punctuation">.</span>*<span class="token punctuation">;</span></code></pre>
<p><code>TemporalAdjusters</code>类中包含了很多静态方法可以直接使用，下面的表格列出了一些方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>dayOfWeekInMonth</code></td>
<td>返回同一个月中每周的第几天</td>
</tr>
<tr>
<td><code>firstDayOfMonth</code></td>
<td>返回当月的第一天</td>
</tr>
<tr>
<td><code>firstDayOfNextMonth</code></td>
<td>返回下月的第一天</td>
</tr>
<tr>
<td><code>firstDayOfNextYear</code></td>
<td>返回下一年的第一天</td>
</tr>
<tr>
<td><code>firstDayOfYear</code></td>
<td>返回本年的第一天</td>
</tr>
<tr>
<td><code>firstInMonth</code></td>
<td>返回同一个月中第一个星期几</td>
</tr>
<tr>
<td><code>lastDayOfMonth</code></td>
<td>返回当月的最后一天</td>
</tr>
<tr>
<td><code>lastDayOfNextMonth</code></td>
<td>返回下月的最后一天</td>
</tr>
<tr>
<td><code>lastDayOfNextYear</code></td>
<td>返回下一年的最后一天</td>
</tr>
<tr>
<td><code>lastDayOfYear</code></td>
<td>返回本年的最后一天</td>
</tr>
<tr>
<td><code>lastInMonth</code></td>
<td>返回同一个月中最后一个星期几</td>
</tr>
<tr>
<td><code>next / previous</code></td>
<td>返回后一个/前一个给定的星期几</td>
</tr>
<tr>
<td><code>nextOrSame / previousOrSame</code></td>
<td>返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回</td>
</tr>
</tbody></table>
<p>如果上面表格中列出的方法不能满足你的需求，你还可以创建自定义的<code>TemporalAdjuster</code>接口的实现，<code>TemporalAdjuster</code>也是一个函数式接口，所以我们可以使用Lambda表达式：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TemporalAdjuster</span> <span class="token punctuation">{</span>
    Temporal <span class="token function">adjustInto</span><span class="token punctuation">(</span>Temporal temporal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>比如给定一个日期，计算该日期的下一个工作日（不包括星期六和星期天）：</p>
<pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>temporal <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 当前日期</span>
    DayOfWeek dayOfWeek <span class="token operator">=</span> DayOfWeek<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>temporal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 正常情况下，每次增加一天</span>
    <span class="token keyword">int</span> dayToAdd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 如果是星期五，增加三天</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayOfWeek <span class="token operator">==</span> DayOfWeek<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dayToAdd <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 如果是星期六，增加两天</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayOfWeek <span class="token operator">==</span> DayOfWeek<span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dayToAdd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> temporal<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>dayToAdd<span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h3><p>新的日期API中提供了一个<code>DateTimeFormatter</code>类用于处理日期格式化操作，它被包含在<code>java.time.format</code>包中，Java 8的日期类有一个<code>format()</code>方法用于将日期格式化为字符串，该方法接收一个<code>DateTimeFormatter</code>类型参数：</p>
<pre class=" language-java"><code class="language-java">LocalDateTime dateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String strDate1 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>BASIC_ISO_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 20170105</span>
String strDate2 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2017-01-05</span>
String strDate3 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 14:20:16.998</span>
String strDate4 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2017-01-05</span>
String strDate5 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"今天是：YYYY年 MMMM DD日 E"</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINESE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 今天是：2017年 一月 05日 星期四</span></code></pre>
<p>同样，日期类也支持将一个字符串解析成一个日期对象，例如：</p>
<pre class=" language-java"><code class="language-java">String strDate6 <span class="token operator">=</span> <span class="token string">"2017-01-05"</span><span class="token punctuation">;</span>
String strDate7 <span class="token operator">=</span> <span class="token string">"2017-01-05 12:30:05"</span><span class="token punctuation">;</span>

LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strDate6<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime dateTime1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strDate7<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>Java 8中的时区操作被很大程度上简化了，新的时区类<code>java.time.ZoneId</code>是原有的<code>java.util.TimeZone</code>类的替代品。<code>ZoneId</code>对象可以通过<code>ZoneId.of()</code>方法创建，也可以通过<code>ZoneId.systemDefault()</code>获取系统默认时区：</p>
<pre class=" language-java"><code class="language-java">ZoneId shanghaiZoneId <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ZoneId systemZoneId <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>of()</code>方法接收一个“区域/城市”的字符串作为参数，你可以通过<code>getAvailableZoneIds()</code>方法获取所有合法的“区域/城市”字符串：</p>
<pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>String<span class="token operator">></span> zoneIds <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>对于老的时区类<code>TimeZone</code>，Java 8也提供了转化方法：</p>
<pre class=" language-java"><code class="language-java">ZoneId oldToNewZoneId <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>有了<code>ZoneId</code>，我们就可以将一个<code>LocalDate</code>、<code>LocalTime</code>或<code>LocalDateTime</code>对象转化为<code>ZonedDateTime</code>对象：</p>
<pre class=" language-java"><code class="language-java">LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ZonedDateTime zonedDateTime <span class="token operator">=</span> ZonedDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> shanghaiZoneId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>将<code>zonedDateTime</code>打印到控制台为：</p>
<pre class=" language-java"><code class="language-java"><span class="token number">2017</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>05T15<span class="token operator">:</span><span class="token number">26</span><span class="token operator">:</span><span class="token number">56.147</span><span class="token operator">+</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">[</span>Asia<span class="token operator">/</span>Shanghai<span class="token punctuation">]</span></code></pre>
<p><code>ZonedDateTime</code>对象由两部分构成，<code>LocalDateTime</code>和<code>ZoneId</code>，其中<code>2017-01-05T15:26:56.147</code>部分为<code>LocalDateTime</code>，<code>+08:00[Asia/Shanghai]</code>部分为<code>ZoneId</code>。</p>
<p>另一种表示时区的方式是使用<code>ZoneOffset</code>，它是以当前时间和<strong>世界标准时间（UTC）/格林威治时间（GMT）</strong>的偏差来计算，例如：</p>
<pre class=" language-java"><code class="language-java">ZoneOffset zoneOffset <span class="token operator">=</span> ZoneOffset<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"+09:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
OffsetDateTime offsetDateTime <span class="token operator">=</span> OffsetDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> zoneOffset<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="其他历法"><a href="#其他历法" class="headerlink" title="其他历法"></a>其他历法</h2><p>Java中使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。</p>
<p>此外Java 8还提供了4套其他历法（很奇怪为什么没有汉族人使用的农历），每套历法都包含一个日期类，分别是：</p>
<ul>
<li><code>ThaiBuddhistDate</code>：泰国佛教历</li>
<li><code>MinguoDate</code>：中华民国历</li>
<li><code>JapaneseDate</code>：日本历</li>
<li><code>HijrahDate</code>：伊斯兰历</li>
</ul>
<p>每个日期类都继承<code>ChronoLocalDate</code>类，所以可以在不知道具体历法的情况下也可以操作。不过这些历法一般不常用，除非是有某些特殊需求情况下才会使用。</p>
<p>这些不同的历法也可以用于向公历转换：</p>
<pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JapaneseDate jpDate <span class="token operator">=</span> JapaneseDate<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>由于它们都继承<code>ChronoLocalDate</code>类，所以在不知道具体历法情况下，可以通过<code>ChronoLocalDate</code>类操作日期：</p>
<pre class=" language-java"><code class="language-java">Chronology jpChronology <span class="token operator">=</span> Chronology<span class="token punctuation">.</span><span class="token function">ofLocale</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>JAPANESE<span class="token punctuation">)</span><span class="token punctuation">;</span>
ChronoLocalDate jpChronoLocalDate <span class="token operator">=</span> jpChronology<span class="token punctuation">.</span><span class="token function">dateNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我们在开发过程中应该尽量避免使用<code>ChronoLocalDate</code>，尽量用与历法无关的方式操作时间，因为不同的历法计算日期的方式不一样，比如开发者会在程序中做一些假设，假设一年中有12个月，如果是中国农历中包含了闰月，一年有可能是13个月，但开发者认为是12个月，多出来的一个月属于明年的。再比如假设年份是累加的，过了一年就在原来的年份上加一，但日本天皇在换代之后需要重新纪年，所以过了一年年份可能会从1开始计算。</p>
<p>在实际开发过程中建议使用<code>LocalDate</code>，包括存储、操作、业务规则的解读；除非需要将程序的输入或者输出本地化，这时可以使用<code>ChronoLocalDate</code>类。</p>
<h2 id="Date与LocalDateTime相互转换"><a href="#Date与LocalDateTime相互转换" class="headerlink" title="Date与LocalDateTime相互转换"></a>Date与LocalDateTime相互转换</h2><ul>
<li>在Java 8中将Date转换为LocalDateTime</li>
</ul>
<blockquote>
<p>1.从日期获取ZonedDateTime并使用其方法toLocalDateTime（）获取LocalDateTime<br>2.使用LocalDateTime的Instant（）工厂方法</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
  * Date convert LocalDateTime
  */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Instant instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"localDateTime:{}"</span><span class="token punctuation">,</span> localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
  * Date convert LocalDate
  */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Instant instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    LocalDate localDate <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"localDate:{}"</span><span class="token punctuation">,</span> localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
  * Date convert LocalTime
  */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Instant instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
    LocalTime localTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"localTime:{}"</span><span class="token punctuation">,</span> localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 我们也可以使用LocalDateTime的FactoryInput（）方法使用系统的默认时区。</span>
LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>在Java 8中将LocalDateTime转换为Date</li>
</ul>
<blockquote>
<p>1.使用atZone（）方法将LocalDateTime转换为ZonedDateTime<br>2.将ZonedDateTime转换为Instant，并从中获取Date</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
  * LocalDateTime to Date
  */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Instant instant <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date:{}"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
  * LocalDate to Date
  */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Instant instant <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date:{}"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
  * LocalTime to Date
  */</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDate<span class="token punctuation">,</span> localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Instant instant <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date:{}"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="常用操作api"><a href="#常用操作api" class="headerlink" title="常用操作api"></a>常用操作api</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span>DateTimeFormatter<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019/2/12.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java8DatetimeTest</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * Date convert LocalDateTime
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Instant instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"localDateTime:{}"</span><span class="token punctuation">,</span> localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Date convert LocalDate
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Instant instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate localDate <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"localDate:{}"</span><span class="token punctuation">,</span> localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * Date convert LocalTime
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Instant instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalTime localTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"localTime:{}"</span><span class="token punctuation">,</span> localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * LocalDateTime to Date
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Instant instant <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date:{}"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * LocalDate to Date
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Instant instant <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date:{}"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * LocalTime to Date
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDate<span class="token punctuation">,</span> localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ZoneId zone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Instant instant <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date date <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"date:{}"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String s1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"YYYY-mm-dd HH:mm:ss.SSS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalDate s2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        LocalTime s3 <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"s1:{}"</span><span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"s2:{}"</span><span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"s3:{}"</span><span class="token punctuation">,</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> l1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> l2 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"l1:{}"</span><span class="token punctuation">,</span> l1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"l2:{}"</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 新特性-流处理</title>
    <url>/2019/02/13/java8-stream-api/</url>
    <content><![CDATA[<p>Java 8的另一个新特性——Stream API。新增的Stream API与<code>InputStream</code>和<code>OutputStream</code>是完全不同的概念，Stream API是对Java中集合操作的增强，可以利用它进行各种过滤、排序、分组、聚合等操作。Stream API配合Lambda表达式可以加大的提高代码可读性和编码效率，Stream API也支持并行操作，我们不用再花费很多精力来编写容易出错的多线程代码了，Stream API已经替我们做好了，并且充分利用多核CPU的优势。借助Stream API和Lambda，开发人员可以很容易的编写出高性能的并发处理程序。</p>
<h2 id="Stream-API简介"><a href="#Stream-API简介" class="headerlink" title="Stream API简介"></a>Stream API简介</h2><p>Stream API是Java 8中加入的一套新的API，主要用于处理集合操作，不过它的处理方式与传统的方式不同，称为“数据流处理”。流（Stream）类似于关系数据库的查询操作，是一种声明式操作。比如要从数据库中获取所有年龄大于20岁的用户的名称，并按照用户的创建时间进行排序，用一条SQL语句就可以搞定，不过使用Java程序实现就会显得有些繁琐，这时候可以使用流：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> userNames <span class="token operator">=</span>
        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getCreationDate<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getUserName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>可以把流跟集合做一个比较。在Java中，集合是一种数据结构，或者说是一种容器，用于存放数据，流不是容器，它不关心数据的存放，只关注如何处理。可以把流当做是Java中的<code>Iterator</code>，不过它比<code>Iterator</code>强大多了。</p>
<p>流与集合另一个区别在于他们的遍历方式，遍历集合通常使用<code>for-each</code>方式，这种方式称为<strong>外部迭代</strong>，而流使用<strong>内部迭代</strong>方式，也就是说它帮你把迭代的工作做了，你只需要给出一个函数来告诉它接下来要干什么：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 外部迭代</span>
List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 内部迭代</span>
list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在这个大数据的时代，数据变得越来越多样化，很多时候我们会面对海量数据，并对其做一些复杂的操作（比如统计，分组），依照传统的遍历方式（<code>for-each</code>），每次只能处理集合中的一个元素，并且是按顺序处理，这种方法是极其低效的。你也许会想到并行处理，但是编写多线程代码并非易事，很容易出错并且维护困难。不过在Java 8之后，你可以使用Stream API来解决这一问题。</p>
<p>Stream API将迭代操作封装到了内部，它会自动的选择最优的迭代方式，并且使用并行方式处理时，将集合分成多段，每一段分别使用不同的线程处理，最后将处理结果合并输出。</p>
<p>需要注意的是，流只能遍历一次，遍历结束后，这个流就被关闭掉了。如果要重新遍历，可以从数据源（集合）中重新获取一个流。如果你对一个流遍历两次，就会抛出<code>java.lang.IllegalStateException</code>异常：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里会抛出java.lang.IllegalStateException异常，因为流已经被关闭</span></code></pre>
<p>流通常由三部分构成：</p>
<ol>
<li>数据源：数据源一般用于流的获取，比如本文开头那个过滤用户的例子中<code>users.stream()</code>方法。</li>
<li>中间处理：中间处理包括对流中元素的一系列处理，如：过滤（<code>filter()</code>），映射（<code>map()</code>），排序（<code>sorted()</code>）。</li>
<li>终端处理：终端处理会生成结果，结果可以是任何不是流值，如<code>List&lt;String&gt;</code>；也可以不返回结果，如<code>stream.forEach(System.out::println)</code>就是将结果打印到控制台中，并没有返回。</li>
</ol>
<h2 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h2><p>创建流的方式有很多，具体可以划分为以下几种：</p>
<h3 id="由值创建流"><a href="#由值创建流" class="headerlink" title="由值创建流"></a>由值创建流</h3><p>使用静态方法<code>Stream.of()</code>创建流，该方法接收一个变长参数：</p>
<pre class=" language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>Stream<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>也可以使用静态方法<code>Stream.empty()</code>创建一个空的流：</p>
<pre class=" language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>Stream<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="由数组创建流"><a href="#由数组创建流" class="headerlink" title="由数组创建流"></a>由数组创建流</h3><p>使用静态方法<code>Arrays.stream()</code>从数组创建一个流，该方法接收一个数组参数：</p>
<pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Stream<span class="token operator">&lt;</span>Stream<span class="token operator">></span> stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="通过文件生成流"><a href="#通过文件生成流" class="headerlink" title="通过文件生成流"></a>通过文件生成流</h3><p>使用<code>java.nio.file.Files</code>类中的很多静态方法都可以获取流，比如<code>Files.lines()</code>方法，该方法接收一个<code>java.nio.file.Path</code>对象，返回一个由文件行构成的字符串流：</p>
<pre class=" language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="通过函数创建流"><a href="#通过函数创建流" class="headerlink" title="通过函数创建流"></a>通过函数创建流</h3><p><code>java.util.stream.Stream</code>中有两个静态方法用于从函数生成流，他们分别是<code>Stream.generate()</code>和<code>Stream.iterate()</code>：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// iteartor</span>
Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// generate</span>
Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Hello Man!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>第一个方法会打印100以内的所有偶数，第二个方法打印10个<code>Hello Man!</code>。值得注意的是，这两个方法生成的流都是无限流，没有固定大小，可以无穷的计算下去，在上面的代码中我们使用了<code>limit()</code>来避免打印无穷个值。</p>
<p>一般来说，<code>iterate()</code>用于生成一系列值，比如生成以当前时间开始之后的10天的日期：</p>
<pre class=" language-java"><code class="language-java">Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> date <span class="token operator">-</span><span class="token operator">></span> date<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>generate()</code>方法用于生成一些随机数，比如生成10个UUID：</p>
<pre class=" language-java"><code class="language-java">Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="使用流"><a href="#使用流" class="headerlink" title="使用流"></a>使用流</h2><p><code>Stream</code>接口中包含许多对流操作的方法，这些方法分别为：</p>
<ul>
<li><code>filter()</code>：对流的元素过滤</li>
<li><code>map()</code>：将流的元素映射成另一个类型</li>
<li><code>distinct()</code>：去除流中重复的元素</li>
<li><code>sorted()</code>：对流的元素排序</li>
<li><code>forEach()</code>：对流中的每个元素执行某个操作</li>
<li><code>peek()</code>：与<code>forEach()</code>方法效果类似，不同的是，该方法会返回一个新的流，而<code>forEach()</code>无返回</li>
<li><code>limit()</code>：截取流中前面几个元素</li>
<li><code>skip()</code>：跳过流中前面几个元素</li>
<li><code>toArray()</code>：将流转换为数组</li>
<li><code>reduce()</code>：对流中的元素归约操作，将每个元素合起来形成一个新的值</li>
<li><code>collect()</code>：对流的汇总操作，比如输出成<code>List</code>集合</li>
<li><code>anyMatch()</code>：匹配流中的元素，类似的操作还有<code>allMatch()</code>和<code>noneMatch()</code>方法</li>
<li><code>findFirst()</code>：查找第一个元素，类似的还有<code>findAny()</code>方法</li>
<li><code>max()</code>：求最大值</li>
<li><code>min()</code>：求最小值</li>
<li><code>count()</code>：求总数</li>
</ul>
<p>下面逐一介绍这些方法的用法。</p>
<h3 id="过滤和排序"><a href="#过滤和排序" class="headerlink" title="过滤和排序"></a>过滤和排序</h3><pre class=" language-java"><code class="language-java">Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 对元素过滤，保留大于2的元素</span>
    <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 去重，类似于SQL语句中的DISTINCT</span>
    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 跳过前面1个元素</span>
    <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 返回开头2个元素，类似于SQL语句中的SELECT TOP</span>
    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 对结果排序</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="查找和匹配"><a href="#查找和匹配" class="headerlink" title="查找和匹配"></a>查找和匹配</h3><p>Stream中提供的查找方法有<code>anyMatch()</code>、<code>allMatch()</code>、<code>noneMatch()</code>、<code>findFirst()</code>、<code>findAny()</code>，这些方法被用来查找或匹配某些元素是否符合给定的条件：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 检查流中的任意元素是否包含字符串"Java"</span>
<span class="token keyword">boolean</span> hasMatch <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"C#"</span><span class="token punctuation">,</span> <span class="token string">"PHP"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 检查流中的所有元素是否都包含字符串"#"</span>
<span class="token keyword">boolean</span> hasAllMatch <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"C#"</span><span class="token punctuation">,</span> <span class="token string">"PHP"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 检查流中的任意元素是否没有以"C"开头的字符串</span>
<span class="token keyword">boolean</span> hasNoneMatch <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"C#"</span><span class="token punctuation">,</span> <span class="token string">"PHP"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 查找元素</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> element <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"C#"</span><span class="token punctuation">,</span> <span class="token string">"PHP"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// .findFirst()     // 查找第一个元素</span>
        <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 查找任意元素</span></code></pre>
<p>注意最后一行代码的返回类型，是一个<code>Optional&lt;T&gt;</code>类（<code>java.util.Optional</code>），它一个容器类，代表一个值存在或不存在。上面的代码中，<code>findAny()</code>可能什么元素都没找到。Java 8的库设计人员引入了<code>Optional&lt;T&gt;</code>，这样就不用返回众所周知容易出问题的null了。有关<code>Optional&lt;T&gt;</code>类的详细用法，将在下一篇文章中介绍。</p>
<p>实际上测试结果发现，<code>findFirst()</code>和<code>findAny()</code>返回的都是第一个元素，那么两者之间到底有什么区别？通过查看javadoc描述，大致意思是<code>findAny()</code>是为了提高并行操作时的性能，如果没有特别需要，还是建议使用<code>findAny()</code>方法。</p>
<h3 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h3><p>归约操作就是将流中的元素进行合并，形成一个新的值，常见的归约操作包括求和，求最大值或最小值。归约操作一般使用<code>reduce()</code>方法，与<code>map()</code>方法搭配使用，可以处理一些很复杂的归约操作。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取流</span>
List<span class="token operator">&lt;</span>Book<span class="token operator">></span> books <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
       <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"Java编程思想"</span><span class="token punctuation">,</span> <span class="token string">"Bruce Eckel"</span><span class="token punctuation">,</span> <span class="token string">"机械工业出版社"</span><span class="token punctuation">,</span> <span class="token number">108.00D</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"Java 8实战"</span><span class="token punctuation">,</span> <span class="token string">"Mario Fusco"</span><span class="token punctuation">,</span> <span class="token string">"人民邮电出版社"</span><span class="token punctuation">,</span> <span class="token number">79.00D</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"MongoDB权威指南（第2版）"</span><span class="token punctuation">,</span> <span class="token string">"Kristina Chodorow"</span><span class="token punctuation">,</span> <span class="token string">"人民邮电出版社"</span><span class="token punctuation">,</span> <span class="token number">69.00D</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 计算所有图书的总价</span>
Optional<span class="token operator">&lt;</span>Double<span class="token operator">></span> totalPrice <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPrice<span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 价格最高的图书</span>
Optional<span class="token operator">&lt;</span>Book<span class="token operator">></span> expensive <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 价格最低的图书</span>
Optional<span class="token operator">&lt;</span>Book<span class="token operator">></span> cheapest <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 计算总数</span>
<span class="token keyword">long</span> count <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<p>在计算图书总价的时候首先使用<code>map()</code>方法得到所有图书价格的流，然后再使用<code>reduce()</code>方法进行归约计算。与<code>map()</code>方法类似的还有一个<code>flatMap()</code>，<code>flatMap()</code>方法让你把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个新的流。看看下面的代码：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> result <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Hello Man"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上面代码返回的结果是一个<code>List&lt;String[]&gt;</code>类型，也就是<code>[["H", "e", "l", "l", "o"], ["M", "a", "n"]]</code>这种结构，而我们想要的到<code>["H", "e", "l", "l", "o", "M", "a", "n"]</code>这种结构，这时候就需要使用<code>flatMap()</code>方法了：</p>
<pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Hello Man"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>使用<code>flatMap()</code>方法的效果是，各个数组并不是分别映射成一个流，而是映射成流的内容。所有使用<code>map(Arrays::stream)</code>时生成的单个流都被合并起来，也就是对流扁平化操作。</p>
<h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><p>前面两部分内容分别为流式数据处理的前两个步骤：从数据源创建流、使用流进行中间处理。下面我们介绍流式数据处理的最后一个步骤——数据收集。</p>
<p>数据收集是流式数据处理的终端处理，与中间处理不同的是，终端处理会消耗流，也就是说，终端处理之后，这个流就会被关闭，如果再进行中间处理，就会抛出异常。数据收集主要使用<code>collect</code>方法，该方法也属于归约操作，像<code>reduce()</code>方法那样可以接收各种做法作为参数，将流中的元素累积成一个汇总结果，具体的做法是通过定义新的<code>Collector</code>接口来定义的。</p>
<p>在前面部分的例子中使用收集器（<code>Collector</code>）是由<code>java.util.stream.Collectors</code>工具类中的<code>toList()</code>方法提供，<code>Collectors</code>类提供了许多常用的方法用于处理数据收集，常见的有归约、汇总、分组等。</p>
<h3 id="归约和汇总"><a href="#归约和汇总" class="headerlink" title="归约和汇总"></a>归约和汇总</h3><p>我们使用前面归约操作中计算图书总价，最大值，最小值，输入总数那个例子来看看收集器如何进行上述归约操作：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 求和</span>
<span class="token keyword">long</span> count <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 价格最高的图书</span>
Optional<span class="token operator">&lt;</span>Book<span class="token operator">></span> expensive <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 价格最低的图书</span>
Optional<span class="token operator">&lt;</span>Book<span class="token operator">></span> cheapest <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token function">comparing</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上面的代码假设你已经使用静态导入了<code>Collectors</code>和<code>Comparator</code>两个类，这样你就不用再去写<code>Collectors.counting()</code>和<code>Comparator.comparing()</code>这样的代码了：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">.</span>*<span class="token punctuation">;</span></code></pre>
<p><code>Collectors</code>工具类为我们提供了用于汇总的方法，包括<code>summarizingInt()</code>，<code>summarizingLong()</code>和<code>summarizingDouble()</code>，由于图书的价格为<code>Double</code>类型，所以我们使用<code>summarizingDouble()</code>方法进行汇总。该方法会返回一个<code>DoubleSummaryStatistics</code>对象，包含一系列归约操作的方法，如：汇总、计算平均数、最大值、最小值、计算总数：</p>
<pre class=" language-java"><code class="language-java">DoubleSummaryStatistics dss <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">summarizingDouble</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> sum <span class="token operator">=</span> dss<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 汇总</span>
<span class="token keyword">double</span> average <span class="token operator">=</span> dss<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 求平均数</span>
<span class="token keyword">long</span> count <span class="token operator">=</span> dss<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算总数</span>
<span class="token keyword">double</span> max <span class="token operator">=</span> dss<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 最大值</span>
<span class="token keyword">double</span> min <span class="token operator">=</span> dss<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 最小值</span></code></pre>
<p><code>Collectors</code>类还包含一个<code>joining()</code>方法，该方法用于连接字符串：</p>
<pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上面的代码用于将流中的字符串通过逗号连接成一个新的字符串。</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>和关系数据库一样，流也提供了类似于数据库中<code>GROUP BY</code>分组的特性，由<code>Collectors.groupingBy()</code>方法提供：</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Book<span class="token operator">>></span> booksGroup <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPublisher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上面的代码按照出版社对图书进行分组，分组的结果是一个<code>Map</code>对象，<code>Map</code>的<code>key</code>值是出版社的名称，<code>value</code>值是每个出版社分组对应的集合。分组方法<code>groupingBy()</code>接收一个<code>Function</code>接口作为参数，上面的例子中我们使用了方法引用传递了出版社作为分组的依据，但实际情况可能比这复杂，比如将价格在0-50之间的书籍分成一组，50-100之间的分成一组，超过100的分成一组，这时候，我们可以直接使用Lambda表达式来表示这个分组逻辑：</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Book<span class="token operator">>></span> booksGroup <span class="token operator">=</span> books
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>book <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"B"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">"C"</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><code>groupingBy()</code>方法还支持多级分组，他有一个重载方法，除了接收一个<code>Function</code>类型的参数外，还接收一个<code>Collector</code>类型的参数：</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Book<span class="token operator">>>></span> booksGroup <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>
        <span class="token function">groupingBy</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPublisher<span class="token punctuation">,</span> <span class="token function">groupingBy</span><span class="token punctuation">(</span>book <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"B"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"C"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上面的代码将之前两个分组合并成一个，实现了多级分组，首先按照出版社进行分组，然后按照价格进行分组，返回类型是一个<code>Map&lt;String, Map&lt;String, List&lt;Book&gt;&gt;&gt;</code>。<code>groupingBy()</code>的第二个参数可以是任意类型，只要是<code>Collector</code>接口的实例就可以，比如先分组，再统计数量：</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> countGroup <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPublisher<span class="token punctuation">,</span> <span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>还可以在进行分组后获取每组中价格最高的图书：</p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Book<span class="token operator">></span> expensiveGroup <span class="token operator">=</span> books<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPublisher<span class="token punctuation">,</span> <span class="token function">collectingAndThen</span><span class="token punctuation">(</span>
            <span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token function">comparingDouble</span><span class="token punctuation">(</span>Book<span class="token operator">:</span><span class="token operator">:</span>getPrice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                Optional<span class="token operator">:</span><span class="token operator">:</span>get
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="并行数据处理"><a href="#并行数据处理" class="headerlink" title="并行数据处理"></a>并行数据处理</h2><p>在Java 7之前，处理并行数据集合非常麻烦，首先需要将一个庞大数据集合分成几个子集合；然后需要为每一个子集合编写多线程处理程序，还需要对他们做线程同步来避免访问共享变量导致处理结果不准确；最后，等待所有线程处理完毕后将处理结果合并。在Java 7之后新添加了一个<code>fork/join</code>的框架，让这一切变得更加简单。</p>
<h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>并行流使用集合的<code>parallelStream()</code>方法可以获取一个并行流。Java内部会将流的内容分割成若干个子部分，然后将它们交给多个线程并行处理，这样就将工作的负担交给多核CPU的其他内核处理。</p>
<p>我们通过一个简单粗暴的例子演示并行流的处理性能。假设有一个方法，接受一个数字n作为参数，返回从1到n的所有自然数之和：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">sequentialSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>上面的方法也可以通过传统的for循环方式实现：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">iterativeSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> i <span class="token operator">=</span> 1L<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>编写测试代码：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> number <span class="token operator">=</span> 10000000L<span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sequential Sum: "</span> <span class="token operator">+</span> <span class="token function">sumPerformanceTest</span><span class="token punctuation">(</span>StreamTest<span class="token operator">:</span><span class="token operator">:</span>sequentialSum<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Iterative Sum: "</span> <span class="token operator">+</span> <span class="token function">sumPerformanceTest</span><span class="token punctuation">(</span>StreamTest<span class="token operator">:</span><span class="token operator">:</span>iterativeSum<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">sumPerformanceTest</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Long<span class="token operator">></span> function<span class="token punctuation">,</span> <span class="token keyword">long</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> maxValue <span class="token operator">=</span> Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> sum <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Result: "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token punctuation">(</span> end <span class="token operator">-</span> start <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            maxValue <span class="token operator">=</span> time<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> maxValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>为了方便测试，我们编写一个<code>sumPerformanceTest()</code>方法，参数<code>number</code>表示给定的一个数，用于计算从1到这个数的所有自然数之和。该方法内部执行10次运算，返回时间最短的一次运算结果。</p>
<p>运行上面的代码，可以在控制台看到如下结果：</p>
<pre class=" language-bash"><code class="language-bash">Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Sequential Sum: 159 毫秒
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Result: 200000010000000
Iterative Sum: 5 毫秒</code></pre>
<p>可以看出，采用传统的for循环更快，因为它不用做任何自动拆箱/装箱操作，操作的都是基本类型。这个测试结果并不客观，提升的性能取决于机器的配置，以上是我在公司的台式机（机器配置为<code>Intel(R) Core i7-6700 CPU 3.40HZ; 8GB RAM</code>）上运行的结果。</p>
<p>现在我们使用并行流测试一下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">parallelSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parallel Sum: "</span> <span class="token operator">+</span> <span class="token function">sumPerformanceTest</span><span class="token punctuation">(</span>StreamTest<span class="token operator">:</span><span class="token operator">:</span>parallelSum<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>并行流执行结果为：</p>
<pre class=" language-java"><code class="language-java">Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Parallel Sum<span class="token operator">:</span> <span class="token number">570</span> 毫秒</code></pre>
<p>并行的执行效率比顺序执行还要慢，这个结果让人大跌眼镜。主要有两个原因：</p>
<ol>
<li><code>iterate()</code>方法生成的对象是基本类型的包装类（也就是<code>java.lang.Long</code>类型），必须进行拆箱操作才能运算。</li>
<li><code>iterate()</code>方法不适合用并行流处理。</li>
</ol>
<p>第一个原因容易理解，自动拆箱操作确实需要花费一定的时间，这从前一个例子可以看出来。第二个原因中<code>iterate()</code>方法不适合用并行流处理，主要原因是<code>iterate()</code>方法内部机制的问题。<code>iterate()</code>方法每次执行都需要依赖前一次的结果，比如本次执行的输入值为10，这个输入值必须是前一次运算结果的输出，因此<code>iterate()</code>方法很难使用并行流分割成不同小块处理。实际上，上面的并行流程序还增加了顺序处理的额外开销，因为需要把每次操作执行的结果分别分配到不同的线程中。</p>
<p>一个有效的处理方式是使用<code>LongStream.rangeClosed()</code>方法，该方法弥补了上述例子的两个缺点，它生成的是基本类型而非包装类，不用拆箱操作就可以运算，并且，它生成的是由范围的数字，很容易拆分。如：生成1-20范围的数字可以拆分成1-10, 11-20。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">rangedSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ranged Sum: "</span> <span class="token operator">+</span> <span class="token function">sumPerformanceTest</span><span class="token punctuation">(</span>StreamTest<span class="token operator">:</span><span class="token operator">:</span>rangedSum<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>执行结果为：</p>
<pre class=" language-java"><code class="language-java">Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Ranged Sum<span class="token operator">:</span> <span class="token number">8</span> 毫秒</code></pre>
<p>这个结果比起<code>sequentialSum()</code>方法执行的结果还要快，所以选择合适的数据结构有时候比并行化处理更重要。我们再将<code>rangeClosed()</code>方法生成的流转化为并行流：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">parallelRangedSum</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>0L<span class="token punctuation">,</span> Long<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parallel Ranged Sum: "</span> <span class="token operator">+</span> <span class="token function">sumPerformanceTest</span><span class="token punctuation">(</span>StreamTest<span class="token operator">:</span><span class="token operator">:</span>parallelRangedSum<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>执行结果为：</p>
<pre class=" language-java"><code class="language-java">Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Result<span class="token operator">:</span> <span class="token number">200000010000000</span>
Parallel Ranged Sum<span class="token operator">:</span> <span class="token number">2</span> 毫秒</code></pre>
<p>我们终于得到了想要的结果，所以并行操作需要选择合适的数据结构，建议多做测试，找到合适的并行方式再执行，否则很容易跳到坑里。</p>
<h2 id="获取一个合适的IP地址"><a href="#获取一个合适的IP地址" class="headerlink" title="获取一个合适的IP地址"></a>获取一个合适的IP地址</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
  * 合适的ip地址前缀
  */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> PREFIX_IP <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"192.168"</span><span class="token punctuation">,</span> <span class="token string">"172.16"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getPreferIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        Enumeration<span class="token operator">&lt;</span>NetworkInterface<span class="token operator">></span> enumeration <span class="token operator">=</span> NetworkInterface<span class="token punctuation">.</span><span class="token function">getNetworkInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> lists <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>enumeration<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> Collections<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getInetAddresses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>InetAddress<span class="token operator">:</span><span class="token operator">:</span>isSiteLocalAddress<span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>InetAddress<span class="token operator">:</span><span class="token operator">:</span>getHostAddress<span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Objects<span class="token operator">:</span><span class="token operator">:</span>nonNull<span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>x<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        AtomicReference<span class="token operator">&lt;</span>String<span class="token operator">></span> prefer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PREFIX_IP<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> lists<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>a <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                prefer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String ip <span class="token operator">=</span> prefer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取可用ip为： {}"</span><span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ip<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>
        SocketException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>Java8</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义nacos ribbon负载均衡</title>
    <url>/2021/06/04/nacos-ribbon-custom-loadbalancer-rule/</url>
    <content><![CDATA[<h2 id="一、ribbon入门"><a href="#一、ribbon入门" class="headerlink" title="一、ribbon入门"></a>一、ribbon入门</h2><h3 id="1、ribbon在微服务中是什么-起到了什么作用"><a href="#1、ribbon在微服务中是什么-起到了什么作用" class="headerlink" title="1、ribbon在微服务中是什么?起到了什么作用?"></a>1、ribbon在微服务中是什么?起到了什么作用?</h3><p>   ribbon是一个客户端负载均衡,原来我们的http请求是 <code>http://ip:port/****</code> 使用ribbon: <code>productName</code>那么也就是根据项目名,寻找一台服务, 然后将项目名定位到一台服务的过程.<br>   <img src="/images/nacos-ribbon-custom-loadbalancer-rule/ribbon-principle.png" alt="ribbon-principle"></p>
<h3 id="2、重新定义ribbon负载均衡策略"><a href="#2、重新定义ribbon负载均衡策略" class="headerlink" title="2、重新定义ribbon负载均衡策略"></a>2、重新定义ribbon负载均衡策略</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TheSameClusterPriorityRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig iClientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 主要实现choose方法
     *
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Server <span class="token function">choose</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span></code></pre>
<h3 id="3、feign也是客户端负载均衡与ribbon的区别-Ribbon-VS-Feign"><a href="#3、feign也是客户端负载均衡与ribbon的区别-Ribbon-VS-Feign" class="headerlink" title="3、feign也是客户端负载均衡与ribbon的区别(Ribbon VS Feign)"></a>3、feign也是客户端负载均衡与ribbon的区别(Ribbon VS Feign)</h3><p>feign和ribbon是Spring Cloud的Netflix中提供的两个实现软负载均衡的组件，Ribbon和Feign都是用于<br>调用其他服务的，方式不同。Feign则是在Ribbon的基础上进行了一次改进，采用接口的方式。<br>将需要调用的其他服务的方法定义成抽象方法即可，不需要自己构建 http 请求.<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/ribbon-with-feign-difference.png" alt="ribbon-with-feign-difference"></p>
<h3 id="4、如何自定义feign拦截器"><a href="#4、如何自定义feign拦截器" class="headerlink" title="4、如何自定义feign拦截器"></a>4、如何自定义feign拦截器</h3><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/custom-feign-interceptor-.png" alt="custom-feign-interceptor"></p>
<h2 id="二、ribbon按照权重实现负载均衡"><a href="#二、ribbon按照权重实现负载均衡" class="headerlink" title="二、ribbon按照权重实现负载均衡"></a>二、ribbon按照权重实现负载均衡</h2><p><code>ribbon</code>本身是没有权重的概念的, 那么如何才能实现代用权重的负载均衡呢?<br>我们在<code>nacos</code>中,服务集群有一个权重的概念,当给服务器设置了权重,那么流量就可以根据权重比例分配到服务器上.</p>
<h3 id="1、先来看看如何自定义一个负载均衡策略"><a href="#1、先来看看如何自定义一个负载均衡策略" class="headerlink" title="1、先来看看如何自定义一个负载均衡策略."></a>1、先来看看如何自定义一个负载均衡策略.</h3><p>首先是继承自<code>AbstractLoadBalancerRule</code>. 从下面这张图可以看出,<code>ribbon</code>自定义的策略,最终都继承自这个类,这个类封装了负载均衡策略的公共方法.<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/ribbon-abstractLoadBalancerRule-implement.png" alt="ribbon-abstractLoadBalancerRule-implement"><br>在nacos中可以配置服务器的权重<br>在nacos中,有两个重要的类,一个是NameService,一个是ConfigService  </p>
<ul>
<li>NameService: 注册中心</li>
<li>ConfigService: 配置中心</li>
</ul>
<h2 id="三、实现带有权重的负载均衡器"><a href="#三、实现带有权重的负载均衡器" class="headerlink" title="三、实现带有权重的负载均衡器"></a>三、实现带有权重的负载均衡器</h2><h3 id="第一步-自定义一个带有权重的负载均衡器MyWeightRule"><a href="#第一步-自定义一个带有权重的负载均衡器MyWeightRule" class="headerlink" title="第一步:自定义一个带有权重的负载均衡器MyWeightRule"></a>第一步:自定义一个带有权重的负载均衡器MyWeightRule</h3><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/nacos-myWeightRule.png" alt="nacos-myWeightRule"></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>personal<span class="token punctuation">.</span>www<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>myrule<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>NacosDiscoveryProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>ribbon<span class="token punctuation">.</span>NacosServer<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>NacosException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>NamingService<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IClientConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>AbstractLoadBalancerRule<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>BaseLoadBalancer<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>ILoadBalancer<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>Server<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 自定义一个权重负载均衡策略
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWeightRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> NacosDiscoveryProperties discoveryProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig iClientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 读取配置文件, 并且初始化, ribbon内部基本上用不上</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 这个方法是实现负载均衡策略的方法
     *
     * @param
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Server <span class="token function">choose</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key:{}"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 调用父类方法, 获取当前使用的负载均衡器</span>
            BaseLoadBalancer baseLoadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span>BaseLoadBalancer<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 获取当前服务的名称</span>
            String serviceName <span class="token operator">=</span> baseLoadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/**
             * namingService: 获取nacos的服务发现API
             */</span>
            NamingService namingService <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">namingServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/**
             * 根据名称获取服务发现实例
             * 在selectOneHealthyInstance中, nacos实现了权重的负载均衡算法
             */</span>
            Instance instance <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">selectOneHealthyInstance</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="第二步-启用自定义的负载均衡器应用"><a href="#第二步-启用自定义的负载均衡器应用" class="headerlink" title="第二步: 启用自定义的负载均衡器应用"></a>第二步: 启用自定义的负载均衡器应用</h3><p>修改自定义的ribbon config.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>personal<span class="token punctuation">.</span>www<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>ribbonconfig<span class="token punctuation">.</span>GlobalRibbonConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>ribbon<span class="token punctuation">.</span>RibbonClients<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token comment" spellcheck="true">/*@RibbonClients(value = {
        @RibbonClient(name="product", configuration = ProductConfiguration.class),
        @RibbonClient(name = "customer", configuration = CustomerConfiguration.class)
})*/</span>
<span class="token comment" spellcheck="true">// 使用全局的配置</span>
<span class="token annotation punctuation">@RibbonClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> GlobalRibbonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomeRibbonConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<p>设置为全局配置<code>GlobalRibbonConfig.class</code><br>然后在全局配置中,我们执行当前使用的负载均衡策略是自定义的权重负载均衡策略 </p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>personal<span class="token punctuation">.</span>www<span class="token punctuation">.</span>ribbonconfig<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>personal<span class="token punctuation">.</span>www<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>myrule<span class="token punctuation">.</span>MyWeightRule<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>IRule<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalRibbonConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> IRule <span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 实现带有权重的负载均衡策略</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyWeightRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="第三步-启动服务-并设置nacos权重"><a href="#第三步-启动服务-并设置nacos权重" class="headerlink" title="第三步:启动服务,并设置nacos权重"></a>第三步:启动服务,并设置nacos权重</h3><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/nacos-console-server-instance-list.png" alt="nacos-console-server-instance-list"><br>我们看到启动了两台<code>product</code>,一台<code>order</code>. 接下来设置<code>product</code>两台实例的权重<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/nacos-console-server-instance-detail.png" alt="nacos-console-server-instance-detail"><br>我们看到一个设置为<code>0.1</code>,另一个是<code>0.9</code>, 也就是说如果有<code>10</code>次请求, 基本上都是会打到<code>8083</code>端口上的. </p>
<h3 id="第四步-浏览器访问连接-测试结果"><a href="#第四步-浏览器访问连接-测试结果" class="headerlink" title="第四步: 浏览器访问连接,测试结果"></a>第四步: 浏览器访问连接,测试结果</h3><pre class=" language-text"><code class="language-text">http://localhost:8080/get/product</code></pre>
<p>触发了10次请求,基本上都打到了8083服务器上.</p>
<h2 id="四、实现同集群优先调用原则的负载均衡器"><a href="#四、实现同集群优先调用原则的负载均衡器" class="headerlink" title="四、实现同集群优先调用原则的负载均衡器"></a>四、实现同集群优先调用原则的负载均衡器</h2><p>尽量避免跨集群调用<br>比如,南京集群的<code>product</code>优先调用南京集群的<code>order</code>.北京集群的<code>product</code>优先调用北京集群的<code>order</code>.<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/nacos-area-cluster-ribbon-rule.png" alt="nacos-area-cluster-ribbon-rule"><br>实现如上图所示的功能<br>我们有<code>product</code>服务和<code>order</code>服务, 假设各有10台. <code>product</code>和<code>order</code>有5台部署在北京集群上, 另外5台部署在南京集群上.<br>那么当有请求打到南京的<code>product</code>的时候, 那么他调用<code>order</code>要优先调用南京集群的,南京集群没有了,在调用北京集群的.<br>当有请求打到北京的<code>product</code>的是偶,优先调用北京集群的<code>order</code>,北京没有找到,再去调用南京的<code>order</code>.</p>
<h3 id="第一步-自定义一个同集群优先策略的负载均衡器"><a href="#第一步-自定义一个同集群优先策略的负载均衡器" class="headerlink" title="第一步: 自定义一个同集群优先策略的负载均衡器"></a>第一步: 自定义一个同集群优先策略的负载均衡器</h3><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/the-same-cluster-priority-rule.png" alt="the-same-cluster-priority-rule"></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>personal<span class="token punctuation">.</span>www<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>myrule<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>NacosDiscoveryProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>ribbon<span class="token punctuation">.</span>NacosServer<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>NacosException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>NamingService<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IClientConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>AbstractLoadBalancerRule<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>BaseLoadBalancer<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>Server<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>omg<span class="token punctuation">.</span>PortableInterceptor<span class="token punctuation">.</span>INACTIVE<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 同集群优先调用--负载均衡策略
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TheSameClusterPriorityRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> NacosDiscoveryProperties discoveryProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig iClientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 主要实现choose方法
     *
     * @param o
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Server <span class="token function">choose</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 第一步: 获取服务所在的集群名称</span>
            String clusterName <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第二步: 获取当前负载均衡器</span>
            BaseLoadBalancer loadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span>BaseLoadBalancer<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第三步: 获取当前服务的实例名称</span>
            String serviceName <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第四步: 获取nacos client服务注册发现api</span>
            NamingService namingService <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">namingServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第五步: 通过namingService获取当前注册的所有服务实例</span>
            List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> allInstances <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">getAllInstances</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> instanceList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第六步: 过滤筛选同集群下的服务实例</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Instance instance<span class="token operator">:</span> allInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">endsWithIgnoreCase</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clusterName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    instanceList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            Instance toBeChooseInstance<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第七步: 选择合适的服务实例</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceList <span class="token operator">==</span> null <span class="token operator">||</span> instanceList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 从其他集群中随机选择一个服务实例</span>
                toBeChooseInstance <span class="token operator">=</span> WeightedBalancer<span class="token punctuation">.</span><span class="token function">chooseInstanceByRandomWeight</span><span class="token punctuation">(</span>allInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"跨集群调用---{}"</span><span class="token punctuation">,</span> toBeChooseInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 从本集群中随机选择一个服务实例</span>
                toBeChooseInstance <span class="token operator">=</span> WeightedBalancer<span class="token punctuation">.</span><span class="token function">chooseInstanceByRandomWeight</span><span class="token punctuation">(</span>instanceList<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"同集群调用---{}"</span><span class="token punctuation">,</span> toBeChooseInstance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>toBeChooseInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/nacos-weightedBalancer.png" alt="nacos-weightedBalancer"></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>ribbon<span class="token punctuation">.</span>myrule<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>client<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Balancer<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 根据权重随机选择一个实例
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightedBalancer</span> <span class="token keyword">extends</span> <span class="token class-name">Balancer</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 根据随机权重策略, 从一群服务器中选择一个
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Instance <span class="token function">chooseInstanceByRandomWeight</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> instanceList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 这是父类Balancer自带的根据随机权重获取服务的方法.</span>
        <span class="token keyword">return</span> <span class="token function">getHostByRandomWeight</span><span class="token punctuation">(</span>instanceList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="第二步-设置当前的负载均衡策略为同集群优先策略"><a href="#第二步-设置当前的负载均衡策略为同集群优先策略" class="headerlink" title="第二步: 设置当前的负载均衡策略为同集群优先策略"></a>第二步: 设置当前的负载均衡策略为同集群优先策略</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Configuration</span>
 <span class="token comment" spellcheck="true">/*@RibbonClients(value = {
         @RibbonClient(name="product", configuration = ProductConfiguration.class),
         @RibbonClient(name = "customer", configuration = CustomerConfiguration.class)
 })*/</span>
 <span class="token comment" spellcheck="true">// 使用全局的配置</span>
 <span class="token annotation punctuation">@RibbonClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> GlobalRibbonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomeRibbonConfig</span> <span class="token punctuation">{</span>

 <span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalRibbonConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> IRule <span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 实现带有权重的负载均衡策略</span>
        <span class="token comment" spellcheck="true">//return new MyWeightRule();</span>
        <span class="token comment" spellcheck="true">// 实现同集群优先的服务实例</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TheSameClusterPriorityRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="第三步-启动服务"><a href="#第三步-启动服务" class="headerlink" title="第三步: 启动服务"></a>第三步: 启动服务</h3><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/the-same-cluster-priority-rule-instance-console.png" alt="the-same-cluster-priority-rule-instance-console"><br>可以看到<code>order</code>服务实例有<code>1</code>台, 所属集群是<code>BJ-CLUSTER</code>, <code>product</code>服务有<code>4</code>台. <code>BJ-CLUSTER</code>和<code>NJ-CLUSTER</code>各两台<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/nacos-bj-nj-cluster-detail.png" alt="nacos-bj-nj-cluster-detail"></p>
<h3 id="第四步-访问请求"><a href="#第四步-访问请求" class="headerlink" title="第四步: 访问请求"></a>第四步: 访问请求</h3><pre class=" language-text"><code class="language-text">http://localhost:8080/get/product</code></pre>
<p>由于order服务是<code>BJ-CLUSTER</code>,所以,我们看到流量是随机打到了<code>ORDER</code>的<code>BJ-CLUSTER</code>集群上.<br>停止<code>BJ-CLUSTER</code>集群的两台实例, 现在<code>BJ-CLUSTER</code>集群上没有<code>product</code>的服务实例了,这时在请求,流量就会达到<code>NJ-CLUSTER</code>上.</p>
<h2 id="五、金丝雀发布–实现同版本同集群优先负载均衡策略"><a href="#五、金丝雀发布–实现同版本同集群优先负载均衡策略" class="headerlink" title="五、金丝雀发布–实现同版本同集群优先负载均衡策略"></a>五、金丝雀发布–实现同版本同集群优先负载均衡策略</h2><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/canary-example-show.png" alt="canary-example-show"></p>
<blockquote>
<p>金丝雀发布一般先发1台，或者一个小比例，例如 2% 的服务器，主要做流量验证用，也称为金丝雀 (Canary) 测试（国内常称灰度测试）。以前旷工开矿下矿洞前，先会放一只金丝雀进去探是否有有毒气体，看金丝雀能否活下来，<br>金丝雀发布由此得名。简单的金丝雀测试一般通过手工测试验证，复杂的金丝雀测试需要比较完善的监控基础设施配合，通过监控指标反馈，观察金丝雀的健康状况，作为后续发布或回退的依据。如果金丝测试通过，<br>则把剩余的 V1 版本全部升级为 V2 版本。如果金丝雀测试失败，则直接回退金丝雀，发布失败。</p>
<p>优势和适用场合</p>
<p>优势：<br>用户体验影响小，金丝雀发布过程出现问题只影响少量用户<br>适用场合：</p>
<ul>
<li>对新版本功能或性能缺乏足够信心</li>
<li>用户体验要求较高的网站业务场景</li>
<li>缺乏足够的自动化发布工具研发能力</li>
</ul>
</blockquote>
<p>金丝雀发布, 也称为灰度发布, 是什么意思呢?<br>首先, 我们的product服务实例有100台, order服务实例有100台. 现在都是在v1 版本上<br>然后新开发了一个变化很大的功能, 为了保证效果, 要进行灰度测试<br>在<code>product-center</code>上发布了5台, 在<code>order-center</code>上发布了<code>5</code>台<br>那么现在用户的流量过来了, 我们要设定一部分用户, 请求的是v1版本的流量, 而且全部都走<code>v1</code>版本, <code>product-center</code>, <code>order-center</code>都是<code>v1</code>版本<br>如果过来的用户, 请求的v2版本的流量, 那么<code>product</code>和<code>order</code>都走<code>v2</code>版本.</p>
<p>下面我们要实现的功能描述如下:<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/canary-example-process.png" alt="canary-example-process"></p>
<ol>
<li>同集群,同版本优先调用, </li>
<li>没有同集群的服务提供者, 进行跨集群,同版本调用</li>
<li>不可以进行不同版本间的调用<br>也就是说: 南京集群V1版本的<code>product</code>优先调用南京集群<code>V1</code>版本的<code>order</code>, 如果没有南京集群<code>V1</code>版本的<code>order</code>, 那么就调用北京集群<code>V1</code>版本的<code>order</code>, 那么能调用<code>v2</code>版本的么? <code>当然不行</code>.<br>下面来具体实现一下</li>
</ol>
<h3 id="第一步-实现带有版本的集群优先策略的负载均衡算法"><a href="#第一步-实现带有版本的集群优先策略的负载均衡算法" class="headerlink" title="第一步: 实现带有版本的集群优先策略的负载均衡算法"></a>第一步: 实现带有版本的集群优先策略的负载均衡算法</h3><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/nacos-custom-ribbon-rule-canary-cluster-version.png" alt="nacos-custom-ribbon-rule-canary-cluster-version"></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>personal<span class="token punctuation">.</span>www<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>myrule<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>NacosDiscoveryProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>ribbon<span class="token punctuation">.</span>NacosServer<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>NacosException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>NamingService<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>api<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>Instance<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IClientConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>AbstractLoadBalancerRule<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>BaseLoadBalancer<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>loadbalancer<span class="token punctuation">.</span>Server<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 同集群优先带版本的负载均衡策略
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TheSameClusterPriorityWithVersionRule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractLoadBalancerRule</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> NacosDiscoveryProperties discoveryProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initWithNiwsConfig</span><span class="token punctuation">(</span>IClientConfig iClientConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Server <span class="token function">choose</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 第一步: 获取当前服务的集群名称 和 服务的版本号</span>
            String clusterName <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String version <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 第二步: 获取当前服务的负载均衡器</span>
            BaseLoadBalancer loadBalancer <span class="token operator">=</span> <span class="token punctuation">(</span>BaseLoadBalancer<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoadBalancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第三步: 获取目标服务的服务名</span>
            String serviceName <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 第四步: 获取nacos提供的服务注册api</span>
            NamingService namingService <span class="token operator">=</span> discoveryProperties<span class="token punctuation">.</span><span class="token function">namingServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第五步: 获取所有服务名为serviceName的服务实例</span>
            List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> allInstances <span class="token operator">=</span> namingService<span class="token punctuation">.</span><span class="token function">getAllInstances</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 第六步: 过滤相同版本的服务实例</span>
            List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> sameVersionInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Instance instance <span class="token operator">:</span> allInstances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    sameVersionInstance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// 第七步: 过滤有相同集群的服务实例</span>
            List<span class="token operator">&lt;</span>Instance<span class="token operator">></span> sameClusterInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Instance instance<span class="token operator">:</span> sameVersionInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clusterName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    sameClusterInstance<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 第八步: 选择合适的服务实例</span>
            Instance toBeChooseInstanc<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sameClusterInstance <span class="token operator">==</span> null <span class="token operator">||</span> sameClusterInstance<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                toBeChooseInstanc <span class="token operator">=</span> WeightedBalancer<span class="token punctuation">.</span><span class="token function">chooseInstanceByRandomWeight</span><span class="token punctuation">(</span>sameVersionInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"同版本不同集群的服务实例--{}"</span><span class="token punctuation">,</span> toBeChooseInstanc<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                toBeChooseInstanc <span class="token operator">=</span> WeightedBalancer<span class="token punctuation">.</span><span class="token function">chooseInstanceByRandomWeight</span><span class="token punctuation">(</span>sameClusterInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"同版本同集群服务实例--{}"</span><span class="token punctuation">,</span> toBeChooseInstanc<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NacosServer</span><span class="token punctuation">(</span>toBeChooseInstanc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NacosException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="第二步-启用自定义负载均衡策略"><a href="#第二步-启用自定义负载均衡策略" class="headerlink" title="第二步: 启用自定义负载均衡策略"></a>第二步: 启用自定义负载均衡策略</h3><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/same-cluster-priority-with-version-ribbon-config.png" alt="same-cluster-priority-with-version-ribbon-config"><br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/same-cluster-priority-with-version-ribbon-globalconfig.png" alt="same-cluster-priority-with-version-ribbon-globalconfig"></p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token comment" spellcheck="true">/*@RibbonClients(value = {
        @RibbonClient(name="product", configuration = ProductConfiguration.class),
        @RibbonClient(name = "customer", configuration = CustomerConfiguration.class)
})*/</span>
<span class="token comment" spellcheck="true">// 使用全局的配置</span>
<span class="token annotation punctuation">@RibbonClients</span><span class="token punctuation">(</span>defaultConfiguration <span class="token operator">=</span> GlobalRibbonConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomeRibbonConfig</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalRibbonConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> IRule <span class="token function">getRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 实现带有权重的负载均衡策略</span>
        <span class="token comment" spellcheck="true">//return new MyWeightRule();</span>
        <span class="token comment" spellcheck="true">// 实现同集群优先的负载均衡策略</span>
        <span class="token comment" spellcheck="true">// return new TheSameClusterPriorityRule();</span>
        <span class="token comment" spellcheck="true">// 实现同版本集群优先的服务负载均衡策略</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TheSameClusterPriorityWithVersionRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="第三步-启动服务-1"><a href="#第三步-启动服务-1" class="headerlink" title="第三步:启动服务"></a>第三步:启动服务</h3><p><img src="/images/nacos-ribbon-custom-loadbalancer-rule/same-cluster-priority-with-version-rule-console.png" alt="same-cluster-priority-with-version-rule-console"><br>如图,我们启动了两个服务, 一个<code>order</code>, 一个<code>product</code>, 其中<code>order</code>启动了<code>1</code>个实例, <code>product</code>启动了<code>4</code>个实例.</p>
<p>下面来看看order实例的详情<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/same-cluster-priority-with-version-rule-bjcluster.png" alt="same-cluster-priority-with-version-rule-bjcluster"><br>属于北京集群,版本号是<code>v1</code>版本</p>
<p>再来看看<code>product</code>集群的详情<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/same-cluster-priority-version-rule-productserver-cluster.png" alt="same-cluster-priority-version-rule-productserver-cluster"><br>北京集群有两台实例, 一个版本号是<code>v1</code>,另一个是<code>v2</code><br>南京集群有两台实例, 一个是<code>v1</code>, 另一个也是<code>v2</code></p>
<h3 id="第四步-现在发起请求"><a href="#第四步-现在发起请求" class="headerlink" title="第四步: 现在发起请求"></a>第四步: 现在发起请求</h3><pre class=" language-text"><code class="language-text">http://localhost:8080/get/product</code></pre>
<p>order集群是北京, 版本是<code>version1</code>. 那么服务应该达到哪台服务器呢? 应该打到北京集群的<code>v1</code>版本服务,端口号是<code>8081</code>的服务器.<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/same-cluster-priority-version-bj-server-process.png" alt="same-cluster-priority-version-bj-server-process"><br>果然,请求达到了8081服务上, 加入这时候, 北京集群的<code>8081</code>宕机了, 流量应该达到南京集群的v1版本的集群上, 端口号是<code>8083</code><br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/same-cluster-priority-version-nj-server-process.png" alt="same-cluster-priority-version-nj-server-process"><br> 果然是<code>8083</code>. 那么如果<code>8083</code>也宕机了, 流量会打到<code>v2</code>服务器上么? 没错,不会的, 报错了, 没有服务<br><img src="/images/nacos-ribbon-custom-loadbalancer-rule/same-cluster-priority-version-error-page.png" alt="same-cluster-priority-version-error-page"></p>
]]></content>
      <categories>
        <category>SpringBoot Nacos</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>nacos</tag>
        <tag>custom nacos ribbon rule</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 整合MyBatis-Plus使用多数据源</title>
    <url>/2019/03/19/spring-boot-mybatisplus-multiple-datasource/</url>
    <content><![CDATA[<p>项目中使用到了MySQL数据库存储配置数据，Vertica中存储指标数据，这样就有两个基于jdbc的数据源，所以需要做到动态配置与切换，并且项目采用了<a href="https://mp.baomidou.com/">mybatis-plus</a>作为orm框架，所以使用mybatis-plus配置多数据源，并且配置hikari连接池，这也是Spring Boot-2.x自带的连接池，这里提供一个配置思路与方案，仅供参考。通过查看mybatis-plus的源码发现，该框架目前连接Vertica时会提示一个警告⚠️ 表示不支持该数据库，实际使用时可以直接使用mybatis执行sql的功能即可。</p>
<pre><code>2019-03-19 17:36:20.877  WARN 14103 --- [  restartedMain] c.b.m.extension.toolkit.JdbcUtils        : The jdbcUrl is jdbc:vertica://192.168.21.188:5433/vertica20190122001, Mybatis Plus Cannot Read Database type or The Database's Not Supported!</code></pre>
<p>关于MySQL和Vertica的建库建表这边就不放了，直接贴上核心代码。</p>
<h2 id="pom-配置"><a href="#pom-配置" class="headerlink" title="pom 配置"></a>pom 配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatisplus.spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token comment" spellcheck="true">&lt;!-- jdbc driver 这是是官网下载，自己传到内网服务器的jdbc驱动 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.xiaozhangge.vertica<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>vertica-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>9.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>dynamic<span class="token punctuation">-</span>datasource
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">mysql</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
      <span class="token key atrule">hikari</span><span class="token punctuation">:</span>
        <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> SELECT 1
        <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
        <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
        <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
        <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">15</span>
        <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>
        <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> MySQLHikariCP
      <span class="token key atrule">password</span><span class="token punctuation">:</span> Root@123
      <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource
      <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.21.111<span class="token punctuation">:</span>3306/life<span class="token punctuation">-</span>test<span class="token punctuation">?</span>characterEncoding=utf8<span class="token important">&amp;useSSL</span>=false
      <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">vertica</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.vertica.jdbc.Driver
      <span class="token key atrule">hikari</span><span class="token punctuation">:</span>
        <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> SELECT 1
        <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
        <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
        <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
        <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">15</span>
        <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>
        <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> VerticaHikariCP
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
      <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource
      <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>vertica<span class="token punctuation">:</span>//192.168.21.188<span class="token punctuation">:</span>5433/vertica20190122001
      <span class="token key atrule">username</span><span class="token punctuation">:</span> dbadmin

<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">home</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>user.dir<span class="token punctuation">}</span>/logs
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xiaozhangge.entity
</code></pre>
<h2 id="HikariCP-配置"><a href="#HikariCP-配置" class="headerlink" title="HikariCP 配置"></a>HikariCP 配置</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-20.
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HikariConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> String poolName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> connectionTimeout<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> idleTimeout<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">long</span> maxLifetime<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> minimumIdle<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String connectionTestQuery<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="MySQL数据源配置"><a href="#MySQL数据源配置" class="headerlink" title="MySQL数据源配置"></a>MySQL数据源配置</h2><h3 id="连接池配置"><a href="#连接池配置" class="headerlink" title="连接池配置"></a>连接池配置</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>EqualsAndHashCode<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-20.
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.mysql.hikari"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HikariMySQLConfig</span> <span class="token keyword">extends</span> <span class="token class-name">HikariConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="DataSource配置"><a href="#DataSource配置" class="headerlink" title="DataSource配置"></a>DataSource配置</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>datasource<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>MybatisSqlSessionFactoryBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>HikariMySQLConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>SqlSessionTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DataSourceTransactionManager<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-19.
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.xiaozhangge.mapper.mysql"</span><span class="token punctuation">,</span> sqlSessionTemplateRef <span class="token operator">=</span> <span class="token string">"mysqlSqlSessionTemplate"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySQLDataSourceConfigure</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> HikariMySQLConfig mysqlConfig<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">MySQLDataSourceConfigure</span><span class="token punctuation">(</span>HikariMySQLConfig mysqlConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mysqlConfig <span class="token operator">=</span> mysqlConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mysqlDataSource"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.mysql"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSource <span class="token function">mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DataSource dataSource <span class="token operator">=</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        HikariDataSource hikariDataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSource <span class="token keyword">instanceof</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 连接池配置</span>
            hikariDataSource <span class="token operator">=</span> <span class="token punctuation">(</span>HikariDataSource<span class="token punctuation">)</span> dataSource<span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>mysqlConfig<span class="token punctuation">.</span><span class="token function">getPoolName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span>mysqlConfig<span class="token punctuation">.</span><span class="token function">isAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setConnectionTestQuery</span><span class="token punctuation">(</span>mysqlConfig<span class="token punctuation">.</span><span class="token function">getConnectionTestQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setIdleTimeout</span><span class="token punctuation">(</span>mysqlConfig<span class="token punctuation">.</span><span class="token function">getIdleTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span>mysqlConfig<span class="token punctuation">.</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span>mysqlConfig<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setMaxLifetime</span><span class="token punctuation">(</span>mysqlConfig<span class="token punctuation">.</span><span class="token function">getMaxLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setMinimumIdle</span><span class="token punctuation">(</span>mysqlConfig<span class="token punctuation">.</span><span class="token function">getMinimumIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> hikariDataSource <span class="token operator">==</span> null <span class="token operator">?</span> dataSource <span class="token operator">:</span> hikariDataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mysqlSqlSessionFactory"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">mysqlSqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"mysqlDataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// MyBatis-Plus使用MybatisSqlSessionFactoryBean  MyBatis直接使用SqlSessionFactoryBean</span>
        MybatisSqlSessionFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 给MyBatis-Plus注入数据源</span>
        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mysqlTransactionManager"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSourceTransactionManager <span class="token function">mysqlTransactionManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"mysqlDataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"mysqlSqlSessionTemplate"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> SqlSessionTemplate <span class="token function">mysqlSqlSessionTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"mysqlSqlSessionFactory"</span><span class="token punctuation">)</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="Vertica数据源配置"><a href="#Vertica数据源配置" class="headerlink" title="Vertica数据源配置"></a>Vertica数据源配置</h2><h3 id="连接池配置-1"><a href="#连接池配置-1" class="headerlink" title="连接池配置"></a>连接池配置</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>EqualsAndHashCode<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-20.
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.vertica.hikari"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HikariVerticaConfig</span> <span class="token keyword">extends</span> <span class="token class-name">HikariConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="DataSource配置-1"><a href="#DataSource配置-1" class="headerlink" title="DataSource配置"></a>DataSource配置</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>datasource<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>MybatisSqlSessionFactoryBean<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>HikariVerticaConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSource<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>SqlSessionTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>DataSourceBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>DataSourceTransactionManager<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-19.
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.xiaozhangge.mapper.vertica"</span><span class="token punctuation">,</span> sqlSessionTemplateRef <span class="token operator">=</span> <span class="token string">"verticaSqlSessionTemplate"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VerticaDataSourceConfigure</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> HikariVerticaConfig verticaConfig<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">VerticaDataSourceConfigure</span><span class="token punctuation">(</span>HikariVerticaConfig verticaConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>verticaConfig <span class="token operator">=</span> verticaConfig<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"verticaDataSource"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.vertica"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSource <span class="token function">vertica</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        DataSource dataSource <span class="token operator">=</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        HikariDataSource hikariDataSource <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSource <span class="token keyword">instanceof</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 连接池配置</span>
            hikariDataSource <span class="token operator">=</span> <span class="token punctuation">(</span>HikariDataSource<span class="token punctuation">)</span> dataSource<span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setPoolName</span><span class="token punctuation">(</span>verticaConfig<span class="token punctuation">.</span><span class="token function">getPoolName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span>verticaConfig<span class="token punctuation">.</span><span class="token function">isAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setConnectionTestQuery</span><span class="token punctuation">(</span>verticaConfig<span class="token punctuation">.</span><span class="token function">getConnectionTestQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setIdleTimeout</span><span class="token punctuation">(</span>verticaConfig<span class="token punctuation">.</span><span class="token function">getIdleTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setConnectionTimeout</span><span class="token punctuation">(</span>verticaConfig<span class="token punctuation">.</span><span class="token function">getConnectionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span>verticaConfig<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setMaxLifetime</span><span class="token punctuation">(</span>verticaConfig<span class="token punctuation">.</span><span class="token function">getMaxLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hikariDataSource<span class="token punctuation">.</span><span class="token function">setMinimumIdle</span><span class="token punctuation">(</span>verticaConfig<span class="token punctuation">.</span><span class="token function">getMinimumIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> hikariDataSource <span class="token operator">==</span> null <span class="token operator">?</span> dataSource <span class="token operator">:</span> hikariDataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"verticaSqlSessionFactory"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> SqlSessionFactory <span class="token function">verticaSqlSessionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"verticaDataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// MyBatis-Plus使用MybatisSqlSessionFactoryBean  MyBatis直接使用SqlSessionFactoryBean</span>
        MybatisSqlSessionFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisSqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 给MyBatis-Plus注入数据源</span>
        bean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"verticaTransactionManager"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> DataSourceTransactionManager <span class="token function">verticaTransactionManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"verticaDataSource"</span><span class="token punctuation">)</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"verticaSqlSessionTemplate"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> SqlSessionTemplate <span class="token function">verticaSqlSessionTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"verticaSqlSessionFactory"</span><span class="token punctuation">)</span> SqlSessionFactory sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>mysql<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>BaseMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>SysUser<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Insert<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Select<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-19.
 */</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SysUserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>SysUser<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into sys_user values(#{x.id},#{x.name},#{x.birthday})"</span><span class="token punctuation">)</span>
    <span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span> SysUser user<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from sys_user"</span><span class="token punctuation">)</span>
    List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="Vertica"><a href="#Vertica" class="headerlink" title="Vertica"></a>Vertica</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>vertica<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>BaseMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Select<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-15.
 */</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from public.user"</span><span class="token punctuation">)</span>
    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>可以发现只要数据源配置成功以后，两者已经没有任何区别了，就可以像正常写代码一样，需要注意的就是不同数据库的mapper需要放在指定的包下面，否则spring容器无法扫描。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为了方便，直接就在项目启动以后查询两个数据库的数据就好了</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>SysUser<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>SysUserMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>vertica<span class="token punctuation">.</span>UserMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>util<span class="token punctuation">.</span>IdHelper<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>CommandLineRunner<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>LocalDateTime<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2019-03-15.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSourceApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> SysUserMapper sysUserMapper<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DynamicDataSourceApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>IdHelper<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"阿牛-"</span> <span class="token operator">+</span> IdHelper<span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"description-"</span> <span class="token operator">+</span> IdHelper<span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 使用自定义的查询方法</span>
        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"insert result:{} list.size:{}"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token keyword">boolean</span> b <span class="token operator">=</span> sysUserMapper<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span>IdHelper<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"阿牛-"</span> <span class="token operator">+</span> IdHelper<span class="token punctuation">.</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 使用MyBatis-Plus提供的查询方法</span>
        List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> users <span class="token operator">=</span> sysUserMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"insert result:{} list.size:{}"</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> users<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>项目启动以后，可以看到控制台初始化了多个数据源的日志</p>
<pre><code>  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.1.3.RELEASE)

2019-03-20 10:33:18.233  INFO 21123 --- [  restartedMain] c.xiaozhangge.DynamicDataSourceApplication  : Starting DynamicDataSourceApplication on xiaozhangge.local with PID 21123 (/Users/xiaozhangge/share/life-example/example-dynamic-datasource/target/classes started by xiaozhangge in /Users/xiaozhangge/share/life-example)
2019-03-20 10:33:18.237  INFO 21123 --- [  restartedMain] c.xiaozhangge.DynamicDataSourceApplication  : No active profile set, falling back to default profiles: default
2019-03-20 10:33:18.360  INFO 21123 --- [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2019-03-20 10:33:18.360  INFO 21123 --- [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2019-03-20 10:33:20.341  INFO 21123 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2019-03-20 10:33:20.374  INFO 21123 --- [  restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2019-03-20 10:33:20.375  INFO 21123 --- [  restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.16]
2019-03-20 10:33:20.391  INFO 21123 --- [  restartedMain] o.a.catalina.core.AprLifecycleListener   : The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/Users/xiaozhangge/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.]
2019-03-20 10:33:20.497  INFO 21123 --- [  restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2019-03-20 10:33:20.497  INFO 21123 --- [  restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2136 ms
 _ _   |_  _ _|_. ___ _ |    _ 
| | |\/|_)(_| | |_\  |_)||_|_\ 
     /               |         
                        3.0.6 
2019-03-20 10:33:20.751  INFO 21123 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : VerticaHikariCP - Starting...
2019-03-20 10:33:21.449  INFO 21123 --- [  restartedMain] com.zaxxer.hikari.pool.PoolBase          : VerticaHikariCP - Driver does not support get/set network timeout for connections. (com.vertica.jdbc.VerticaJdbc4ConnectionImpl.getNetworkTimeout()I)
2019-03-20 10:33:21.672  INFO 21123 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : VerticaHikariCP - Start completed.
2019-03-20 10:33:21.683  WARN 21123 --- [  restartedMain] c.b.m.extension.toolkit.JdbcUtils        : The jdbcUrl is jdbc:vertica://192.168.21.188:5433/vertica20190122001, Mybatis Plus Cannot Read Database type or The Database's Not Supported!
 _ _   |_  _ _|_. ___ _ |    _ 
| | |\/|_)(_| | |_\  |_)||_|_\ 
     /               |         
                        3.0.6 
2019-03-20 10:33:21.865  INFO 21123 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : MySQLHikariCP - Starting...
2019-03-20 10:33:23.201  INFO 21123 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : MySQLHikariCP - Start completed.
2019-03-20 10:33:23.516  INFO 21123 --- [  restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2019-03-20 10:33:23.804  INFO 21123 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2019-03-20 10:33:23.887  INFO 21123 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2019-03-20 10:33:23.892  INFO 21123 --- [  restartedMain] c.xiaozhangge.DynamicDataSourceApplication  : Started DynamicDataSourceApplication in 6.41 seconds (JVM running for 7.001)</code></pre>
<p>以上完整<a href="https://github.com/xiaomozhang/personal-life-example">代码</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot2.x Redis多数据源配置(Vavr函数式编程方式实现)</title>
    <url>/2020/01/10/spring-boot-redis-multi-instance/</url>
    <content><![CDATA[<p>Spring Boot 2.x版本升级以后，Redis连接库由原来的<code>Jedis</code>换成了<code>Lettuce</code>，但是提供给上层使用的api没有变化，在日常使用过程中难免会有需要使用多个库的情况，或者使用多个Redis实例，那么这个时候就需要维护两个Redis连接池或者说两个<code>RedisTemplate</code>。</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol>
<li>多数据源最终表现其实就是 <code>RedisConnectionFactory</code> 不同</li>
<li>Spring Boot 通过<code>RedisStandaloneConfiguration</code>维护了一套默认的<code>RedisConnectionFactory</code>，要实现多个实例或者使用多个db，理论上只需要自己在维护一套<code>RedisConnectionFactory</code>即可。</li>
<li>不管是<code>Jedis</code>或是<code>Lettuce</code>，都是通用的，所以我们可以将两个的实现方式都整理出来，区别如下：<ul>
<li> <code>Lettuce</code>使用的是<code>LettuceConnectionFactory</code></li>
<li><code>Jedis</code>使用的是<code>JedisConnectionFactory</code></li>
</ul>
</li>
</ol>
<h2 id="创建Redis服务"><a href="#创建Redis服务" class="headerlink" title="创建Redis服务"></a>创建Redis服务</h2><p>为了方便测试，直接使用<code>docker</code>创建一个Redis服务，以下是一个完整的启动脚本</p>
<ol>
<li><code>--restart=always</code>设置了Redis服务随着docker进程的启动而启动</li>
<li><code>-p 6379:6379</code> 将docker启动的服务端口映射到宿主机，这里是必须的，否则宿主机和redis的端口是不能通信的</li>
<li><code>--requirepass "redis"</code> 设置密码为<code>redis</code></li>
<li><code>--appendonly yes</code>保存aof持久化文件</li>
<li><code>-v ~/share/docker/data/redis:/data \</code> 将docker启动的redis的数据映射到宿主机目录</li>
</ol>
<pre class=" language-dockerfile"><code class="language-dockerfile">mkdir -p ~/share/docker/data/redis
chmod 755 -R ~/share/docker/data/redis

docker run -dit --restart=always --name redis \
    -v ~/share/docker/data/redis:/data \
    -p 6379:6379 \
    redis:latest redis-server --requirepass "redis" --appendonly yes</code></pre>
<p>如果觉得不需要设置这么多，可以使用以下最简单的脚本，仅仅将端口做了映射，其他的都是最简单的配置</p>
<pre class=" language-dockerfile"><code class="language-dockerfile">docker run -dit --name redis -p 6379:6379 redis:latest</code></pre>
<p>关于docker的一些文章，详细请参考docker官网，这里不做过多赘述</p>
<h2 id="项目pom配置"><a href="#项目pom配置" class="headerlink" title="项目pom配置"></a>项目pom配置</h2><p>使用Spring Boot集成Redis，只需要将<code>spring-boot-starter-data-redis</code>和<code>commons-pool2</code>加到依赖即可</p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h2 id="自定义RedisConfigure"><a href="#自定义RedisConfigure" class="headerlink" title="自定义RedisConfigure"></a>自定义RedisConfigure</h2><p>这里这一步是最重要的，因为Spring Boot默认帮我们维护了一个<code>RedisConnectionFactory</code>，前面说了要使用不同的Redis实例就需要自己在维护一个<code>RedisConnectionFactory</code>，这里就以使用两个redis的database为例</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>spring.redis</code>开头的都是Spring Boot自动注入需要加载的配置，我们为了在使用一个db2，这里加了一个<code>spring.redis-db-2</code>开头的配置</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8 </span><span class="token comment" spellcheck="true"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1 </span><span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8 </span><span class="token comment" spellcheck="true"># 连接池中的最大空闲连接 默认 8</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0 </span><span class="token comment" spellcheck="true"># 连接池中的最小空闲连接 默认 0</span>
  <span class="token key atrule">redis-db-2</span><span class="token punctuation">:</span>
    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">2</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>
    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>
      <span class="token key atrule">pool</span><span class="token punctuation">:</span>
        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span></code></pre>
<h3 id="RedisConfigure"><a href="#RedisConfigure" class="headerlink" title="RedisConfigure"></a>RedisConfigure</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>configure<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>vavr<span class="token punctuation">.</span>Tuple6<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>pool2<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>GenericObjectPoolConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableCaching<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisPassword<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisStandaloneConfiguration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisClientConfiguration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>JedisConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span>LettuceConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span>LettucePoolingClientConfiguration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-10.
 *
 * @Value("${spring.redis-db-2.database}") int database,
 * @Value("${spring.redis-db-2.host}") String host,
 * @Value("${spring.redis-db-2.port}") int port,
 * @Value("${spring.redis-db-2.password}") String password,
 * @Value("${spring.redis-db-2.timeout}") long timeout,
 * @Value("${spring.redis-db-2.lettuce.pool.max-active}") int maxActive,
 * @Value("${spring.redis-db-2.lettuce.pool.max-wait}") int maxWait,
 * @Value("${spring.redis-db-2.lettuce.pool.max-idle}") int maxIdle,
 * @Value("${spring.redis-db-2.lettuce.pool.min-idle}") int minIdle
 */</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfigure</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> RedisTemplate <span class="token function">redisTemplateDB_2</span><span class="token punctuation">(</span>Tuple6<span class="token operator">&lt;</span>RedisStandaloneConfiguration<span class="token punctuation">,</span> Long<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> redisConfigurationDB_2<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        Long timeout <span class="token operator">=</span> redisConfigurationDB_2<span class="token punctuation">.</span><span class="token function">_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> maxActive <span class="token operator">=</span> redisConfigurationDB_2<span class="token punctuation">.</span><span class="token function">_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                maxWait <span class="token operator">=</span> redisConfigurationDB_2<span class="token punctuation">.</span><span class="token function">_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                maxIdle <span class="token operator">=</span> redisConfigurationDB_2<span class="token punctuation">.</span><span class="token function">_5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                minIdle <span class="token operator">=</span> redisConfigurationDB_2<span class="token punctuation">.</span><span class="token function">_6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">/* ========= 基本配置 ========= */</span>
        RedisStandaloneConfiguration standaloneConfiguration <span class="token operator">=</span> redisConfigurationDB_2<span class="token punctuation">.</span><span class="token function">_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">/* ========= 连接池通用配置 ========= */</span>
        GenericObjectPoolConfig genericObjectPoolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
        genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span>maxWait<span class="token punctuation">)</span><span class="token punctuation">;</span>
        genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        genericObjectPoolConfig<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span>minIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* ========= jedis pool ========= */</span>
        <span class="token comment" spellcheck="true">// jedisConnectionFactory(standaloneConfiguration, genericObjectPoolConfig, timeout);</span>

        <span class="token comment" spellcheck="true">/* ========= lettuce pool ========= */</span>
        LettuceConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token function">lettuceConnectionFactory</span><span class="token punctuation">(</span>standaloneConfiguration<span class="token punctuation">,</span> genericObjectPoolConfig<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 连接池初始化</span>
        connectionFactory<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建 RedisTemplate</span>
        <span class="token keyword">return</span> <span class="token function">createRedisTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * lettuceConnectionFactory
     *
     * @param standaloneConfiguration Redis标准配置
     * @param genericObjectPoolConfig Redis通用配置
     * @param timeout                 超时时间
     * @return
     */</span>
    <span class="token keyword">private</span> LettuceConnectionFactory <span class="token function">lettuceConnectionFactory</span><span class="token punctuation">(</span>RedisStandaloneConfiguration standaloneConfiguration<span class="token punctuation">,</span> GenericObjectPoolConfig genericObjectPoolConfig<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        LettucePoolingClientConfiguration<span class="token punctuation">.</span>LettucePoolingClientConfigurationBuilder builder <span class="token operator">=</span> LettucePoolingClientConfiguration<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">poolConfig</span><span class="token punctuation">(</span>genericObjectPoolConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">commandTimeout</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span>standaloneConfiguration<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * jedisConnectionFactory
     *
     * @param standaloneConfiguration Redis标准配置
     * @param genericObjectPoolConfig Redis通用配置
     * @param timeout                 超时时间
     * @return
     */</span>
    <span class="token keyword">private</span> JedisConnectionFactory <span class="token function">jedisConnectionFactory</span><span class="token punctuation">(</span>RedisStandaloneConfiguration standaloneConfiguration<span class="token punctuation">,</span> GenericObjectPoolConfig genericObjectPoolConfig<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        JedisClientConfiguration<span class="token punctuation">.</span>DefaultJedisClientConfigurationBuilder builder <span class="token operator">=</span> <span class="token punctuation">(</span>JedisClientConfiguration<span class="token punctuation">.</span>DefaultJedisClientConfigurationBuilder<span class="token punctuation">)</span> JedisClientConfiguration
                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">usePooling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">poolConfig</span><span class="token punctuation">(</span>genericObjectPoolConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span>standaloneConfiguration<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * @param redisConnectionFactory
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> RedisTemplate <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">createRedisTemplate</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * json 实现 redisTemplate
     * &lt;p>
     * 该方法不能加 @Bean 否则不管如何调用，RedisConnectionFactory 都会是默认配置
     *
     * @param redisConnectionFactory
     * @return
     */</span>
    <span class="token keyword">private</span> RedisTemplate <span class="token function">createRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Jackson2JsonRedisSerializer<span class="token operator">&lt;</span>Object<span class="token operator">></span> jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 自定义Redis的配置加载
     *
     * @param database
     * @param password
     * @param host
     * @param port
     * @param timeout
     * @param maxActive
     * @param maxWait
     * @param maxIdle
     * @param minIdle
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Tuple6<span class="token operator">&lt;</span>RedisStandaloneConfiguration<span class="token punctuation">,</span> Long<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span>
    <span class="token function">redisConfigurationDB_2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.database}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> database<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.password}"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.host}"</span><span class="token punctuation">)</span> String host<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.port}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.timeout}"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.lettuce.pool.max-active}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> maxActive<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.lettuce.pool.max-wait}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> maxWait<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.lettuce.pool.max-idle}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">,</span>
                           <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.redis-db-2.lettuce.pool.min-idle}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> minIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        RedisStandaloneConfiguration standaloneConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisStandaloneConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        standaloneConfiguration<span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span><span class="token punctuation">;</span>
        standaloneConfiguration<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>
        standaloneConfiguration<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RedisPassword redisPassword <span class="token operator">=</span> RedisPassword<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
            standaloneConfiguration<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>redisPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> Tuple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>standaloneConfiguration<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> maxActive<span class="token punctuation">,</span> maxWait<span class="token punctuation">,</span> maxIdle<span class="token punctuation">,</span> minIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这个配置有点长，但是都有注释，而且这里也用到了上篇文章中讲到的<code>tuple</code>（在方法有多个返回值时，元组真香）,其实就已经可以使用两个不同的<code>RedisTemplate</code>了，这时候我们在启动项目时分别注入<code>redisTemplate</code>和<code>redisTemplateDB_2</code>，别问我为啥名字是这两货。</p>
<h2 id="通过debug查看配置是否成功"><a href="#通过debug查看配置是否成功" class="headerlink" title="通过debug查看配置是否成功"></a>通过debug查看配置是否成功</h2><p>启动类我们实现<code>CommandLineRunner</code>，然后通过debug查看<code>redisTemplate</code>和<code>redisTemplateDB2</code>的<code>RedisConnectionFactory</code></p>
<p>并且我们在database=0存储了一个string数据，在database=2存储了一个hash数据</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>CommandLineRunner<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-10.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplateDB_2<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>RedisApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"redisTemplate:{}"</span><span class="token punctuation">,</span> redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"xiaozhangge"</span><span class="token punctuation">,</span> <span class="token string">"redisTemplate save value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"redisTemplateDB_2:{}"</span><span class="token punctuation">,</span> redisTemplateDB2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplateDB2<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"xiaozhangge"</span><span class="token punctuation">,</span> <span class="token string">"xiaozhangge-hash"</span><span class="token punctuation">,</span> <span class="token string">"redisTemplateDB_2 save value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>redisTemplate</li>
</ul>
<p><img src="/images/spring-boot/redis/redisTemplate.png" alt="redisTemplate"></p>
<ul>
<li>redisTemplateDB_2</li>
</ul>
<p><img src="/images/spring-boot/redis/redisTemplateDB2.png" alt="redisTemplateDB_2"></p>
<ul>
<li><p>登录redis查看两个Template存储的string和hash数据</p>
<ul>
<li>使用<code>RedisDesktopManager</code>连接到我们新建的redis服务，并且查看数据</li>
</ul>
<p><img src="/images/spring-boot/redis/rdm.jpg" alt="rdm 中的数据"></p>
<ul>
<li>使用redis-cli查看</li>
</ul>
<p>因为我们的redis服务是docker启动的，所以要使用<code>redis-cli</code>查看就需要进入docker容器内进行查看，进入容器也很简单，使用<code>docker exec -it fd3da052e6f1 bash</code>，这里的<code>fd3da052e6f1</code>是docker启动的containerId，可以使用<code>docker ps</code>查看</p>
<pre class=" language-verilog"><code class="language-verilog">root@fd3da052e6f1<span class="token punctuation">:</span><span class="token operator">/</span>data# redis<span class="token operator">-</span>cli
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span> keys <span class="token operator">*</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xiaozhangge"</span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span> get xiaozhangge
<span class="token string">"\"redisTemplate save value\""</span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span> select <span class="token number">2</span> # 选择<span class="token number">2</span>这个数据库
OK
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span> keys <span class="token operator">*</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xiaozhangge"</span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span> HVALS xiaozhangge
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"\xac\xed\x00\x05t\x00\x1bredisTemplateDB2 save value"</span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span>
<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">></span></code></pre>
</li>
</ul>
<p>  通过以上日志我们可以看到分别在不同的数据库已经存储了不同的数据，到这里我们redis配置多实例就已经完成。但是我们每次注入的时候都要记得自己创建的Bean的名字，这样对其他人不太友好，那么我们可以进一步封装一下，自定义一个handler进行获取RedisTemplate，这样会不会更便捷呢？</p>
<h2 id="自定义RedisHandler和RedisOperations"><a href="#自定义RedisHandler和RedisOperations" class="headerlink" title="自定义RedisHandler和RedisOperations"></a>自定义RedisHandler和RedisOperations</h2><p>  做这一步主要是为了将下层的RedisTemplate进行统一的封装，对外只是一个<code>RedisHandler</code>和<code>RedisOperations</code>，<code>RedisHandler</code>提供获取<code>RedisOperations</code>的方法，<code>RedisOperations</code>里面可以封装一些常用的redis操作，这样就只需要和<code>RedisOperations</code>进行操作，从而避免同时操作多个<code>RedisTemplate</code></p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><pre class=" language-verilog"><code class="language-verilog"> ➜  example<span class="token operator">-</span>redis git<span class="token punctuation">:</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ tree <span class="token punctuation">.</span><span class="token operator">/</span>
 <span class="token punctuation">.</span><span class="token operator">/</span>
 ├── example<span class="token operator">-</span>redis<span class="token punctuation">.</span>iml
 ├── pom<span class="token punctuation">.</span>xml
 └── src
     ├── main
     │   ├── java
     │   │   └── com
     │   │       └── xiaozhangge
     │   │           └── redis
     │   │               ├── RedisApplication<span class="token punctuation">.</span>java
     │   │               └── configure
     │   │                   ├── RedisConfigure<span class="token punctuation">.</span>java
     │   │                   ├── handler
     │   │                   │   └── RedisHandler<span class="token punctuation">.</span>java
     │   │                   └── util
     │   │                       └── RedisOperations<span class="token punctuation">.</span>java
     │   └── resources
     │       └── application<span class="token punctuation">.</span>yml
     └── test
         └── java</code></pre>
<h3 id="RedisOperations"><a href="#RedisOperations" class="headerlink" title="RedisOperations"></a>RedisOperations</h3><p>  该类可以作为redis的工具类使用，自己添加一些常用的方法</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>util<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-10.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisOperations</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">RedisOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">RedisOperations</span><span class="token punctuation">(</span>RedisTemplate redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> RedisTemplate <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="RedisHandler"><a href="#RedisHandler" class="headerlink" title="RedisHandler"></a>RedisHandler</h3><p>  <code>RedisHandler</code>提供了统一操作<code>RedisTemplate</code>的入口，对用户来说下层的<code>RedisTemplate</code>是谁就不需要关心了</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>util<span class="token punctuation">.</span>RedisOperations<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-10.
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplateDB_2<span class="token punctuation">;</span>

    <span class="token keyword">private</span> RedisOperations redisOperations<span class="token punctuation">,</span> redisDB2Operations<span class="token punctuation">;</span>

    <span class="token keyword">public</span> RedisOperations <span class="token function">redisOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisOperations <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            redisOperations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisOperations</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> redisOperations<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> RedisOperations <span class="token function">redisDB2Operations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisDB2Operations <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            redisDB2Operations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisOperations</span><span class="token punctuation">(</span>redisTemplateDB_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> redisDB2Operations<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h2><p>我们在启动时看一下经过<code>RedisHandler</code>保证的<code>RedisTemplate</code>是否和我们想的一致，修改以后的启动类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>RedisHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>configure<span class="token punctuation">.</span>util<span class="token punctuation">.</span>RedisOperations<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>CommandLineRunner<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020-01-10.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplateDB_2<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisHandler redisHandler<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>RedisApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"redisTemplate:{}"</span><span class="token punctuation">,</span> redisTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"xiaozhangge"</span><span class="token punctuation">,</span> <span class="token string">"redisTemplate save value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"redisTemplateDB_2:{}"</span><span class="token punctuation">,</span> redisTemplateDB_2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplateDB_2<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"xiaozhangge"</span><span class="token punctuation">,</span> <span class="token string">"xiaozhangge-hash"</span><span class="token punctuation">,</span> <span class="token string">"redisTemplateDB_2 save value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">// 通过统一的RedisOperations对Redis进行操作</span>
        <span class="token comment" spellcheck="true">// 这里可以自己封装一些常用的方法，这样就能把下层的RedisTemplate进行封装，对外仅仅只是一个RedisOperations而已</span>
        <span class="token comment" spellcheck="true">// 当然这里也提供对应的方法获取不同RedisTemplate对象最后的封装实例</span>
        RedisOperations redisOperations <span class="token operator">=</span> redisHandler<span class="token punctuation">.</span><span class="token function">redisOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RedisOperations redisDB2Operations <span class="token operator">=</span> redisHandler<span class="token punctuation">.</span><span class="token function">redisDB2Operations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"redisOperations redisTemplate:{}"</span><span class="token punctuation">,</span> redisOperations<span class="token punctuation">.</span><span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"redisDB2Operations redisTemplate:{}"</span><span class="token punctuation">,</span> redisDB2Operations<span class="token punctuation">.</span><span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>启动日志</p>
<pre class=" language-velocity"><code class="language-velocity">2020-01-10 23:54:39.579  INFO 66673 --- [           main] com.xiaozhangge.redis.RedisApplication      : Started RedisApplication in 8.672 seconds (JVM running for 10.951)
2020-01-10 23:54:39.580  INFO 66673 --- [           main] com.xiaozhangge.redis.RedisApplication      : redisTemplate:org.springframework.data.redis.core.RedisTemplate@44924587
2020-01-10 23:54:39.679  INFO 66673 --- [           main] io.lettuce.core.EpollProvider            : Starting without optional epoll library
2020-01-10 23:54:39.682  INFO 66673 --- [           main] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library
2020-01-10 23:54:39.910  INFO 66673 --- [           main] com.xiaozhangge.redis.RedisApplication      : redisTemplateDB2:org.springframework.data.redis.core.RedisTemplate@7fb66650
2020-01-10 23:54:39.927  INFO 66673 --- [           main] com.xiaozhangge.redis.RedisApplication      : redisOperations redisTemplate:org.springframework.data.redis.core.RedisTemplate@44924587
2020-01-10 23:54:39.929  INFO 66673 --- [           main] com.xiaozhangge.redis.RedisApplication      : redisDB2Operations redisTemplate:org.springframework.data.redis.core.RedisTemplate@7fb66650</code></pre>
<p>通过日志我们可以看到</p>
<ol>
<li><code>redisTemplate</code>和<code>redisOperations redisTemplate</code>是同一个对象</li>
<li><code>redisTemplateDB2</code> 和<code>redisDB2Operations redisTemplate</code>也是同一个对象</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本文，我们可以看到一个项目如果需要使用使用多个redis连接获取使用不同的数据库，完全可以使用自定义<code>RedisConnectionFactory</code>来完成，第二点就是如果定义的<code>RedisTemplate</code>过多，我们可以在上面定义一个<code>RedisHandler</code>来进行封装下层的API操作，暴露一个统一的入口进行简化处理。</p>
<p>参考链接：<a href="https://www.bbsmax.com/A/lk5aAmO251/">https://www.bbsmax.com/A/lk5aAmO251/</a></p>
<p>示例代码：<a href="https://github.com/xiaomozhang/personal-life-example/tree/master/example-redis">https://github.com/xiaomozhang/personal-life-example/tree/master/example-redis</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务网关zuul限流、熔断、路由规则详解</title>
    <url>/2021/10/13/spring-cloud-zuul-rule-limiting-fallback-analyze/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>最近在研究灰度方案。 灰度主要涉及两个方面，一个是网关，一个是配置。 这次主要研究了网关及其原理，我们现在使用项目每天都有很多流量进入。 每一个流量基本都要经过网关。所以弄清楚网关也可以帮我们更好的理解微服务请求的转发，对于后面研究灰度也有所帮助。我们项目中使用的zuul网关，所以也是以zuul网关为研究对象进行研究。主要从以下几个方面分析：</p>
<ul>
<li>1:网关的由来</li>
<li>2:网关的基本功能和使用场景</li>
<li>3:网关的的架构分析和生命周期</li>
<li>4:网关标准的过滤器类型</li>
<li>5:网关的应用<ul>
<li>5.1:zuul网关项目搭建（spring boot +nacos）</li>
<li>5.2:zuul网关配置特殊路由规则</li>
<li>5.3:zuul的全局拦截功能</li>
<li>5.4:在zuul网关中实现限流</li>
<li>5.5:在zuul网关中实现熔断器</li>
</ul>
</li>
<li>6:网关原理和源码分析（由于内容较多， 放在下次分享）<br>研究网关， 首先需要知道网关是干什么的？他是怎么演变过来的？之前没有，后来为什么就有了呢？能解决哪些问题？具体怎么使用？按照这个顺序来分析研究<h3 id="一-网关的由来"><a href="#一-网关的由来" class="headerlink" title="一. 网关的由来"></a>一. 网关的由来</h3>我们最开始的服务是单体服务, 所有的功能业务都是在一台服务器上. 可以通过过滤器来实现安全校验, 如权限校验等.</li>
</ul>
<p>单体时代,整个微服务的架构也比较简单. 后来随着业务的复杂度越来越高, 我们切换到了微服务时代<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-gateway-evolution.png" alt="微服务网关演进.png"><br>进入微服务时代, 有如下特点:</p>
<blockquote>
<p>1:原来单体服务被拆分为n个小的微服务<br> 2:这些微服务有一些公共的跨横切面的功能逻辑， 比如：安全，路由，日志等等。 如果每个微服务都来处理这些功能， 微服务就会很复杂， 微服务不但要处理业务逻辑，还要处理安全，路由，日志等逻辑， 开发的负担就会比较重。 所以 ，我们把这些公共的服务抽取出来， 放在网关服务上， 这就是在微服务上为什么会产生网关。<br> 3:在单体时代， 我们的客户端主要是浏览器， 在微服务时代， 客户端可能是浏览器，可能是手机， 可能是我们对外提供的API。如果让这些客户端单独对接微服务， 也是很复杂的。 如果让他们都对接网关服务，外面的各种平台只需要对接一个入口， 通过网关接入就可以了，不需要知道很多内部细节。</p>
</blockquote>
<h3 id="二-网关的基本功能和使用场景"><a href="#二-网关的基本功能和使用场景" class="headerlink" title="二. 网关的基本功能和使用场景"></a>二. 网关的基本功能和使用场景</h3><h4 id="2-1-网关的主要功能"><a href="#2-1-网关的主要功能" class="headerlink" title="2.1 网关的主要功能"></a>2.1 网关的主要功能</h4><p><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-gateway-core-activity.png" alt="网关的主要功能.png"><br>如上图所示, 网关的主要功能有: 单点入口, 路由转发, 熔断限流, 日志监控, 安全认证等等</p>
<ul>
<li>单点入口: 有了网关以后, 客户端只需要看到一个入口, 不需要看到内部复杂的细节</li>
<li>路由转发: 客户端请求来了, 对应到网关只有一个入口, 那么具体请求的是哪一个服务呢?网关要做一个路由转发</li>
<li>限流熔断: 在微服务时代, 微服务有很多, 每一个微服务都可能会出错或者产生延迟, 如果没有好的限流熔断机制, 很容器造成客户端被阻塞, 或者产生严重的后果,如雪崩效应. 网关要做一个限流熔断,保护后台服务的这样的一个功能.</li>
<li>日志监控: 所有的请求经过网关, 我们都可以写日志,对他进行监控. 整个服务的健康状态, 有没有人利用网关做坏事情等. 我们还要时刻掌握网关的性能状况. 可以在网关上增加监控来做到</li>
<li>安全认证: 所有的请求都通过网关进入到微服务, 网关就像是一道门, 一个请求进来, 我们要在门口检查一下, 他是不是安全的. 是否是经过认证的.<h4 id="2-2-网关的应用场景"><a href="#2-2-网关的应用场景" class="headerlink" title="2.2 网关的应用场景"></a>2.2 网关的应用场景</h4><h5 id="1-红绿部署"><a href="#1-红绿部署" class="headerlink" title="1.红绿部署"></a>1.红绿部署</h5><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-red-green-deploy.png" alt="红绿部署.png"><br>绿色集群是老系统, 红色集群是新系统. 当新功能上线以后, 通过网关切流量, 先切部分流量到红色集群,也就是新系统. 做金丝雀测试. 测试没问题, 在逐渐切换到红色集群,直至所有的流量全部切换到红色集群. 期间, 有任何错误,<br>可以直接切换回老系统<h5 id="2-健康检查和屏蔽怀节点"><a href="#2-健康检查和屏蔽怀节点" class="headerlink" title="2.健康检查和屏蔽怀节点"></a>2.健康检查和屏蔽怀节点</h5><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-close-damaged.png" alt="健康检查屏蔽坏节点.png"><br>网关可以对请求进行度量分析, 监控. 如果某一个后台的微服务节点出错了, 或者不响应了.可自动摘除无用服务器, 屏蔽坏的节点. 这样用户的体验就更好.<h5 id="3-调试路由"><a href="#3-调试路由" class="headerlink" title="3.调试路由"></a>3.调试路由</h5><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-debug-router.png" alt="调试路由.png"><br>有的时候生成环境除了一些问题, 我们需要用到调试路由. 比如, 测试人员在header中增加一些参数. 或者特殊的信息放在里面. 请求过来以后, 网关会把这部分流量分配到调试集群. 这样就可以做线上的调试, 来发现一些问题.<h5 id="4-金色雀测试"><a href="#4-金色雀测试" class="headerlink" title="4.金色雀测试"></a>4.金色雀测试</h5><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-canary-testing.png" alt="金丝雀测试"><br>我们可以利用网关实现金丝雀测试. 新的应用上线之前, 分为baseLine集群和canary集群.通过网关, 调拨少量的流量到canary金丝雀, 如果流量没有问题, 说明整个应用是健康的. 再全量的切换到新的版本. 如有问题,随时切换回去.<h5 id="5-粘性金丝雀"><a href="#5-粘性金丝雀" class="headerlink" title="5.粘性金丝雀"></a>5.粘性金丝雀</h5><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-stick-canary.png" alt="粘性金丝雀.png"><br>粘性金丝雀测试也是金丝雀测试. 如果不带粘性, 那么流量过来到网关, 网关是会随机分配给baseLine和金丝雀集群的. 如果是粘性, 网关有黏住你的能力, 如果某一次你走的是金丝雀, 那么网关会记住你的信息,如ip,<br>下次你来了, 还让你走金丝雀集群. 他就不会随便跳了. 这在有些情况下是必须的, 不能让ip跳来跳去, 不然可能导致功能或结果不一致, 黏住就是一致的了。<h3 id="三-网关的的架构分析和生命周期"><a href="#三-网关的的架构分析和生命周期" class="headerlink" title="三. 网关的的架构分析和生命周期"></a>三. 网关的的架构分析和生命周期</h3><h4 id="3-1-zuul网关的核心流程"><a href="#3-1-zuul网关的核心流程" class="headerlink" title="3.1 zuul网关的核心流程"></a>3.1 zuul网关的核心流程</h4><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-filter-core-process.png" alt="zuul网关的核心流程.png"><br>如上图, <code>spring cloud zuul</code>网关的核心架构</li>
</ul>
<p>这个运行时模块本身是一个<code>http servlet</code>, 请求过来以后, 首先交给<code>zuul servlet</code>, <code>zuul servlet</code>再将请求交给<code>zuul filter runner</code>. <code>zuul filter runner</code>是整个网关最核心的组件.</p>
<p>请求到达以后，会依次经过前置路油过滤器, 路由过滤器, 和后置路由过滤器. 经过过滤以后, 请求会以<code>response</code>的形式响应给客户端. <code>zuul</code>网关最核心的部门就是过滤链, 依次运行过滤器. 有一个对象很重要,<br>就是<code>Request Context</code>, 当请求在<code>zuul</code>网关过滤链中流转的时候, 他们需要共享一些过滤信息. 这些信息就保存在<code>RequestContext</code>中的。 <code>RequestContext</code>是线程内过滤器共享的。<br>比如前置过滤器会设置一些信息,给路由过滤器去读取. 信息的交换是通过<code>Request Context</code>, 就像是过滤器之间可以共享的存储, 而且是线程安全的。 每个请求有一个局部的<code>RequestContext</code>.</p>
<h4 id="3-2-请求处理的生命周期"><a href="#3-2-请求处理的生命周期" class="headerlink" title="3.2 请求处理的生命周期"></a>3.2 请求处理的生命周期</h4><p><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-filter-life-cycle.png" alt="请求处理的生命周期.png"></p>
<ul>
<li>请求过来了, 首先会进入一系列的前置过滤器pre filter.</li>
<li>前置过滤器处理完了, 进入routing filter路由过滤器, routing filter路由过滤器是真正的向后台服务发起请求, 接收响应的过滤器</li>
<li>经过routing filter路由过滤器, 最后会传递给post filter 后置过滤器,进行一些后续的处理, 这时候已经拿到响应了, 然后在返回给客户端.</li>
<li>在这三个过滤器过滤的过程中,任何一个环节发生错误, 都会进入error filter. 有error filter进行统一的错误处理. error filter错误过滤器会发送给post filter, 也是以响应的方式发回给客户端.</li>
</ul>
<p>这是一个请求, 在网关处理的生命周期.</p>
<h3 id="四-网关标准的过滤器类型"><a href="#四-网关标准的过滤器类型" class="headerlink" title="四. 网关标准的过滤器类型"></a>四. 网关标准的过滤器类型</h3><p>如上描述， 有下面这4中类型</p>
<h5 id="1-pre-前置过滤器"><a href="#1-pre-前置过滤器" class="headerlink" title="1. pre:前置过滤器"></a>1. pre:前置过滤器</h5><p>在请求被路由到原服务器之前, 要执行的过滤器</p>
<p>认证 : 认证安全, 是否符合条件, 认证为安全的才能放过<br>选路由: 当前这个请求来了, 应该调用后面的哪个微服务呢? A还是B<br>请求日志: 请求日志, 日志来了, 写日志, 对其进行监控</p>
<h5 id="2-routing-路由过滤器"><a href="#2-routing-路由过滤器" class="headerlink" title="2. routing: 路由过滤器"></a>2. routing: 路由过滤器</h5><p>处理将请求发送到源服务器的过滤器</p>
<h5 id="3-post-后置过滤器"><a href="#3-post-后置过滤器" class="headerlink" title="3. post: 后置过滤器"></a>3. post: 后置过滤器</h5><p>在响应从源服务器返回时要被执行的过滤器</p>
<p>对响应增加http请求头: 要增加调试的header日志<br>收集统计和度量: 这次请求, 它的性能如何, 有没有出错? 可以搜集一些信息<br>将响应以流的方式返回客户端</p>
<h5 id="4-error-错误过滤器"><a href="#4-error-错误过滤器" class="headerlink" title="4. error: 错误过滤器"></a>4. error: 错误过滤器</h5><p>上述三种过滤器中任何过滤器出现错误都要执行的过滤器</p>
<h3 id="五-网关的应用"><a href="#五-网关的应用" class="headerlink" title="五. 网关的应用"></a>五. 网关的应用</h3><h4 id="5-1-zuul网关项目搭建"><a href="#5-1-zuul网关项目搭建" class="headerlink" title="5.1. zuul网关项目搭建"></a>5.1. zuul网关项目搭建</h4><p><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-project-build.png" alt="zuul网关项目.png"></p>
<h5 id="5-1-1-引入项目依赖"><a href="#5-1-1-引入项目依赖" class="headerlink" title="5.1.1 引入项目依赖"></a>5.1.1 引入项目依赖</h5><p>搭建一个全新的项目</p>
<p>在 <a href="https://start.spring.io/">https://start.spring.io/</a> 创建一个项目, 项目名称zuul-test-gateway</p>
<blockquote>
<p>引入的依赖: web, zuul, nacos-config, nacos-discovery</p>
</blockquote>
<h5 id="5-1-2-新建bootstrap-yml配置文件-配置nacos"><a href="#5-1-2-新建bootstrap-yml配置文件-配置nacos" class="headerlink" title="5.1.2 新建bootstrap.yml配置文件,配置nacos"></a>5.1.2 新建bootstrap.yml配置文件,配置nacos</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 482c42bd<span class="token punctuation">-</span>fba1<span class="token punctuation">-</span>4147<span class="token punctuation">-</span>a700<span class="token punctuation">-</span>5b678d7c0747
        <span class="token key atrule">group</span><span class="token punctuation">:</span> ZUUL_TEST</code></pre>
<h5 id="5-1-3-修改配置文件application-yml"><a href="#5-1-3-修改配置文件application-yml" class="headerlink" title="5.1.3 修改配置文件application.yml"></a>5.1.3 修改配置文件application.yml</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> gateway
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>
        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8848</span>
        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 482c42bd<span class="token punctuation">-</span>fba1<span class="token punctuation">-</span>4147<span class="token punctuation">-</span>a700<span class="token punctuation">-</span>5b678d7c0747
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span></code></pre>
<h5 id="5-1-4-在启动类引入相关注解"><a href="#5-1-4-在启动类引入相关注解" class="headerlink" title="5.1.4 在启动类引入相关注解"></a>5.1.4 在启动类引入相关注解</h5><blockquote>
<p>1.开启zuul网关的注解:@EnableZuulProxy<br>2.nacos注册发现注解: @EnableDiscoveryClient<br>3.web框架注解: @RestController<br>4.微服务间调用注解feign: @EnableFeignClients<br>5.动态更新配置注解: @RefreshScope</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xzg<span class="token punctuation">.</span>www<span class="token punctuation">.</span>gateway<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>SpringApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>SpringBootApplication<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>discovery<span class="token punctuation">.</span>EnableDiscoveryClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>context<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RefreshScope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>EnableZuulProxy<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>openfeign<span class="token punctuation">.</span>EnableFeignClients<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@EnableDiscoveryClient</span>
<span class="token annotation punctuation">@EnableFeignClients</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableZuulProxy</span> <span class="token comment" spellcheck="true">// 开启zuul网关功能</span>
<span class="token annotation punctuation">@RefreshScope</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuulTestGatewayApplication</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String config<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ZuulTestGatewayApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">getconfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h5 id="5-1-5-启动nacos服务端"><a href="#5-1-5-启动nacos服务端" class="headerlink" title="5.1.5 启动nacos服务端"></a>5.1.5 启动nacos服务端</h5><p>启动nacos, 我这里是单机模式启动, 进入到nacos的目录</p>
<pre class=" language-shell"><code class="language-shell">cd /users/nacos/nacos/bin
./startup.sh -m standalone</code></pre>
<h5 id="5-1-6-启动gateway网关项目"><a href="#5-1-6-启动gateway网关项目" class="headerlink" title="5.1.6 启动gateway网关项目"></a>5.1.6 启动gateway网关项目</h5><p>上面的配置文件中已经包含了nacos配置和服务发现的配置内容</p>
<h5 id="5-1-7-在nacos中查看网关项目"><a href="#5-1-7-在nacos中查看网关项目" class="headerlink" title="5.1.7 在nacos中查看网关项目"></a>5.1.7 在nacos中查看网关项目</h5><p>1:网关的配置文件, 如下图所示<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-nacos-dev-config.png" alt="nacos网关的配置文件.png"><br>2.网关项目启动后, 查看服务列表<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-gateway-nacos-register-instance.png" alt="nacos网关实例列表.png"></p>
<h5 id="5-1-8-创建另一个服务-用户服务—-zuul-test-user"><a href="#5-1-8-创建另一个服务-用户服务—-zuul-test-user" class="headerlink" title="5.1.8 创建另一个服务,用户服务—-zuul-test-user"></a>5.1.8 创建另一个服务,用户服务—-zuul-test-user</h5><p>方法同上<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-test-user-project.png" alt="zuul-test-user-project.png"><br>在控制台启动2台user服务。 查看naco中服务注册信息<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-test-user-nacos-console.png" alt="zuul-test-user-nacos-console.png"><br>至此项目搭建就完成了!!!</p>
<h5 id="5-1-9-下面来感受一下网关"><a href="#5-1-9-下面来感受一下网关" class="headerlink" title="5.1.9 下面来感受一下网关"></a>5.1.9 下面来感受一下网关</h5><p>现在有两个服务, 一个是网关服务,端口是8080; 一个是user服务, 端口分别是8089和8088.</p>
<p>我们通过网关服务区请求user, 看看可不可以<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-post-user-interface.png" alt="通过zuul请求user服务.png"><br>我在postman中输入的是网关的端口localhost:8080, 然后紧跟着服务名+path, 可以正确跳转到user服务上.</p>
<p>其实,我们在配置文件中, 没有做任何配置.</p>
<p>网关是网关服务, 用户是用户服务, 他们都可已单独存在, 单独工作. 但是通过网关的地址却能够跳转到user服务上. 这是zuul自动为我们在服务发现上发现相应的集群中的其他服务.</p>
<h4 id="5-2-配置特殊的路由规则"><a href="#5-2-配置特殊的路由规则" class="headerlink" title="5.2. 配置特殊的路由规则"></a>5.2. 配置特殊的路由规则</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">zuul</span><span class="token punctuation">:</span> 
  <span class="token key atrule">routes</span><span class="token punctuation">:</span>
    <span class="token key atrule">user-router</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 随便写, 是一个唯一的, 代表一个微服务的路由机制</span>
      <span class="token key atrule">service-id</span><span class="token punctuation">:</span> user <span class="token comment" spellcheck="true"># 该路由机制针对的是哪个微服务</span>
      <span class="token key atrule">path</span><span class="token punctuation">:</span> /user1/**</code></pre>
<p>这表示, 所有连接 <code>http://localhost:8080/user1/**</code> 的连接都会分发到服务名为user的服务上</p>
<p>比如:我们请求路径写成 <code>http://localhost:8080/user1/config</code>, 那么也会正确的请求的user服务</p>
<h4 id="5-3-zuul的全局拦截"><a href="#5-3-zuul的全局拦截" class="headerlink" title="5.3. zuul的全局拦截"></a>5.3. zuul的全局拦截</h4><p>zuul是前端访问的唯一入口, 我们可以在zuul实现一个token的拦截验证</p>
<blockquote>
<p>1.定义一个TokenFilter过滤器,这个过滤器extends ZuulFilter</p>
</blockquote>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xzg<span class="token punctuation">.</span>www<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>ZuulFilter<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>context<span class="token punctuation">.</span>RequestContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>zuul<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ZuulException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"pre"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 实现token 拦截验证
     * @return
     * @throws ZuulException
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ZuulException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 怎么判断用户的token?</span>
        <span class="token comment" spellcheck="true">// RequestContext 请求的上下文, 包含所有的请求参数, 他默认和线程绑定</span>
        RequestContext currentContext <span class="token operator">=</span> RequestContext<span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        HttpServletRequest request <span class="token operator">=</span> currentContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 从请求头中拿出token</span>
        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// token 为null</span>
            currentContext<span class="token punctuation">.</span><span class="token function">setResponseBody</span><span class="token punctuation">(</span><span class="token string">"token is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentContext<span class="token punctuation">.</span><span class="token function">setResponseStatusCode</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 是否发送路由响应</span>
            currentContext<span class="token punctuation">.</span><span class="token function">setSendZuulResponse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            currentContext<span class="token punctuation">.</span><span class="token function">setResponseBody</span><span class="token punctuation">(</span><span class="token string">"token is error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentContext<span class="token punctuation">.</span><span class="token function">setResponseStatusCode</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentContext<span class="token punctuation">.</span><span class="token function">setSendZuulResponse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        currentContext<span class="token punctuation">.</span><span class="token function">setSendZuulResponse</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这个过滤器extends自ZuulFilter, 后面的案例多了, 我们就发现, 其实zuul网关的本质就是拦截器, zuul的各种功能,也是通过拦截器来实现的</p>
<p>filterType() : 拦截器的类型是前置拦截器.</p>
<p>filterOrder(): 执行顺序是第一个执行.</p>
<p>shouldFilter(): 过滤器执行的条件, 这里是所有的连接都需要过这个拦截器, 所以直接设置为true</p>
<p>run(): 拦截器的核心逻辑. 这里的拦截器逻辑很简单, 就是判断header中是否有一个叫做token的属性, 且其值为123456</p>
<blockquote>
<p>2.启动服务, 查看拦截器效果<br>当有header, 不启用的时候, 会被拦截, 提示token is null, 并且跳过后面的拦截器, 直接返回</p>
</blockquote>
<p><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-token-invalid.png" alt="zuul-token-invalid.png"><br>当有token ,但是token的值不是123456的时候, 会说token错误<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-token-error.png" alt="zuul-token-error.png"><br>只有当token符合我们的预期的时候, 才可以放行<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-token-success.png" alt="zuul-token-success.png"></p>
<h4 id="5-4-在zuul里面实现限流"><a href="#5-4-在zuul里面实现限流" class="headerlink" title="5.4 在zuul里面实现限流"></a>5.4 在zuul里面实现限流</h4><h5 id="1-添加zuul的限流组件"><a href="#1-添加zuul的限流组件" class="headerlink" title="1. 添加zuul的限流组件"></a>1. 添加zuul的限流组件</h5><blockquote>
<p>git地址:<a href="https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit">https://github.com/marcosbarbero/spring-cloud-zuul-ratelimit</a></p>
</blockquote>
<p>进入git查看zuul-ratelimit的使用方法, 上面是源码, 下面是使用方法</p>
<h5 id="2-添加限流组件–引入依赖"><a href="#2-添加限流组件–引入依赖" class="headerlink" title="2. 添加限流组件–引入依赖"></a>2. 添加限流组件–引入依赖</h5><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.marcosbarbero.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-zuul-ratelimit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>我们引入限流组件, 同时引入redis. 用来记录当前用户登录的次数</p>
<h5 id="3-在配置文件中增加redis配置"><a href="#3-在配置文件中增加redis配置" class="headerlink" title="3. 在配置文件中增加redis配置."></a>3. 在配置文件中增加redis配置.</h5><p>在本地先启动redis, 端口6379</p>
<p>然后增加redis配置<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-redis-config.png" alt="redis信息配置.png"></p>
<h5 id="4-增加限流配置"><a href="#4-增加限流配置" class="headerlink" title="4. 增加限流配置"></a>4. 增加限流配置</h5><p>根据文档, 限流配置有两种,</p>
<p>第一种： 通用限流配置: 对所有的微服务都生效<br>第二种：特定服务限流配置: 针对某一个微服务设置的限流<br>a. 通用限流配置:<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-ratelimit.png" alt="zuul限流配置"><br>如上限流的含义是: 对所有微服务都生效的限流策略是: 对某个微服务在60s内,请求次数限制是10次. 或者刷新窗口时间隔实现的限制是1秒. 也就是1秒刷新一次窗口.</p>
<p>配置中的具体含义如上注释</p>
<p>配置好以后, 启动微服务, 在postman中查看 是否起到限流作用<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-retelimit-test.png" alt="限流测试.png"><br>当次数超过10次时候, 就会给出异常提示, too many requests.</p>
<p>b.特定微服务的限流限制<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-refresh-limit.png" alt="一定时间内限流测试.png"><br>设置单个微服务的限流策略, 如上所示, 具体含义: 60s内, 限制次数为10次, 窗口刷新间隔时间是1秒.</p>
<p>效果如下, 当每分钟请求次数超过5次的时候, 爆出连接次数过多<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-many-request.png" alt="定期内限流postman测试.png"></p>
<h5 id="5-限流的机制"><a href="#5-限流的机制" class="headerlink" title="5. 限流的机制"></a>5. 限流的机制</h5><p>限流器的本质是filter</p>
<p>在限流器通过filter来记录用户的访问次数, 当次数达到一定值, 直接让filter拦截</p>
<h5 id="6-限流里面redis的作用"><a href="#6-限流里面redis的作用" class="headerlink" title="6. 限流里面redis的作用"></a>6. 限流里面redis的作用</h5><p>使用redis的原因, 当zuul是一个集群的时候,要在多个redis共享访问次数</p>
<h4 id="5-5-在zuul里面实现熔断器"><a href="#5-5-在zuul里面实现熔断器" class="headerlink" title="5.5 在zuul里面实现熔断器"></a>5.5 在zuul里面实现熔断器</h4><p>熔断, 其含义是当路由失败的时候, 执行熔断器.</p>
<p>zuul是自带熔断机制的. 不需要引入任何额外的依赖</p>
<p>我们需要的是, 实现熔断器中的FallbackProvider接口. 定义自己的熔断机制</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZuulFallbackProvider</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackProvider</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 要对哪个微服务实现熔断
     * @return
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"user"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里写的是服务的id, *表示任何服务</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 在熔断时, 用户执行怎样的响应数据
     * @return 当熔断被触发以后, 如何响应内容
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> ClientHttpResponse <span class="token function">fallbackResponse</span><span class="token punctuation">(</span>String route<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"熔断器被触发:"</span> <span class="token operator">+</span> route<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"熔断的原因:"</span> <span class="token operator">+</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ClientHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> HttpStatus <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
                <span class="token keyword">return</span> HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">401</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> String <span class="token function">getStatusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token string">"服务异常!"</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> InputStream <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> <span class="token string">"server is error, get in the fallback"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> HttpHeaders <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"reason"</span><span class="token punctuation">,</span> <span class="token string">"server is error, get in fallback!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> headers<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>getRoute(): 定义对哪个服务启用熔断策略</p>
<p>fallbackResponse(String route, Throwable cause): 当熔断时, 执行怎么样的操作</p>
<p>这里的熔断机制比较简单, 如果熔断了, 那么就打印日志, 并输出server is error, get in fallback!</p>
<p>比如: 我的user微服务挂了, 通过网关请求, 就会进得到如下信息提示.<br><img src="/images/spring-cloud-zuul-rule-limiting-fallback-analyze/spring-cloud-zuul-rule-limiting-fallback-analyze-zuul-fallback-test.png" alt="zuul-fallback-test.png"><br>以上就是网关在项目中通常使用的场景. 我们可以根据实际需求增加实现.</p>
]]></content>
      <categories>
        <category>Spring Cloud</category>
      </categories>
      <tags>
        <tag>SpringCloud zuul nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务管理</title>
    <url>/2020/02/16/spring-transaction/</url>
    <content><![CDATA[<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。</p>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><blockquote>
<p>事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</p>
</blockquote>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><blockquote>
<p>执行事务前后，数据保持一致；</p>
</blockquote>
<h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3><blockquote>
<p>一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</p>
</blockquote>
<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><blockquote>
<p>并发访问数据库时，一个用户的事物不被其他事物所干扰，各并发事务之间数据库是独立的；</p>
</blockquote>
<h2 id="Spring-事务接口介绍"><a href="#Spring-事务接口介绍" class="headerlink" title="Spring 事务接口介绍"></a>Spring 事务接口介绍</h2><ul>
<li>PlatformTransactionManager 事务管理器</li>
<li>TransactionDefinition 事务定义形象（隔离、传播、超时、只读）</li>
<li>TransactionStatus 事务具体的运行状态</li>
</ul>
<h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><p><strong>Spring并不直接管理事务，而是提供了多种事务管理器</strong> ，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。 Spring事务管理器的接口是： <strong>org.springframework.transaction.PlatformTransactionManager</strong> ，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p>
<p><img src="/images/spring/spring-platformTransactionManager.png" alt="PlatformTransactionManager"></p>
<table>
<thead>
<tr>
<th>事务</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>org.springframework.jdbc.datasource.DataSourceTransactionManager</td>
<td>使用Spring Jdbc或者MyBatis进行持久化数据时使用</td>
</tr>
<tr>
<td>org.springframework.orm.hibernate5.HibernateTransactionManager</td>
<td>使用Hibernate5.0版本进行持久化数据使用</td>
</tr>
<tr>
<td>org.springframework.orm.jpa.JpaTransactionManager</td>
<td>使用Jpa持久化使用</td>
</tr>
<tr>
<td>org.springframework.kafka.transaction.KafkaTransactionManager</td>
<td>使用Kafka事务时使用</td>
</tr>
</tbody></table>
<h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><p>事务管理器接口 <strong>PlatformTransactionManager</strong> 通过 <strong>getTransaction(TransactionDefinition definition)</strong> 方法来得到一个事务，这个方法里面的参数是 <strong>TransactionDefinition类</strong> ，这个类就定义了一些基本的事务属性。</p>
<p><img src="/images/spring/spring-transactionDefinition.jpeg" alt="TransactionDefinition"></p>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>在不考虑隔离性的情况下，会引发如下问题</p>
<ul>
<li>脏度 </li>
</ul>
<blockquote>
<p>一个事务读取了另一个事务改写但为提交的数据，如果这些数据被回滚，则独到的数据时无效的</p>
</blockquote>
<ul>
<li>不可重复度</li>
</ul>
<blockquote>
<p>在同一事务中，多次读取同一数据返回的结果不一致</p>
</blockquote>
<ul>
<li>幻读</li>
</ul>
<blockquote>
<p>一个事务读取了几行记录后，另一个事务插入一些记录，幻读就发生了</p>
<p>在后来的查询中，第一个事务就会发现有些原来没有的记录</p>
</blockquote>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>导致的问题</th>
</tr>
</thead>
<tbody><tr>
<td><strong>ISOLATION_DEFAULT</strong></td>
<td>使用数据库默认的隔离级别（spring默认）</td>
</tr>
<tr>
<td>ISOLATION_READ_UNCOMMITTED</td>
<td>允许读取还未提交的改变了的数据，可能导致脏、幻、不可重复读</td>
</tr>
<tr>
<td>ISOLATION_READ_COMMITTED</td>
<td>允许在并发事务已经提交后读取。可防止脏读，但幻、不可重复读任可发生</td>
</tr>
<tr>
<td>ISOLATION_REPEATABLE_READ</td>
<td>对相同字段的多次读取是一致的，除非数据被事务本身改变。可防止脏、不可重复读，但幻读仍可能发生</td>
</tr>
<tr>
<td>ISOLATION_SERIALIZABLE</td>
<td>完全服从ACID的隔离级别，事务只能一个一个执行，避免了脏读、不可重复读、幻读。执行效率慢，使用时慎重</td>
</tr>
</tbody></table>
<p>注：MySQL使用的是<code>REPEATABLE_READ</code>；Oracle使用的是<code>READ_COMMITTED</code></p>
<h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p>解决业务层方法之间的相互调用的问题，事务传递方式。</p>
<table>
<thead>
<tr>
<th>常量名称</th>
<th>常量解释</th>
</tr>
</thead>
<tbody><tr>
<td><strong>PROPAGATION_REQUIRED</strong></td>
<td>支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择，也是 Spring 默认的事务的传播。</td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td>支持当前事务，如果当前没有事务，就抛出异常。</td>
</tr>
<tr>
<td><strong>PROPAGATION_REQUIRES_NEW</strong></td>
<td>如果事务存在，挂起当前事务，创建一个新的事务</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td>以非事务方式运行，如果当前存在事务，就把当前事务挂起。</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td>以非事务方式执行，如果当前存在事务，则抛出异常。</td>
</tr>
<tr>
<td><strong>PROPAGATION_NESTED</strong></td>
<td>如果一个活动的事务存在，则运行在一个嵌套的事务中。如果没有活动事务，则按REQUIRED属性执行。它使用了一个单独的事务，这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效。</td>
</tr>
</tbody></table>
<h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p><code>TransactionStatus</code>接口用来记录事务的状态 该接口定义了一组方法,用来获取或判断事务的相应状态信息.</p>
<p><code>PlatformTransactionManager.getTransaction(…) </code>方法返回一个 <code>TransactionStatus</code> 对象。返回的<code>TransactionStatus</code> 对象可能代表一个新的或已经存在的事务（如果在当前调用堆栈有一个符合条件的事务）。</p>
<p><img src="/images/spring/spring-transactionStatus-diagram.jpeg" alt="TransactionStatus-diagram"></p>
<p><img src="/images/spring/spring-transactionStatus.jpeg" alt="TransactionStatus"></p>
<p><img src="/images/spring/spring-transactionExecution.jpeg" alt="TransactionExecution"></p>
<h2 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h2><h3 id="编程式的事务管理"><a href="#编程式的事务管理" class="headerlink" title="编程式的事务管理"></a>编程式的事务管理</h3><p>使用<code>TransactionTemplate</code>手动管理事务，需要修改代码，侵入性相对较大，一般不使用</p>
<h3 id="声明式的事务管理"><a href="#声明式的事务管理" class="headerlink" title="声明式的事务管理"></a>声明式的事务管理</h3><h4 id="TransactionProxyFactoryBean"><a href="#TransactionProxyFactoryBean" class="headerlink" title="TransactionProxyFactoryBean"></a>TransactionProxyFactoryBean</h4><p>需要为每个进行事务管理的类，配置一个<code>TransactionProxyFactoryBean</code>进行增强处理</p>
<h4 id="基于AspectJ的AOP方式（xml）"><a href="#基于AspectJ的AOP方式（xml）" class="headerlink" title="基于AspectJ的AOP方式（xml）"></a>基于AspectJ的AOP方式（xml）</h4><p>早期纯粹的<code>spring mvc</code>配置形式，一旦配置好以后不需要修改任何代码</p>
<h4 id="基于-Transactional注解方式"><a href="#基于-Transactional注解方式" class="headerlink" title="基于@Transactional注解方式"></a>基于<code>@Transactional</code>注解方式</h4><p>现在<code>spring boot</code>常用方式，只需要在需要事务处理的类或者方法添加<code>@Transactional</code>。下面使用注解方式简单做一个转账的事务模拟。</p>
<h2 id="使用转账模拟事务管理"><a href="#使用转账模拟事务管理" class="headerlink" title="使用转账模拟事务管理"></a>使用转账模拟事务管理</h2><p>使用转账模拟一下事务处理，这里演示两种操作数据库的方式，用于对比查看</p>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><pre class=" language-shell"><code class="language-shell">➜  example-transaction git:(master) ✗ tree
.
├── example-transaction.iml
├── pom.xml
└── src
    ├── main
    │&nbsp;&nbsp; ├── java
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── com
    │&nbsp;&nbsp; │&nbsp;&nbsp;     └── xiaozhangge
    │&nbsp;&nbsp; │&nbsp;&nbsp;         └── transfer
    │&nbsp;&nbsp; │&nbsp;&nbsp;             ├── TransferApplication.java
    │&nbsp;&nbsp; │&nbsp;&nbsp;             ├── entity
    │&nbsp;&nbsp; │&nbsp;&nbsp;             │&nbsp;&nbsp; └── TransferAccount.java
    │&nbsp;&nbsp; │&nbsp;&nbsp;             ├── jpa
    │&nbsp;&nbsp; │&nbsp;&nbsp;             │&nbsp;&nbsp; └── TransferRepository.java
    │&nbsp;&nbsp; │&nbsp;&nbsp;             ├── mapper
    │&nbsp;&nbsp; │&nbsp;&nbsp;             │&nbsp;&nbsp; └── TransferMapper.java
    │&nbsp;&nbsp; │&nbsp;&nbsp;             └── service
    │&nbsp;&nbsp; │&nbsp;&nbsp;                 ├── TransferService.java
    │&nbsp;&nbsp; │&nbsp;&nbsp;                 └── impl
    │&nbsp;&nbsp; │&nbsp;&nbsp;                     └── TransferServiceImpl.java
    │&nbsp;&nbsp; └── resources
    │&nbsp;&nbsp;     ├── application.yml
    │&nbsp;&nbsp;     └── transfer.sql
    └── test
        └── java
            └── com
                └── xiaozhangge
                    └── transfer
                        └── TransferApplicationTests.java</code></pre>
<h3 id="新建数据库表"><a href="#新建数据库表" class="headerlink" title="新建数据库表"></a>新建数据库表</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> transfer_account<span class="token punctuation">;</span>

<span class="token keyword">create</span> <span class="token keyword">table</span> transfer_account
<span class="token punctuation">(</span>
    id    <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    name  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">unique</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    money <span class="token keyword">float</span> <span class="token keyword">default</span> <span class="token boolean">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> transfer_account <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> money<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'jack.zhang'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> transfer_account <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> money<span class="token punctuation">)</span>
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'kevin.yu'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span>
<span class="token keyword">from</span> transfer_account<span class="token punctuation">;</span></code></pre>
<h3 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1.tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre>
<h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/transfer<span class="token punctuation">?</span>characterEncoding=utf8<span class="token important">&amp;useSSL</span>=false<span class="token important">&amp;allowMultiQueries</span>=true
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> MySQL@123
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">hikari</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># http://blog.didispace.com/Springboot-2-0-HikariCP-default-reason/</span>
      <span class="token key atrule">minimum-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">maximum-pool-size</span><span class="token punctuation">:</span> <span class="token number">20</span>
      <span class="token key atrule">auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">idle-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
      <span class="token key atrule">pool-name</span><span class="token punctuation">:</span> TransferHikariCP
      <span class="token key atrule">max-lifetime</span><span class="token punctuation">:</span> <span class="token number">1800000</span>
      <span class="token key atrule">connection-timeout</span><span class="token punctuation">:</span> <span class="token number">30000</span>
      <span class="token key atrule">connection-test-query</span><span class="token punctuation">:</span> SELECT 1
  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>
    <span class="token key atrule">database-platform</span><span class="token punctuation">:</span> org.hibernate.dialect.MySQL57Dialect
    <span class="token key atrule">open-in-view</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>
      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update
    <span class="token key atrule">properties</span><span class="token punctuation">:</span>
      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>
        <span class="token key atrule">use_sql_comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">com.xiaozhangge.transfer.mapper</span><span class="token punctuation">:</span> debug
</code></pre>
<h3 id="Jpa操作数据库"><a href="#Jpa操作数据库" class="headerlink" title="Jpa操作数据库"></a>Jpa操作数据库</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>jpa<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>TransferAccount<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>JpaRepository<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>Modifying<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>Query<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>query<span class="token punctuation">.</span>Param<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/2/16.
 */</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransferRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>TransferAccount<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * @param in    转入人
     * @param money 金额
     */</span>
    <span class="token annotation punctuation">@Modifying</span>
    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"update transfer_account set money = money + ?2 where name = ?1"</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">inMoney</span><span class="token punctuation">(</span>String in<span class="token punctuation">,</span> <span class="token keyword">float</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * @param out   转出人
     * @param money 金额
     */</span>
    <span class="token annotation punctuation">@Modifying</span>
    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"update transfer_account set money = money - :money where name = :name"</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">outMoney</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String out<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token keyword">float</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="业务层模拟一个转账操作"><a href="#业务层模拟一个转账操作" class="headerlink" title="业务层模拟一个转账操作"></a>业务层模拟一个转账操作</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>TransferRepository<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>TransferMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TransferService<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>support<span class="token punctuation">.</span>TransactionTemplate<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/2/16.
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransferServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TransferService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TransferRepository transferRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TransferMapper transferMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TransactionTemplate transactionTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String in<span class="token punctuation">,</span> String out<span class="token punctuation">,</span> <span class="token keyword">float</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 这里使用的是jpa操作数据库</span>
        transferRepository<span class="token punctuation">.</span><span class="token function">outMoney</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
        transferRepository<span class="token punctuation">.</span><span class="token function">inMoney</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="新建测试类"><a href="#新建测试类" class="headerlink" title="新建测试类"></a>新建测试类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TransferService<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Ignore<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringRunner<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/2/16.
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Ignore</span>
<span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span><span class="token function">RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">SpringBootTest</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> TransferApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransferApplicationTests</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TransferService transferService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        transferService<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token string">"jack.zhang"</span><span class="token punctuation">,</span> <span class="token string">"kevin.yu"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>但我们运行时，会抛出如下异常：</p>
<pre class=" language-verilog"><code class="language-verilog">
org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>InvalidDataAccessApiUsageException<span class="token punctuation">:</span> Executing an update<span class="token operator">/</span>delete query<span class="token punctuation">;</span> nested exception is javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>TransactionRequiredException<span class="token punctuation">:</span> Executing an update<span class="token operator">/</span>delete query

    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>EntityManagerFactoryUtils<span class="token punctuation">.</span><span class="token function">convertJpaAccessExceptionIfPossible</span><span class="token punctuation">(</span>EntityManagerFactoryUtils<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">403</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>vendor<span class="token punctuation">.</span>HibernateJpaDialect<span class="token punctuation">.</span><span class="token function">translateExceptionIfPossible</span><span class="token punctuation">(</span>HibernateJpaDialect<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">257</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>AbstractEntityManagerFactoryBean<span class="token punctuation">.</span><span class="token function">translateExceptionIfPossible</span><span class="token punctuation">(</span>AbstractEntityManagerFactoryBean<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">528</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ChainedPersistenceExceptionTranslator<span class="token punctuation">.</span><span class="token function">translateExceptionIfPossible</span><span class="token punctuation">(</span>ChainedPersistenceExceptionTranslator<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">61</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>support<span class="token punctuation">.</span>DataAccessUtils<span class="token punctuation">.</span><span class="token function">translateIfNecessary</span><span class="token punctuation">(</span>DataAccessUtils<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">242</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>support<span class="token punctuation">.</span>PersistenceExceptionTranslationInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>PersistenceExceptionTranslationInterceptor<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">153</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">186</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>support<span class="token punctuation">.</span>CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>CrudMethodMetadataPostProcessor<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">149</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">186</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>ExposeInvocationInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>ExposeInvocationInterceptor<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">93</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">186</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>JdkDynamicAopProxy<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>JdkDynamicAopProxy<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">212</span><span class="token punctuation">)</span>
    at com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span><span class="token property">$Proxy99</span><span class="token punctuation">.</span><span class="token function">outMoney</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>
    at com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>TransferServiceImpl<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>TransferServiceImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">)</span>
    at com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>TransferApplicationTests<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span>TransferApplicationTests<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">)</span>
    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>
    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">62</span><span class="token punctuation">)</span>
    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">)</span>
    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">498</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>model<span class="token punctuation">.</span>FrameworkMethod$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">runReflectiveCall</span><span class="token punctuation">(</span>FrameworkMethod<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ReflectiveCallable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ReflectiveCallable<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>model<span class="token punctuation">.</span>FrameworkMethod<span class="token punctuation">.</span><span class="token function">invokeExplosively</span><span class="token punctuation">(</span>FrameworkMethod<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">47</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>statements<span class="token punctuation">.</span>InvokeMethod<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>InvokeMethod<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>statements<span class="token punctuation">.</span>RunBeforeTestExecutionCallbacks<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>RunBeforeTestExecutionCallbacks<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">74</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>statements<span class="token punctuation">.</span>RunAfterTestExecutionCallbacks<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>RunAfterTestExecutionCallbacks<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">84</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>statements<span class="token punctuation">.</span>RunBeforeTestMethodCallbacks<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>RunBeforeTestMethodCallbacks<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">75</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>statements<span class="token punctuation">.</span>RunAfterTestMethodCallbacks<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>RunAfterTestMethodCallbacks<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">86</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>statements<span class="token punctuation">.</span>SpringRepeat<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>SpringRepeat<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">84</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>ParentRunner<span class="token punctuation">.</span><span class="token function">runLeaf</span><span class="token punctuation">(</span>ParentRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">325</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token function">runChild</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">251</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token function">runChild</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">97</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>ParentRunner$<span class="token number">3</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ParentRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">290</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>ParentRunner$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>ParentRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">71</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>ParentRunner<span class="token punctuation">.</span><span class="token function">runChildren</span><span class="token punctuation">(</span>ParentRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">288</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>ParentRunner<span class="token punctuation">.</span>access$<span class="token function">000</span><span class="token punctuation">(</span>ParentRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>ParentRunner$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>ParentRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">268</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>statements<span class="token punctuation">.</span>RunBeforeTestClassCallbacks<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>RunBeforeTestClassCallbacks<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">61</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>statements<span class="token punctuation">.</span>RunAfterTestClassCallbacks<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>RunAfterTestClassCallbacks<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">70</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runners<span class="token punctuation">.</span>ParentRunner<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ParentRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">363</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token keyword">context</span><span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">190</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>JUnitCore<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>JUnitCore<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">137</span><span class="token punctuation">)</span>
    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>JUnit4IdeaTestRunner<span class="token punctuation">.</span><span class="token function">startRunnerWithArgs</span><span class="token punctuation">(</span>JUnit4IdeaTestRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">68</span><span class="token punctuation">)</span>
    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>IdeaTestRunner$Repeater<span class="token punctuation">.</span><span class="token function">startRunnerWithArgs</span><span class="token punctuation">(</span>IdeaTestRunner<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">)</span>
    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>JUnitStarter<span class="token punctuation">.</span><span class="token function">prepareStreamsAndStart</span><span class="token punctuation">(</span>JUnitStarter<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">230</span><span class="token punctuation">)</span>
    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>JUnitStarter<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>JUnitStarter<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">)</span>
Caused by<span class="token punctuation">:</span> javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span>TransactionRequiredException<span class="token punctuation">:</span> Executing an update<span class="token operator">/</span>delete query
    at org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>AbstractSharedSessionContract<span class="token punctuation">.</span><span class="token function">checkTransactionNeededForUpdateOperation</span><span class="token punctuation">(</span>AbstractSharedSessionContract<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">409</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>query<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>AbstractProducedQuery<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>AbstractProducedQuery<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">1601</span><span class="token punctuation">)</span>
    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>
    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">62</span><span class="token punctuation">)</span>
    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">)</span>
    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">498</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>SharedEntityManagerCreator$DeferredQueryInvocationHandler<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>SharedEntityManagerCreator<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">409</span><span class="token punctuation">)</span>
    at com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span><span class="token property">$Proxy115</span><span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>Unknown Source<span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>query<span class="token punctuation">.</span>JpaQueryExecution$ModifyingExecution<span class="token punctuation">.</span><span class="token function">doExecute</span><span class="token punctuation">(</span>JpaQueryExecution<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">238</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>query<span class="token punctuation">.</span>JpaQueryExecution<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>JpaQueryExecution<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">88</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>query<span class="token punctuation">.</span>AbstractJpaQuery<span class="token punctuation">.</span><span class="token function">doExecute</span><span class="token punctuation">(</span>AbstractJpaQuery<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">154</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>query<span class="token punctuation">.</span>AbstractJpaQuery<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>AbstractJpaQuery<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">142</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>core<span class="token punctuation">.</span>support<span class="token punctuation">.</span>RepositoryFactorySupport$QueryExecutorMethodInterceptor<span class="token punctuation">.</span><span class="token function">doInvoke</span><span class="token punctuation">(</span>RepositoryFactorySupport<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">618</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>core<span class="token punctuation">.</span>support<span class="token punctuation">.</span>RepositoryFactorySupport$QueryExecutorMethodInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>RepositoryFactorySupport<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">605</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">186</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>projection<span class="token punctuation">.</span>DefaultMethodInvokingMethodInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DefaultMethodInvokingMethodInterceptor<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">186</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>TransactionAspectSupport<span class="token punctuation">.</span><span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span>TransactionAspectSupport<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">366</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>TransactionInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>TransactionInterceptor<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">99</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>ReflectiveMethodInvocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>ReflectiveMethodInvocation<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">186</span><span class="token punctuation">)</span>
    at org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>support<span class="token punctuation">.</span>PersistenceExceptionTranslationInterceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>PersistenceExceptionTranslationInterceptor<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">139</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">39</span> more

</code></pre>
<p>那是因为使用jpa的时候，涉及到<code>@Modifying</code>就表示是增删改操作，那么就必须添加<code>@Transactional</code>，当然如果是单纯的查询就不需要了（spring考虑的挺全面）。当加上<code>@Transactional</code>就可以正常运行了。</p>
<p>我们可以在代码上手动给他添加一个异常，再来看结果。这里我们加了一个<code>int i = 1 / 0;</code>会产生一个除以0的异常，因为有<code>@Transactional</code>的存在，整个执行是不能成功的。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String in<span class="token punctuation">,</span> String out<span class="token punctuation">,</span> <span class="token keyword">float</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 这里使用的是jpa操作数据库</span>
  transferRepository<span class="token punctuation">.</span><span class="token function">outMoney</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
  transferRepository<span class="token punctuation">.</span><span class="token function">inMoney</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="MyBatis-Plus操作数据库"><a href="#MyBatis-Plus操作数据库" class="headerlink" title="MyBatis-Plus操作数据库"></a>MyBatis-Plus操作数据库</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>BaseMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>TransferAccount<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Param<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Update<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Repository<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/2/16.
 */</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransferMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>TransferAccount<span class="token operator">></span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * @param in    转入人
     * @param money 金额
     */</span>
    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update transfer_account set money = money + #{money} where name = #{name}"</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">inMoney</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String in<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token keyword">float</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * @param out   转出人
     * @param money 金额
     */</span>
    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update transfer_account set money = money - #{money} where name = #{name}"</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">outMoney</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String out<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token keyword">float</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="业务层模拟一个转账操作-1"><a href="#业务层模拟一个转账操作-1" class="headerlink" title="业务层模拟一个转账操作"></a>业务层模拟一个转账操作</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>TransferRepository<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>TransferMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>xiaozhangge<span class="token punctuation">.</span>transfer<span class="token punctuation">.</span>service<span class="token punctuation">.</span>TransferService<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>support<span class="token punctuation">.</span>TransactionTemplate<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * Created by xiaozhangge on 2020/2/16.
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransferServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TransferService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TransferRepository transferRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TransferMapper transferMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> TransactionTemplate transactionTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String in<span class="token punctuation">,</span> String out<span class="token punctuation">,</span> <span class="token keyword">float</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 这里使用的是MyBatis-Plus操作数据库</span>
        transferMapper<span class="token punctuation">.</span><span class="token function">outMoney</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// int i = 1 / 0;</span>
        transferMapper<span class="token punctuation">.</span><span class="token function">inMoney</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>在没有异常情况下，就算不加<code> @Transactional</code>是可以直接操作成功的，但是如果 <code>int i = 1 / 0;</code>存在，<code>outMoney</code>方法还是可以正常执行的，这样就会造成钱被扣了但是对方却没有收到的情况，所以这时候就需要添加<code> @Transactional</code>让他进行事务处理，这里mybatis就没有jpa处理的好了。</p>
<h2 id="Transactional-介绍"><a href="#Transactional-介绍" class="headerlink" title="@Transactional 介绍"></a>@Transactional 介绍</h2><table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>readOnly</strong></td>
<td>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。例如：@Transactional(readOnly=true)</td>
</tr>
<tr>
<td><strong>rollbackFor</strong></td>
<td>该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：指定单一异常类：@Transactional(rollbackFor=RuntimeException.class)指定多个异常类：@Transactional(rollbackFor={RuntimeException.class, Exception.class})</td>
</tr>
<tr>
<td><strong>rollbackForClassName</strong></td>
<td>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：指定单一异常类名称：@Transactional(rollbackForClassName=”RuntimeException”)指定多个异常类名称：@Transactional(rollbackForClassName={“RuntimeException”,”Exception”})</td>
</tr>
<tr>
<td><strong>noRollbackFor</strong></td>
<td>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：指定单一异常类：@Transactional(noRollbackFor=RuntimeException.class)指定多个异常类：@Transactional(noRollbackFor={RuntimeException.class, Exception.class})</td>
</tr>
<tr>
<td><strong>noRollbackForClassName</strong></td>
<td>该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：指定单一异常类名称：@Transactional(noRollbackForClassName=”RuntimeException”)指定多个异常类名称：@Transactional(noRollbackForClassName={“RuntimeException”,”Exception”})</td>
</tr>
<tr>
<td><strong>propagation</strong></td>
<td>该属性用于设置事务的传播行为，具体取值可参考表6-7。例如：@Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)</td>
</tr>
<tr>
<td><strong>isolation</strong></td>
<td>该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置</td>
</tr>
<tr>
<td><strong>timeout</strong></td>
<td>该属性用于设置事务的超时秒数，默认值为-1表示永不超时</td>
</tr>
</tbody></table>
<p>以上参考：<a href="https://www.cnblogs.com/caoyc/p/5632963.html"><code>spring</code>事务注解</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上介绍了一下spring中的事务接口和事务的传播行为以及隔离级别，也通过转账的例子演示了有事务和没有事务的区别，再有了<code>spring boot</code>以后，基本都是使用注解的形式进行事务处理。</p>
<p>源码地址：<a href="https://github.com/xiaomozhang/personal-life-example/tree/master/example-transaction">https://github.com/xiaomozhang/personal-life-example/tree/master/example-transaction</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>spring5源码 - IOC加载过程 Bean的生命周期</title>
    <url>/2021/10/14/spring5-source-code-bean-life-cycle/</url>
    <content><![CDATA[<ul>
<li><a href="#%E7%9B%AE%E5%BD%95">目录</a><ul>
<li><a href="#spring%E6%95%B4%E4%BD%93%E8%84%89%E7%BB%9C">spring整体脉络</a></li>
<li><a href="#%E6%8F%8F%E8%BF%B0BeanFactory">描述BeanFactory</a></li>
<li><a href="#BeanFactory%E5%92%8CApplicationContext%E7%9A%84%E5%8C%BA%E5%88%AB">BeanFactory和ApplicationContext的区别</a></li>
<li><a href="#%E7%AE%80%E8%BF%B0SpringIoC%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B">简述SpringIoC的加载过程</a></li>
<li><a href="#%E7%AE%80%E8%BF%B0Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">简述Bean的生命周期</a>  </li>
<li><a href="#Spring%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%89%A9%E5%B1%95%E6%8E%A5%E5%8F%A3%E5%8F%8A%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6">Spring中有哪些扩展接口及调用机制</a>  <h3 id="一-spring源码整体脉络介绍"><a href="#一-spring源码整体脉络介绍" class="headerlink" title="一. spring源码整体脉络介绍"></a>一. spring源码整体脉络介绍</h3><h4 id="1-1-什么是IOC"><a href="#1-1-什么是IOC" class="headerlink" title="1.1. 什么是IOC"></a>1.1. 什么是IOC</h4>ioc是控制反转, 这是一种设计理念, 用来解决的是层和层之间, 类和类之间的耦合问题.</li>
</ul>
</li>
</ul>
<p>比如,现在有A, B两个类, 在A类中引用了B类. 那么如果有一天, B类要被替换掉, 我们会怎么办呢?如果B类被引用了100次, 我们要替换100次?</p>
<p>现在呢, A是直接调用B, 如果我们间接的调用B, 将B包装起来, 如果以后将B换成C, 只需要在包装类里面替换就可以了. 我们不需要修改A类. 这就是控制反转.</p>
<p>Spring使用了ioc, Spring.ioc(A, B) 将A和B的引用都存在ioc中, spring会帮我们维护好, 完全不用担心.</p>
<p>当我们在A中要使用B的时候, 使用B对应的接口, 然后使用@Autowired注解</p>
<pre class=" language-java"><code class="language-java">A <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Autowired</span>
   <span class="token keyword">private</span> IB b<span class="token punctuation">;</span>  
<span class="token punctuation">}</span></code></pre>
<p>什么时候把B换掉了, 不痛不痒的, 只需要把新的类放到IoC中就可以了.</p>
<h4 id="1-2-Spring源码的整体脉络梳理"><a href="#1-2-Spring源码的整体脉络梳理" class="headerlink" title="1.2. Spring源码的整体脉络梳理"></a>1.2. Spring源码的整体脉络梳理</h4><p>Spring IoC是一个容器, 在Spring Ioc中维护了许多Bean</p>
<p>那这些bean是如何被注册到IoC中的呢? 换句话说, 我们自定义的类, 是如何作为一个bean交给IoC容器去管理的呢?</p>
<p>先来回忆,我们在开发spring的时候的步骤:</p>
<h5 id="第一步-配置类-配置类可以使用的方式通常由"><a href="#第一步-配置类-配置类可以使用的方式通常由" class="headerlink" title="第一步: 配置类. 配置类可以使用的方式通常由"></a>第一步: 配置类. 配置类可以使用的方式通常由</h5><ul>
<li>xml配置</li>
<li>注解配置</li>
<li>javaconfig方式配置</li>
</ul>
<h5 id="第二步-加载spring上下文"><a href="#第二步-加载spring上下文" class="headerlink" title="第二步: 加载spring上下文"></a>第二步: 加载spring上下文</h5><ul>
<li>如果是xml, 则new ClassPathXmlApplicationContext(“xml”);</li>
<li>如果是注解配置: 则new AnnotationConfigApplicationContext(config.class)</li>
</ul>
<h5 id="第三步-getBean"><a href="#第三步-getBean" class="headerlink" title="第三步: getBean()"></a>第三步: getBean()</h5><ul>
<li>我们会讲自定义的类, 通过xml或者注解的方式注入到ioc容器中.</li>
</ul>
<p>在这一步, 会将xml或注解中指定的类注入到IoC容器中. </p>
<h5 id="1-2-1-那么-到底是如何将一个类注入到ioc中的呢"><a href="#1-2-1-那么-到底是如何将一个类注入到ioc中的呢" class="headerlink" title="1.2.1 那么, 到底是如何将一个类注入到ioc中的呢?"></a>1.2.1 那么, 到底是如何将一个类注入到ioc中的呢?</h5><p>下面就来梳理一下整个过程.</p>
<h6 id="第一问-一个类要生产成一个Bean-最重要最核心的类是什么"><a href="#第一问-一个类要生产成一个Bean-最重要最核心的类是什么" class="headerlink" title="第一问: 一个类要生产成一个Bean, 最重要最核心的类是什么?"></a>第一问: 一个类要生产成一个Bean, 最重要最核心的类是什么?</h6><p>是BeanFactory</p>
<p>第二问: BeanFactory是什么呢?<br>BeanFactory是Spring顶层的核心接口–使用了简单工厂模式. 通常都是根据一个名字生产一个实例, 根据传入的唯一的标志来获得bean对象, 但具体是穿入参数后创建, 还是穿入参数前创建, 这个要根据 具体情况而定, 根据名字或类型生产不同的bean.</p>
<h6 id="一句话总结-BeanFactory的责任就是生产Bean"><a href="#一句话总结-BeanFactory的责任就是生产Bean" class="headerlink" title="一句话总结: BeanFactory的责任就是生产Bean"></a>一句话总结: BeanFactory的责任就是生产Bean</h6><p>来看下面这段代码:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span>
        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"***"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这段代码实现的功能是, 读取当前文件所在目录及其子目录中的文件, 然后获取指定名称的bean, 整个流程如下图所示:<br><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-beanFactory-init.png" alt="bean-life-cycle-beanFactory-init.png"></p>
<blockquote>
<p>首先, 通过ClassPathXmlApplicationContext或者AnnotationConfigApplicationContext去读取配置,<br>然后, 将其交给BeanFactory.<br>第三. BeanFactory调用getBean()方法, 将Bean注入到IoC容器中<br>我们发现, 配置的读取, 可能是xml方式, 也可能是annotation的方式, 不同的方式读取应该使用的是不同的工具. 那么这些工具读取的结果应该是统一的, 然后才能交给BeanFactory去处理.</p>
</blockquote>
<p>因为在BeanFactory中是不会对这些异同点进行处理的. BeanFactory的作用只有一个, 就是个生产Bean.</p>
<h5 id="1-2-2-那么-不同的工具读取配置是如何统一的呢"><a href="#1-2-2-那么-不同的工具读取配置是如何统一的呢" class="headerlink" title="1.2.2 那么, 不同的工具读取配置是如何统一的呢?"></a>1.2.2 那么, 不同的工具读取配置是如何统一的呢?</h5><p>我们知道,读取配置这一块, 应该会有一个不同的实现. 将xml和注解方式读取成统一的东西, 放入到beanFactory中. 这个东西是谁呢?就是BeanDefinition(Bean定义)<br>什么意思呢? 如下图:<br><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-beanFactory-beanDefinition.png" alt="life-cycle-beanFactory-beanDefinition.png"><br>看绿色框框住的部分. 这个含义是: 通过不同的工具, 可能是xmlApplicationContext, 可能是annotationApplicationContext工具 读取的配置, 最后都会构造成BeanDefinition对象. 然后将BeanDefinition传递给BeanFactory, BeanFactory统一处理BeanDefinition对象, 调用getBean()方法, 将其放入IoC容器中.</p>
<h5 id="1-2-3-那么又是是如何读取配置统一构造成BeanDefinition的呢"><a href="#1-2-3-那么又是是如何读取配置统一构造成BeanDefinition的呢" class="headerlink" title="1.2.3 那么又是是如何读取配置统一构造成BeanDefinition的呢?"></a>1.2.3 那么又是是如何读取配置统一构造成BeanDefinition的呢?</h5><p>我们来举个例子, 现在有一个人, 比如说我刚买了一个房子, 我要装修. 需要一个衣柜, 这时候, 我会找到一个衣柜店. 然后告诉他我的需求, 柜子的颜色, 款式格式什么样. 然后衣柜店记录我的需求, 这个时候, 他不会自己生产, 他会通知工厂,<br> 让工厂来生产. 工厂按照什么生产呢, 衣柜店有一个设计师, 他们的设计师. 会按照我的需求设计出一张图纸. 然后将图纸交给工厂. 工厂按照图纸要求生产Bean.<br>整个过程如下图:<br><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-beanDefinition-process.png" alt="life-cycle-beanDefinition-process.png"><br>入口是”我”</p>
<ul>
<li>1.我有一个需求, 打一个柜子, 找到衣柜店</li>
<li>2.我告诉衣柜店我的需求, 柜子的颜色, 款式, 然后衣柜店的设计师按照我的要求 ,设计出一张图纸</li>
<li>3.衣柜店将图纸给到工厂, 工厂按照图纸生产柜子</li>
</ul>
<p>这是制造衣柜的过程. 其中在画图纸的时候, 画一张就给工厂给一张, 这样效率太低了. 我们可以画了n张, 一起给工厂. 所以, 在设计图纸这块是一个容器, 存放多张图纸</p>
<p>后面,如果我还想定制一个橱柜店. 那么, 就告诉设计师我的橱柜的颜色,款式, 就可以了. 流程和上面都是一样的.</p>
<h6 id="整个这个过程-就类似于我们的bean生产的过程"><a href="#整个这个过程-就类似于我们的bean生产的过程" class="headerlink" title="整个这个过程, 就类似于我们的bean生产的过程"></a>整个这个过程, 就类似于我们的bean生产的过程</h6><ul>
<li>定义了一个带有@Component注解的类, 我找到衣柜店, 衣柜店就类似于ApplicationContext.</li>
<li>我告诉ApplicationContext我的需求, 我要懒加载@Lazy, 设置单例模式还是多例模式@Scope. 对应的就是定制柜子的颜色,款式. 然后衣柜店里的设计师BeanDefinitionRegistry根据我的需求设计出图纸, 也就是构造成BeanDefinition. 不同的BeanDefinitionRegistry设计出不同的BeanDefinition, 然后将他们都放在容器中.</li>
<li>衣柜店ApplicationContext统一将一摞图纸BeanDefinitionMap交给工厂, 然后工厂按照要求生产Bean, 然后将生成的bean放入到IoC容器中.</li>
</ul>
<p>**这是一个带有@Component的类被加载的过程. **</p>
<p>衣柜店要要想生意好, 那么他要去拉活呀, 所以还需要好的销售. 销售要去扫楼盘, 去联系, 哪些人有装修的需求. 挨个询问.</p>
<p>可是问了100个人, 可能只有10个人有装修的需求. 于是还要有一个接待, 这个接待要联系客户, 看看哪些是有意向的客户, 将其筛选出来. 然后定制家具.</p>
<p>这里多了两类人: 销售和接待. 具体工作如下.<br><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-BeanDefinitionScanner-process.png" alt="life-cycle-BeanDefinitionScanner-process.png"><br>销售就相当于我们的BeanDefinitionReader, 他的作用是去扫楼盘, 找到潜在客户. 对应的就是BeanDefinitionReader去读取xml配置或者Annotation注解.</p>
<p>xml中的配置有很多, 注解也有很多, 并不都是我们的目标. 于是有了接待</p>
<p>接待要去扫描所有潜在客户. 将有意向的客户扫描出来. 这就类似于我们的BeanDefinitionScanner, 去扫描潜在客户, 最后将带有@Component注解的类筛选出来</p>
<p>这就是后面需要定制家具的客户了</p>
<blockquote>
<p>BeanDefinitionReader对应的就去读取配置类, 看看有哪些需求需要搞装修.<br>它本身也是一个抽象类, 可以看到他有AnnotationBeanDefinitionReader和XmlBeanDefinitionReader<br>我们配置了配置包, 去扫描这个包下所有的类, 然后将扫描到的所有的类交给BeanDefinitionScanner, 它会去过滤带有@Component的类.<br>在和上面的流程连接起来, 就是整个配置文件被加载到IoC的过程了. </p>
</blockquote>
<h4 id="1-3-ApplicationContext和FactoryBean的区别"><a href="#1-3-ApplicationContext和FactoryBean的区别" class="headerlink" title="1.3. ApplicationContext和FactoryBean的区别"></a>1.3. ApplicationContext和FactoryBean的区别</h4><ul>
<li>FactoryBean的功能就是生产bean. 他生产bean是根据BeanDefinition来生产的. 所以, 一次只能生产一个</li>
<li>ApplicationContext有两种. 一种是xmlApplicationContext, 另一种是annotationApplicationContext, 他传入的参数是一个配置文件. 也就是可以加载某个目录下所有带有@Component的类</li>
</ul>
<p>他们两个都各有使用场景. 使用ApplicationContext的居多.</p>
<p>另一个区别: 就是后面会说到的, ApplicationContext有两个扩展接口, 可以用来和外部集成. 比如和MyBatis集成.</p>
<h4 id="1-4-Bean的生命周期"><a href="#1-4-Bean的生命周期" class="headerlink" title="1.4. Bean的生命周期"></a>1.4. Bean的生命周期</h4><p><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-been-life-cycle.png" alt="been-life-cycle.png"></p>
<h6 id="如上图-beanFactory拿到BeanDefinition-直接调用getBean-就生产Bean了么"><a href="#如上图-beanFactory拿到BeanDefinition-直接调用getBean-就生产Bean了么" class="headerlink" title="如上图, beanFactory拿到BeanDefinition, 直接调用getBean()就生产Bean了么?"></a>如上图, beanFactory拿到BeanDefinition, 直接调用getBean()就生产Bean了么?</h6><p>不是的, 生产Bean是有一个流程的. 下面我们来看看Bean的生命周期</p>
<blockquote>
<p>第一步: 实例化. bean实例化的时候从BeanDefinition中得到Bean的名字, 然后通过反射机制, 将Bean实例化. 实例化以后, 这是还只是个壳子, 里面什么都没有.<br>第二步: 填充属性. 经过初始化以后, bean的壳子就有了, bean里面有哪些属性呢? 在这一步填充<br>第三步: 初始化. 初始化的时候, 会调用initMethod()初始化方法, destory()初始化结束方法<br>这个时候, 类就被构造好了.<br>第四步: 构造好了的类, 会被放到IoC的一个Map中. Map的key是beanName, value是bean实例. 这个Map是一个单例池, 也就是我们说的一级缓存<br>第五步: 我们就可以通过getBean(“user”), 从单例池中获取雷鸣是user的类了.</p>
</blockquote>
<h6 id="在构造bean的过程中-还会有很多细节的问题-比如循环依赖"><a href="#在构造bean的过程中-还会有很多细节的问题-比如循环依赖" class="headerlink" title="在构造bean的过程中, 还会有很多细节的问题, 比如循环依赖."></a>在构造bean的过程中, 还会有很多细节的问题, 比如循环依赖.</h6><p><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-how-to-solve-circular-dependencies.png" alt="how-to-solve-circular-dependencies.png"><br>A类里面调用了B类, 所以BeanFactory在构造A的时候, 会去构造B. 然后在构造B的时候, 发现, B还依赖了A. 这样, 就是循环依赖. 这是不可以的.</p>
<p>Spring是如何解决循环依赖的问题的呢?</p>
<p>设置出口. 比如A在构造的过程中, 那么设置一个标记, 正在构造中. 然后构造B, B在构造的过程中应用了A, 这时候, 有趣构造A, 然后发现A正在构造中, 那么, 就不会再次构造A了.</p>
<p>后面还会详细讲解Spring是如何解决循环引用的. 这里我们需要知道的是: Spring使用的是三级缓存来解决循环引用的问题</p>
<p>其实, bean是存在一级缓存里面, 循环引用使用的是三级缓存来解决的. 其实, 一、二、三级缓存就是Map。</p>
<h4 id="1-5-Spring中的扩展接口"><a href="#1-5-Spring中的扩展接口" class="headerlink" title="1.5. Spring中的扩展接口"></a>1.5. Spring中的扩展接口</h4><p>有两个非常重要的扩展接口. BeanFactoryPostProcessor(Bean工厂的后置处理器) 和 BeanDefinitionRegistryPostProcessor</p>
<p>这两个接口是干什么的呢?<br><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-beanFactoryPostProcessor-beanDefinitionRegistryPostProcessor.png" alt="beanFactoryPostProcessor-beanDefinitionRegistryPostProcessor.png"></p>
<p>我们在这个图里面, 看到了设计师要设计出图纸, 然后把图纸交给工厂去生产. 那么设计师设计出来的图纸, 有没有可能被修改呢?</p>
<p>当然是可以被修改的. 只要还没有交给工厂, 就可以修改.</p>
<h6 id="BeanFactoryPostProcessor-Bean工厂的后置处理器-的作用就是修改BeanDefinition"><a href="#BeanFactoryPostProcessor-Bean工厂的后置处理器-的作用就是修改BeanDefinition" class="headerlink" title="BeanFactoryPostProcessor(Bean工厂的后置处理器)的作用就是修改BeanDefinition."></a>BeanFactoryPostProcessor(Bean工厂的后置处理器)的作用就是修改BeanDefinition.</h6><ul>
<li>BeanFactoryPostProcessor: 修改BeanDefinition.<br>是一个接口, 我们的类可以实现这个接口, 然后重写里面的方法</li>
</ul>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefinedPost</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 重写Bean工厂的后置处理器
     * @param beanFactory
     * @throws BeansException
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// beanFactory 拿到工厂了, 就可以获取某一个Bean定义了</span>
        GenericBeanDefinition car <span class="token operator">=</span> <span class="token punctuation">(</span>GenericBeanDefinition<span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"Car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 拿到了car, 然后修改了Car的类名为com.example.tulingcourse.Tank. 那么后面在获取的Bean里面, 将其转换为Car, 就会报错了</span>
        car<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span><span class="token string">"com.example.tulingcourse.Tank"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>第一步: 实现了BeanFactoryPostProcessor接口, 然后需要重写里面的方法</p>
<p>第二步: 我们发现重写方法直接给我们了beanFactory, bean工厂</p>
<p>第三步: 拿到bean工厂, 我们就可以根据名称获取BeanDefinition, 也就是bean定义了.</p>
<p>第四步: 我们修改了bean定义中的类名为Tank.</p>
<p>这时候会发生什么呢? 从bean工厂中构建的car, 取出来以后转换成Car对象, 会报错,</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>


        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　　　
        Car car <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> Car<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里会报错, 因为已经被修改</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>执行流程: 当spring启动的时候, 就会去执行AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(TulingCourseApplication.class);</p>
<p>然后ApplicationContext回去扫描所有实现了BeanFactoryPostProcessor对象的类, 然后执行postProcessBeanFactory方法.</p>
<p>BeanFactoryPostProcessor被使用到的场景非常多, 在集成其他组件的时候, 比如集成mybatis</p>
<h6 id="2-BeanDefinitionRegistryPostProcessor-注册BeanDefinition"><a href="#2-BeanDefinitionRegistryPostProcessor-注册BeanDefinition" class="headerlink" title="2. BeanDefinitionRegistryPostProcessor 注册BeanDefinition"></a>2. BeanDefinitionRegistryPostProcessor 注册BeanDefinition</h6><p>这是一个Bean定义注册的后置处理器.BeanDefinitionRegistryPostProcessor本事是实现了BeanFactoryPostProcessor 接口<br><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-beanDefinitionRegistryPostProcessor.png" alt="life-cycle-beanDefinitionRegistryPostProcessor.png"><br>我们来看个demo</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefinedPost</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">/**
     * 重写Bean工厂的后置处理器
     * @param beanFactory
     * @throws BeansException
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// beanFactory 拿到工厂了, 就可以获取某一个Bean定义了</span>
        GenericBeanDefinition car <span class="token operator">=</span> <span class="token punctuation">(</span>GenericBeanDefinition<span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"Car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 拿到了car, 然后修改了Car的类名为com.example.tulingcourse.Tank. 那么后面在获取的Bean里面, 将其转换为Car, 就会报错了</span>
        car<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span><span class="token string">"com.example.tulingcourse.Tank"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>BeanDefinitionRegistry beanDefinitionRegistry<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>一个类实现了BeanDefinitionRegistryPostProcessor, 需要重写postProcessBeanDefinitionRegistry方法, 这个方法直接将BeanDefinitionRegistry就给我们了.</p>
<p>然后使用beanDefinitionRegistry.registerBeanDefinition(); 就可以添加图纸了</p>
<p>在这里可以注册新的bean, 也可以删除注册的bean. 多注册一个, bean工厂就要多构建一个.</p>
<p>**总结:</p>
<blockquote>
<p>BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessor这两个扩展类是很重要的类, 这对于向外部扩展起到了很大的的作用, 比如: 集成mybatis**</p>
</blockquote>
<p><img src="/images/spring5-source-code-bean-life-cycle/beanFactoryPostProcessor-beanDefinitionRegistryPostProcessor-diffrent.png" alt="beanFactoryPostProcessor-beanDefinitionRegistryPostProcessor-diffrent.png"></p>
<h6 id="BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessor是在ApplicationContext中的两个扩展接口-这也是ApplicationContext和BeanFactory的区别之一-因为有了这两个扩展节点-就可以和外部做集成-比如Mybatis集成-比如-扫描配置类-就是通过-这两个扩展点的方式实现的"><a href="#BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessor是在ApplicationContext中的两个扩展接口-这也是ApplicationContext和BeanFactory的区别之一-因为有了这两个扩展节点-就可以和外部做集成-比如Mybatis集成-比如-扫描配置类-就是通过-这两个扩展点的方式实现的" class="headerlink" title="BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessor是在ApplicationContext中的两个扩展接口. 这也是ApplicationContext和BeanFactory的区别之一, 因为有了这两个扩展节点, 就可以和外部做集成. 比如Mybatis集成. 比如: 扫描配置类, 就是通过 这两个扩展点的方式实现的."></a>BeanFactoryPostProcessor和BeanDefinitionRegistryPostProcessor是在ApplicationContext中的两个扩展接口. 这也是ApplicationContext和BeanFactory的区别之一, 因为有了这两个扩展节点, 就可以和外部做集成. 比如Mybatis集成. 比如: 扫描配置类, 就是通过 这两个扩展点的方式实现的.</h6><p>这个扩展点的作用:</p>
<ul>
<li>除了IoC, 其他的扩展,比如AOP, 和MyBatis集成, 都要用到这两个扩展点. 之所以Spring能够有序不乱的和很多外部组件整合, 都是这两个扩展点的功能</li>
</ul>
<h4 id="1-6-Bean的扩展点"><a href="#1-6-Bean的扩展点" class="headerlink" title="1.6 Bean的扩展点"></a>1.6 Bean的扩展点</h4><p>除了ApplicationContext有扩展点, 在Spring IoC中的bean也有扩展点. BeanPostProcessor(Bean的后置处理器). 如果使用在getBean()之前, 那么可以阻止构建Bean, 还可以自定义构建Bean.</p>
<p>BeanPostProcessor使用的场景有很多. 在Bean实例化之前和之后会被调用. 在填充属性之前和之后也会被调用, 初始化之前和之后也会调用. 有些过程不只调用一次. 整个过程一共会调用9次. 在每一个过程都可以扩展Bean.</p>
<p>思考: Spring加入AOP是如何实现呢?</p>
<p>集成AOP肯定不会和IoC糅合在一块了. AOP就是通过BeanPostProcessor(Bean后置处理器)整合进来的.</p>
<p>AOP的实现方式有两种: 一种是CGLIB, 另一种是JDK.</p>
<p>假如说要进行集成, 会在那个步骤继承呢? 比如要加日志, 使用AOP的方式加. 我们通常是在初始化之后加AOP. 在这里将AOP集成进来.</p>
<p>如上图: 当面试的时候面试官问你, Bean的生命周期, 我们不能只说实例化–&gt;填充属性–&gt;初始化. 还需要说初始化的时候, 还有一些列的aware.</p>
<h4 id="1-7-Spring-IOC的加载过程"><a href="#1-7-Spring-IOC的加载过程" class="headerlink" title="1.7. Spring IOC的加载过程"></a>1.7. Spring IOC的加载过程</h4><p><img src="/images/spring5-source-code-bean-life-cycle/spring5-source-code-bean-life-cycle-spring-ioc-init-process-spring-ioc-init-process.png" alt="spring-ioc-init-process-spring-ioc-init-process.png"><br>对照上图, 我们来简述ioc的加载过程<br>我们将一个类加载成Bean, 不是一步到位的,需要经历一下的过程.</p>
<ul>
<li>使用BeanDefinitionReader加载配置类, 此时是扫描所有的xml文件或者项目中的注解. 这里面有些使我们的目标类, 有些不是</li>
<li>使用BeanDefinitionScanner扫描出我们的目标类.</li>
<li>使用BeanDefinitionRegistry注册bean到BeanDefinitionMap中.<ul>
<li>然后, ApplicationContext可以调用BeanFactoryPostProcessor修改bean定义, 还可以调用BeanDefinitionRegistryPostProcessor注册bean定义</li>
<li>将BeanDefinition交给BeanFactory处理, BeanFactory调用getBean()生成Bean或者调用Bean(getBean()有两个功能).</li>
<li>成产bean的时候, 首先会实例化, 然后填充属性(主要是读取@Autowire, @Value等注解). 在初始化Bean, 这里会调用initMethod()方法和初始化销毁方法destroy(). 初始化的时候还会调用一堆的Aware, 而且在bean生成的过程中 会有很多扩展点, 供我们去扩展.</li>
<li>将生产出的Bean放入到Map中, map是一个一级缓存池. 后面, 我们可以通过getBean(“user”)从缓存池中获取bean</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>spring5源码IOC加载过程</category>
      </categories>
      <tags>
        <tag>spring5</tag>
        <tag>IOC</tag>
        <tag>spring源码</tag>
        <tag>bean life cycle</tag>
      </tags>
  </entry>
  <entry>
    <title>零基础深入学习携程Apollo配置中心</title>
    <url>/2021/10/09/apollo-config-trip/</url>
    <content><![CDATA[<h2 id="1-Apollo配置中心简介"><a href="#1-Apollo配置中心简介" class="headerlink" title="1:Apollo配置中心简介"></a>1:Apollo配置中心简介</h2><p>Apollo（阿波罗）是携程框架部门研发的配置管理平台，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性。服务端基于Spring Boot和Spring Cloud开发，打包后可以直接运行，不需要额外安装Tomcat等应用容器。<br>为什么我们用了百度的disconf、spring-cloud-config携程还要另辟蹊径,研究出一套独有的Apollo呢？下面让我们通过开源配置中心对比矩阵一张图来进行解释这个问题:<br><img src="/images/apollo-config-trip/open-source-configuration-performance-comparison-matrix.jpg" alt="开源配置中心对比矩阵.jpg"><br>从性能对比图中我们不难看出,从功能特性、技术路线、可用性、易用性来说比其它开源配置中心是非常出色的(尤其是里面的灰度规则、namespace空间管理非常不错)。好,我们先从搭建开始讲起。</p>
<h2 id="2-注册中心阿波罗Apollo搭建"><a href="#2-注册中心阿波罗Apollo搭建" class="headerlink" title="2:注册中心阿波罗Apollo搭建"></a>2:注册中心阿波罗Apollo搭建</h2><p><a href="https://github.com/ctripcorp/apollo">Apollo开源官网</a><br><a href="https://github.com/ctripcorp/apollo/wiki">Wiki</a> ☞ 一切的集成方式和使用方法都在这里<br><a href="https://github.com/ctripcorp/apollo/issues">Issues</a> ☞ 如果期间有任何问题，请通过这里查找大部分解决方法<br>说明：我这里搭建的是1.3的服务版本,1.3.1在是目前最新的版本,相对于之前的版本增加了yml、yaml等多种配置文件的支持。<br><a href="https://github.com/ctripcorp/apollo/releases">下载Releases版本</a><br>下载三个已经打好的安装包:<br><a href="https://github.com/ctripcorp/apollo/releases/download/v1.3.0/apollo-adminservice-1.3.0-github.zip">apollo-adminservice-1.3.0-github.zip</a><br><a href="https://github.com/ctripcorp/apollo/releases/download/v1.3.0/apollo-configservice-1.3.0-github.zip">apollo-configservice-1.3.0-github.zip</a><br><a href="https://github.com/ctripcorp/apollo/releases/download/v1.3.0/apollo-portal-1.3.0-github.zip">apollo-portal-1.3.0-github.zip</a><br>2.1、基础环境：<br>JDK：1.8.0_161<br>Maven：3.5.2<br><a href="https://cloud.tencent.com/product/cdb">MySQL</a>：5.7.18<br>apollo：1.3.1<br>2.2 导入数据库文件 登录MySQL命令行，然后执行以下两个sql文件<br><a href="https://github.com/nobodyiam/apollo-build-scripts/blob/master/sql/apolloportaldb.sql">界面管理</a><br><a href="https://github.com/nobodyiam/apollo-build-scripts/blob/master/sql/apolloconfigdb.sql">配置中心</a><br>2.3、打包<br>分别将三个安装包进行解压</p>
<pre><code>unzip apollo-adminservice-1.3.0-github.zip -d ~/apollo/apollo-adminservice
unzip apollo-configservice-1.3.0-github.zip -d ~/apollo/apollo-configservice
unzip apollo-portal-1.3.0-github.zip -d ~/apollo/apollo-portal</code></pre>
<p>2.4、修改配置<br>分别进入apollo-adminservice、apollo-configservice的config进行配置application-github.properties 数据库配置,指向ApolloPortalDB库<br>进入apollo-portal的config目录编辑application-github.properties,将数据库指向ApolloPortalDB,并且编辑apollo-env.properties 将config meta server进行配置在里面<br>分别进行adminservice、configservice、apollo-portal等安装包的scripts目录,进行修改startup.sh脚本文件。<br>主要修改LOG_DIR(服务日志存储路径)、SERVER_PORT(服务启动端口,如果需要的话)以及jvm启动参数,<br>2.5、启动Apollo<br>apollo-configservice：进入scripts文件夹<br>执行脚本启动服务<br>./startup.sh<br>apollo-adminservice：进入scripts文件夹<br>切换到目录 apollo-adminservice/scripts<br>执行脚本启动服务<br>./startup.sh<br>apollo-portal：进入scripts文件夹<br>执行脚本启动服务<br>./startup.sh<br>2.6、访问Apollo配置中心页面<br>++<a href="http://localhost:8070++">http://localhost:8070++</a> ，默认用户名/密码参考☞ <a href="https://github.com/ctripcorp/apollo/wiki/Portal-%E5%AE%9E%E7%8E%B0%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD">Portal 实现用户登录功能</a> 。<br><img src="/images/apollo-config-trip/apollo-admin-console-page.png" alt="apollo-admin-console-page.png"></p>
<h2 id="3-Apollo多环境搭建"><a href="#3-Apollo多环境搭建" class="headerlink" title="3:Apollo多环境搭建"></a>3:Apollo多环境搭建</h2><p>在搭建完成Apollo之后我们发现,默认就存在一个环境(默认为DEV),那么我们在实际项目使用过程中会同时存在多环境情况.(即:local/dev/test/prod…..)<br>阿波罗多注册环境配置搭建<br>3.1、多环境命名注意点<br> apollo目前支持的环境列表名称有哪些(<font color="red">切记环境名字不能瞎写,否则会找不到的,小张就在这里栽跟头了,随意写了TEST,结果portal启动报错</font>)？<br>详见apollo源码得知在:com.ctrip.framework.apollo.core.enums.Env枚举类<br>public enum Env{<br>LOCAL, DEV, BETA, FWS, FAT, UAT, LPT, PRO, TOOLS, UNKNOWN;<br>…<br>}<br>LOCAL - Local Development environment<br>DEV - Development environment<br>FWS - Feature Web Service Test environment<br>FAT - Feature Acceptance Test environment<br>LPT - Load and Performance Test environment<br>UAT - User Acceptance Test environment<br>PRO - Production environment<br><img src="/images/apollo-config-trip/apollo-multi-environment-naming.png" alt="apollo-Multi-environment-naming.png"><br>比如我需要增加一个FAT环境,那么需要新增一个config server、admin server、以及新的ApolloConfigDB库,其中config server、admin server的config下对应的数据库配置都指向新的ApolloConfigDB。<br>3.2、需要修改的表字段信息如下:<br>3.2.1、ApolloPortalDB库的ServerConfig表:<br><img src="/images/apollo-config-trip/apolloPortalDB-serviceConfig.png" alt="apolloPortalDB-serviceConfig.png"><br>针对不同环境的配置文件,在Apollo中创建不同的namespace时可以指定不同角色的用户来进行管理,方便不同角色的用户进行维护不同环境的配置。</p>
<h2 id="4-Apollo配置中心架构设计"><a href="#4-Apollo配置中心架构设计" class="headerlink" title="4:Apollo配置中心架构设计"></a>4:Apollo配置中心架构设计</h2><p>搭建完成之后我们一起来熟悉下Apollo配置中心的一个架构设计。<br>4.1、基础模型<br>如下即是Apollo的基础模型：<br>用户在配置中心对配置进行修改并发布<br>配置中心通知Apollo客户端有配置更新<br>Apollo客户端从配置中心拉取最新的配置、更新本地配置并通知到应用<br><img src="/images/apollo-config-trip/apollo-basic-architecture.png" alt="apollo-basic-architecture.png"><br>4.2、架构模块<br><img src="/images/apollo-config-trip/apollo-overall-architecture.png" alt="apollo-overall-architecture.png"><br>上图简要描述了Apollo的总体设计，我们可以从下往上看：</p>
<ul>
<li>Config Service提供配置的读取、推送等功能，服务对象是Apollo客户端</li>
<li>Admin Service提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面）</li>
<li>Config Service和Admin Service都是多实例、无状态部署，所以需要将自己注册到Eureka中并保持心跳</li>
<li>在Eureka之上我们架了一层Meta Server用于封装Eureka的服务发现接口</li>
<li>Client通过域名访问Meta Server获取Config Service服务列表（IP+Port），而后直接通过IP+Port访问服务，同时在Client侧会做load balance、错误重试</li>
<li>Portal通过域名访问Meta Server获取Admin Service服务列表（IP+Port），而后直接通过IP+Port访问服务，同时在Portal侧会做load balance、错误重试</li>
<li>为了简化部署，我们实际上会把Config Service、Eureka和Meta Server三个逻辑角色部署在同一个JVM进程中</li>
</ul>
<hr>
<p>4.3、Why Eureka<br>为什么我们采用Eureka作为服务注册中心，而不是使用传统的zk、etcd呢？大致总结了一下，有以下几方面的原因：</p>
<ul>
<li>它提供了完整的Service Registry和Service Discovery实现<br> 首先是提供了完整的实现，并且也经受住了Netflix自己的生产环境考验，相对使用起来会比较省心。</li>
<li>和Spring Cloud无缝集成<br>我们的项目本身就使用了Spring Cloud和Spring Boot，同时Spring Cloud还有一套非常完善的开源代码来整合Eureka，所以使用起来非常方便。<br>另外，Eureka还支持在我们应用自身的容器中启动，也就是说我们的应用启动完之后，既充当了Eureka的角色，同时也是服务的提供者。这样就极大的提高了服务的可用性。<br>这一点是我们选择Eureka而不是zk、etcd等的主要原因，为了提高配置中心的可用性和降低部署复杂度，我们需要尽可能地减少外部依赖。</li>
<li>Open Source<br>最后一点是开源，由于代码是开源的，所以非常便于我们了解它的实现原理和排查问题。</li>
</ul>
<p>4.4 各模块概要介绍<br>4.4.1 Config Service</p>
<ul>
<li>提供配置获取接口</li>
<li>提供配置更新推送接口（基于Http long polling）<br>服务端使用<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResult.html">Spring DeferredResult</a>实现异步化，从而大大增加长连接数量<br>目前使用的tomcat embed默认配置是最多10000个连接（可以调整），使用了4C8G的虚拟机实测可以支撑10000个连接，所以满足需求（一个应用实例只会发起一个长连接）。</li>
<li>接口服务对象为Apollo客户端</li>
</ul>
<p>4.4.2 Admin Service</p>
<ul>
<li>提供配置管理接口</li>
<li>提供配置修改、发布等接口</li>
<li>接口服务对象为Portal</li>
</ul>
<p>4.4.3 Meta Server</p>
<ul>
<li>Portal通过域名访问Meta Server获取Admin Service服务列表（IP+Port）</li>
<li>Client通过域名访问Meta Server获取Config Service服务列表（IP+Port）</li>
<li>Meta Server从Eureka获取Config Service和Admin Service的服务信息，相当于是一个Eureka Client</li>
<li>增设一个Meta Server的角色主要是为了封装服务发现的细节，对Portal和Client而言，永远通过一个Http接口获取Admin Service和Config Service的服务信息，而不需要关心背后实际的服务注册和发现组件</li>
<li>Meta Server只是一个逻辑角色，在部署时和Config Service是在一个JVM进程中的，所以IP、端口和Config Service一致</li>
</ul>
<p>4.4.4 Eureka</p>
<ul>
<li>基于<a href="https://github.com/Netflix/eureka">Eureka</a>和<a href="https://cloud.spring.io/spring-cloud-netflix/">Spring Cloud Netflix</a>提供服务注册和发现</li>
<li>Config Service和Admin Service会向Eureka注册服务，并保持心跳</li>
<li>为了简单起见，目前Eureka在部署时和Config Service是在一个JVM进程中的（通过Spring Cloud Netflix）</li>
</ul>
<p>4.4.5 Portal</p>
<ul>
<li>提供Web界面供用户管理配置</li>
<li>通过Meta Server获取Admin Service服务列表（IP+Port），通过IP+Port访问服务</li>
<li>在Portal侧做load balance、错误重试</li>
</ul>
<p>4.4.6 Client</p>
<ul>
<li>Apollo提供的客户端程序，为应用提供配置获取、实时更新等功能</li>
<li>通过Meta Server获取Config Service服务列表（IP+Port），通过IP+Port访问服务</li>
<li>在Client侧做load balance、错误重试</li>
</ul>
<p>4.5 服务端设计<br>  4.5.1 发送ReleaseMessage的实现方式<br>Config Service有一个线程会每秒扫描一次ReleaseMessage表,看看是否有新的消息记录，参见<br><a href="https://github.com/ctripcorp/apollo/blob/master/apollo-biz/src/main/java/com/ctrip/framework/apollo/biz/message/ReleaseMessageScanner.java">ReleaseMessageScanner</a><br>简要描述了NotificationControllerV2是如何得知有配置发布的，那NotificationControllerV2在得知有配置发布后是如何通知到客户端的呢？<br>实现方式如下：</p>
<ul>
<li>客户端会发起一个Http请求到Config Service的notifications/v2接口，也就是<a href="https://github.com/ctripcorp/apollo/blob/master/apollo-configservice/src/main/java/com/ctrip/framework/apollo/configservice/controller/NotificationControllerV2.java">NotificationControllerV2</a>，参见<a href="https://github.com/ctripcorp/apollo/blob/master/apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java">RemoteConfigLongPollService</a></li>
<li>NotificationControllerV2不会立即返回结果，而是通过<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResult.html">Spring DeferredResult</a>把请求挂起</li>
<li>如果在60秒内没有该客户端关心的配置发布，那么会返回Http状态码304给客户端</li>
<li>如果有该客户端关心的配置发布，NotificationControllerV2会调用DeferredResult的<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/context/request/async/DeferredResult.html#setResult-T-">setResult</a>方法，传入有配置变化的namespace信息，同时该请求会立即返回。客户端从返回的结果中获取到配置变化的namespace后，会立即请求Config Service获取该namespace的最新配置。<br><img src="/images/apollo-config-trip/apollo-client-architecture.png" alt="apollo-client-architecture.png"><br>上图简要描述了Apollo客户端的实现原理：</li>
</ul>
<ol>
<li>客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。（通过Http Long Polling实现）</li>
<li>客户端还会定时从Apollo配置中心服务端拉取应用的最新配置。</li>
</ol>
<ul>
<li>这是一个fallback机制，为了防止推送机制失效导致配置不更新</li>
<li>客户端定时拉取会上报本地版本，所以一般情况下，对于定时拉取的操作，服务端都会返回304 - Not Modified</li>
<li>定时频率默认为每5分钟拉取一次，客户端也可以通过在运行时指定System Property: apollo.refreshInterval来覆盖，单位为分钟。</li>
</ul>
<ol start="3">
<li>客户端从Apollo配置中心服务端获取到应用的最新配置后，会保存在内存中</li>
<li>客户端会把从服务端获取到的配置在本地文件系统缓存一份</li>
</ol>
<ul>
<li>在遇到服务不可用或网络不通的时候，依然能从本地恢复配置</li>
</ul>
<ol start="5">
<li>应用程序可以从Apollo客户端获取最新的配置、订阅配置更新通知<br><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E8%AE%BE%E8%AE%A1">更详细资料详见</a><h2 id="5-微服务中Apollo-java客户端的搭建使用"><a href="#5-微服务中Apollo-java客户端的搭建使用" class="headerlink" title="5:微服务中Apollo java客户端的搭建使用"></a>5:微服务中Apollo java客户端的搭建使用</h2></li>
<li>1、首先在微服务maven的pom项目中增加apollo的client 依赖<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>
 <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
 <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>apollo<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
 <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre>
</li>
<li>2、在application启动类中指定@EnableApolloConfig配置项</li>
<li>3、启动应用中需要指定-Denv=dev参数</li>
<li>4、在yml中需要增加config server的服务地址配置以及serviceid配置项<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">app</span><span class="token punctuation">:</span>
<span class="token key atrule">id</span><span class="token punctuation">:</span> SampleApp
<span class="token key atrule">apollo</span><span class="token punctuation">:</span>
<span class="token key atrule">meta</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//34.85.49.138<span class="token punctuation">:</span><span class="token number">8080</span>
<span class="token key atrule">bootstrap</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>
</li>
<li>5、注意事项<br>在多网卡机器的环境中,需要指定要注册到configServer的ip,避免内网ip或者受限制的网络ip注册到meta server中去,导致客户端获取不到元数据信息<br>可以在apollo-configservice 或者apollo-adminservice 的startup.sh中指定eureka 实例化注册的ip地址。参数信息如: -Deureka.instance.ip-address=${指定的IP} <a href="https://github.com/ctripcorp/apollo/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97">详见官网资料</a></li>
<li>6、使用<font color="red">@ApolloConfigChangeListener</font>监听类进行监听配置项的改变<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApolloConfigChangeListener</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">someOnChange</span><span class="token punctuation">(</span>ConfigChangeEvent changeEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//update injected value of batch if it is changed in Apollo</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>changeEvent<span class="token punctuation">.</span><span class="token function">isChanged</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getIntProperty</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
</li>
<li>7、使用简单样例<br>Java Config使用方式</li>
<li>7.1、新建配置类JavaConfigBean如下：</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * Java Config方式
 *
 * @author zyf
 * @create 2020-05-12 15:00
 **/</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaConfigBean</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${timeout:20}"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> timeout<span class="token punctuation">;</span>


  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> timeout<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>5.7.2、新增访问端点</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.Java Config方式</span>
 <span class="token annotation punctuation">@Autowired</span>
 JavaConfigBean javaConfigBean<span class="token punctuation">;</span>


 <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index1"</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> String <span class="token function">hello1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> javaConfigBean<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span></code></pre>
<p>Spring Boot提供了@ConfigurationProperties把配置注入到bean对象中。Apollo也支持这种方式，下面的例子会把redis.cache.expireSeconds和redis.cache.commandTimeout分别注入 到SampleRedisConfig的expireSeconds和commandTimeout字段中。<br>5.8.1、新增配置类SampleRedisConfig如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * ConfigurationProperties使用方式
 *
 * @author zyf
 * @create 2020-05-12 15:00
 **/</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"redis.cache"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleRedisConfig</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> expireSeconds<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">int</span> commandTimeout<span class="token punctuation">;</span>


  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setExpireSeconds</span><span class="token punctuation">(</span><span class="token keyword">int</span> expireSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>expireSeconds <span class="token operator">=</span> expireSeconds<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommandTimeout</span><span class="token punctuation">(</span><span class="token keyword">int</span> commandTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>commandTimeout <span class="token operator">=</span> commandTimeout<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getExpireSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> expireSeconds<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCommandTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> commandTimeout<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java">新增访问端点
<span class="token comment" spellcheck="true">//2. ConfigurationProperties使用方式</span>
  <span class="token annotation punctuation">@Autowired</span>
  SampleRedisConfig sampleRedisConfig<span class="token punctuation">;</span>


  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index2"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> String <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> sampleRedisConfig<span class="token punctuation">.</span><span class="token function">getCommandTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>sampleRedisConfig<span class="token punctuation">.</span><span class="token function">getExpireSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java">新增以下代码
<span class="token annotation punctuation">@ApolloConfigChangeListener</span>
  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">someOnChange</span><span class="token punctuation">(</span>ConfigChangeEvent changeEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//update injected value of batch if it is changed in Apollo</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>changeEvent<span class="token punctuation">.</span><span class="token function">isChanged</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getIntProperty</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApolloJsonValue</span>的使用
新增User如下：
<span class="token comment" spellcheck="true">/**
 * 用户
 *
 * @author zyf
 * @create 2020-05-12 15:00
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
  <span class="token keyword">private</span> String password<span class="token punctuation">;</span>


  <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> username<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> password<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
服务端新增配置
jsonBeanProperty<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"john"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token operator">:</span> <span class="token string">"1234"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string">"username"</span><span class="token operator">:</span> <span class="token string">"simon"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token operator">:</span> <span class="token string">"222132"</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span>
客户端获取配置
<span class="token comment" spellcheck="true">//4. @ApolloJsonValue使用</span>
<span class="token annotation punctuation">@ApolloJsonValue</span><span class="token punctuation">(</span><span class="token string">"${jsonBeanProperty:[]}"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> anotherJsonBeans<span class="token punctuation">;</span>


<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index4"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  anotherJsonBeans<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>item<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>5.8.2、多配置文件</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>xes<span class="token punctuation">.</span>chn<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>service<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>impl<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>Config<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>model<span class="token punctuation">.</span>ConfigChangeEvent<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ApolloConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ApolloConfigChangeListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>ctrip<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>apollo<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableApolloConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scheduled<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Service</span>
<span class="token annotation punctuation">@EnableApolloConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"chn.application.properties"</span><span class="token punctuation">,</span> <span class="token string">"beibo.yml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//@EnableApolloConfig("application.properties")</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerConfigurationImpl</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LoggerConfigurationImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@ApolloConfig</span><span class="token punctuation">(</span><span class="token string">"chn.application.properties"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Config commonProperties<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ApolloConfig</span><span class="token punctuation">(</span><span class="token string">"beibo.yml"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> Config beiboYml<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${invokingServerPath.beibo.stuChangeUrl}"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> String stuChangeUrl<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//        System.out.println(gateway);</span>
<span class="token comment" spellcheck="true">//        System.out.println(config.getPropertyNames());</span>
<span class="token comment" spellcheck="true">//        Config config = ConfigService.getConfig("chn-beibo.yml"); //config instance is singleton for each namespace and is never null</span>
<span class="token comment" spellcheck="true">//        String someKey = "chn-beibo";</span>
<span class="token comment" spellcheck="true">//        String someDefaultValue = "1234567a";</span>
<span class="token comment" spellcheck="true">//        String value = config.getProperty(someKey, someDefaultValue);</span>
<span class="token comment" spellcheck="true">//        System.out.println(gateway);</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@ApolloConfigChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"chn.application.properties"</span><span class="token punctuation">,</span> <span class="token string">"beibo.yml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">someOnChange</span><span class="token punctuation">(</span>ConfigChangeEvent changeEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//update injected value of batch if it is changed in Apollo</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>changeEvent<span class="token punctuation">.</span><span class="token function">isChanged</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment" spellcheck="true">//            System.out.println(config.getIntProperty("timeout", 0));</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//    @Scheduled(fixedRate = 1000)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuChangeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> propertyNames<span class="token operator">=</span>commonProperties<span class="token punctuation">.</span><span class="token function">getPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String stuChangeUrL<span class="token operator">=</span>beiboYml<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"invokingServerPath.beibo.stuChangeUrl"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String propertyName <span class="token operator">:</span> propertyNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>stuChangeUrL<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"stuChangeUrL:{}"</span><span class="token punctuation">,</span> stuChangeUrL<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"${"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">,</span>commonProperties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h2 id="6-带缓存与不带缓存Http接口从Apollo读取配置"><a href="#6-带缓存与不带缓存Http接口从Apollo读取配置" class="headerlink" title="6:带缓存与不带缓存Http接口从Apollo读取配置"></a>6:带缓存与不带缓存Http接口从Apollo读取配置</h2><p>6.1 通过带缓存的Http接口从Apollo读取配置<br>该接口会从缓存中获取配置，适合频率较高的配置拉取请求，如简单的每30秒轮询一次配置。</p>
<p>由于缓存最多会有一秒的延时，所以如果需要配合配置推送通知实现实时更新配置的话，请参考<a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#13-%E9%80%9A%E8%BF%87%E4%B8%8D%E5%B8%A6%E7%BC%93%E5%AD%98%E7%9A%84http%E6%8E%A5%E5%8F%A3%E4%BB%8Eapollo%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE">通过不带缓存的Http接口从Apollo读取配置</a>。<br>6.1.1 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#121-http%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E">Http接口说明</a><br>URL: {config_server_url}/configfiles/json/{appId}/{clusterName}/{namespaceName}?ip={clientIp}<br>Method: GET<br>参数说明:</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>是否必须</th>
<th>参数值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>config_server_url</td>
<td>是</td>
<td>Apollo配置服务的地址</td>
<td></td>
</tr>
<tr>
<td>appId</td>
<td>是</td>
<td>应用的appId</td>
<td></td>
</tr>
<tr>
<td>namespaceName</td>
<td>是</td>
<td>如果没有新建过Namespace的话，传入application即可。 如果创建了Namespace，并且需要使用该Namespace的配置，则传入对应的Namespace名字。需要注意的是对于properties类型的namespace，只需要传入namespace的名字即可，如application。对于其它类型的namespace，需要传入namespace的名字加上后缀名，如datasources.json</td>
<td></td>
</tr>
<tr>
<td>ip</td>
<td>否</td>
<td>应用部署的机器ip</td>
<td>这个参数是可选的，用来实现灰度发布。 如果不想传这个参数，请注意URL中从?号开始的query parameters整个都不要出现。</td>
</tr>
</tbody></table>
<p>6.2 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#122-http%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F">Http接口返回格式</a><br>该Http接口返回的是JSON格式、UTF-8编码，包含了对应namespace中所有的配置项。<br>返回内容Sample如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>
    <span class="token string">"portal.elastic.document.type"</span><span class="token operator">:</span><span class="token string">"biz"</span><span class="token punctuation">,</span>
    <span class="token string">"portal.elastic.cluster.name"</span><span class="token operator">:</span><span class="token string">"hermes-es-fws"</span>
<span class="token punctuation">}</span>
通过
<span class="token punctuation">{</span>config_server_url<span class="token punctuation">}</span><span class="token operator">/</span>configfiles<span class="token operator">/</span><span class="token punctuation">{</span>appId<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>clusterName<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">{</span>namespaceName<span class="token punctuation">}</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token punctuation">{</span>clientIp<span class="token punctuation">}</span>可以获取到properties形式的配置</code></pre>
<p>6.3 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#123-%E6%B5%8B%E8%AF%95"> 测试</a><br>由于是Http接口，所以在URL组装OK之后，直接通过浏览器、或者相关的http接口测试工具访问即可。<br>6.4 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#13-%E9%80%9A%E8%BF%87%E4%B8%8D%E5%B8%A6%E7%BC%93%E5%AD%98%E7%9A%84http%E6%8E%A5%E5%8F%A3%E4%BB%8Eapollo%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE">通过不带缓存的Http接口从Apollo读取配置</a><br>该接口会直接从数据库中获取配置，可以配合配置推送通知实现实时更新配置。<br>6.5 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#131-http%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E">Http接口说明</a><br>URL: {config_server_url}/configs/{appId}/{clusterName}/{namespaceName}?releaseKey={releaseKey}&amp;ip={clientIp}<br>Method: GET<br>参数说明：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>是否必须</th>
<th>参数值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>config_server_url</td>
<td>是</td>
<td>Apollo配置服务的地址</td>
<td></td>
</tr>
<tr>
<td>appId</td>
<td>是</td>
<td>应用的appId</td>
<td></td>
</tr>
<tr>
<td>clusterName</td>
<td>是</td>
<td>集群名</td>
<td>一般情况下传入 default 即可。 如果希望配置按集群划分，可以参考<a href="https://github.com/ctripcorp/apollo/wiki/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#%E4%B8%89%E9%9B%86%E7%BE%A4%E7%8B%AC%E7%AB%8B%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">集群独立配置说明</a>做相关配置，然后在这里填入对应的集群名。</td>
</tr>
<tr>
<td>namespaceName</td>
<td>是</td>
<td>Namespace的名字</td>
<td>如果没有新建过Namespace的话，传入application即可。 如果创建了Namespace，并且需要使用该Namespace的配置，则传入对应的Namespace名字。需要注意的是对于properties类型的namespace，只需要传入namespace的名字即可，如application。对于其它类型的namespace，需要传入namespace的名字加上后缀名，如datasources.json</td>
</tr>
<tr>
<td>releaseKey</td>
<td>否</td>
<td>上一次的releaseKey</td>
<td>将上一次返回对象中的releaseKey传入即可，用来给服务端比较版本，如果版本比下来没有变化，则服务端直接返回304以节省流量和运算</td>
</tr>
<tr>
<td>ip</td>
<td>否</td>
<td>应用部署的机器ip</td>
<td>这个参数是可选的，用来实现灰度发布。</td>
</tr>
</tbody></table>
<p>6.5 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#132-http%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F">Http接口返回格式</a><br>该Http接口返回的是JSON格式、UTF-8编码。</p>
<p>如果配置没有变化（传入的releaseKey和服务端的相等），则返回HttpStatus 304，response body为空。<br>如果配置有变化，则会返回HttpStatus 200，response body为对应namespace的meta信息以及其中所有的配置项。<br>返回内容Sample如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">{</span>
  <span class="token string">"appId"</span><span class="token operator">:</span> <span class="token string">"100004458"</span><span class="token punctuation">,</span>
  <span class="token string">"cluster"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>
  <span class="token string">"namespaceName"</span><span class="token operator">:</span> <span class="token string">"application"</span><span class="token punctuation">,</span>
  <span class="token string">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">"portal.elastic.document.type"</span><span class="token operator">:</span><span class="token string">"biz"</span><span class="token punctuation">,</span>
    <span class="token string">"portal.elastic.cluster.name"</span><span class="token operator">:</span><span class="token string">"hermes-es-fws"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">"releaseKey"</span><span class="token operator">:</span> <span class="token string">"20170430092936-dee2d58e74515ff3"</span>
<span class="token punctuation">}</span></code></pre>
<p>6.6 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#133-%E6%B5%8B%E8%AF%95">测试</a><br>由于是Http接口，所以在URL组装OK之后，直接通过浏览器、或者相关的http接口测试工具访问即可。<br>6.7 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#14-%E5%BA%94%E7%94%A8%E6%84%9F%E7%9F%A5%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%96%B0">应用感知配置更新</a><br>Apollo提供了基于Http long polling的配置更新推送通知，第三方客户端可以看自己实际的需求决定是否需要使用这个功能。<br>如果对配置更新时间不是那么敏感的话，可以通过定时刷新来感知配置更新，刷新频率可以视应用自身情况来定，建议在30秒以上。<br>如果需要做到实时感知配置更新（1秒）的话，可以参考下面的文档实现配置更新推送的功能。<br>6.8 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#141-%E9%85%8D%E7%BD%AE%E6%9B%B4%E6%96%B0%E6%8E%A8%E9%80%81%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF"> 配置更新推送实现思路</a><br>这里建议大家可以参考Apollo的Java实现：<a href="https://github.com/ctripcorp/apollo/blob/master/apollo-client/src/main/java/com/ctrip/framework/apollo/internals/RemoteConfigLongPollService.java">RemoteConfigLongPollService.java</a>，代码量200多行，总体上还是比较简单的。<br>6.8.1 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#1411-%E5%88%9D%E5%A7%8B%E5%8C%96">初始化</a><br>首先需要确定哪些namespace需要配置更新推送，Apollo的实现方式是程序第一次获取某个namespace的配置时就会来注册一下，我们就知道有哪些namespace需要配置更新推送了。<br>初始化后的结果就是得到一个notifications的Map，内容是namespaceName -&gt; notificationId（初始值为-1）。<br>运行过程中如果发现有新的namespace需要配置更新推送，直接塞到notifications这个Map里面即可。<br>6.8.2 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#1412-%E8%AF%B7%E6%B1%82%E6%9C%8D%E5%8A%A1">请求服务</a><br>有了notifications这个Map之后，就可以请求服务了。这里先描述一下请求服务的逻辑，具体的URL参数和说明请参见后面的接口说明。</p>
<ol>
<li>请求远端服务，带上自己的应用信息以及notifications信息</li>
<li>服务端针对传过来的每一个namespace和对应的notificationId，检查notificationId是否是最新的</li>
<li>如果都是最新的，则保持住请求60秒，如果60秒内没有配置变化，则返回HttpStatus 304。如果60秒内有配置变化，则返回对应namespace的最新notificationId, HttpStatus 200。</li>
<li>如果传过来的notifications信息中发现有notificationId比服务端老，则直接返回对应namespace的最新notificationId, HttpStatus 200。</li>
<li>客户端拿到服务端返回后，判断返回的HttpStatus</li>
<li>如果返回的HttpStatus是304，说明配置没有变化，重新执行第1步</li>
<li>如果返回的HttpStauts是200，说明配置有变化，针对变化的namespace重新去服务端拉取配置，参见1.3 通过不带缓存的Http接口从Apollo读取配置。同时更新notifications map中的notificationId。重新执行第1步。</li>
</ol>
<p>6.9 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#142-http%E6%8E%A5%E5%8F%A3%E8%AF%B4%E6%98%8E">Http接口说明</a><br>URL: {config_server_url}/notifications/v2?appId={appId}&amp;cluster={clusterName}&amp;notifications={notifications}<br>Method: GET<br>参数说明：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>是否必须</th>
<th>参数值</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>notifications</td>
<td>是</td>
<td>notifications信息</td>
<td>传入本地的notifications信息，注意这里需要以array形式转为json传入，如：[{“namespaceName”: “application”, “notificationId”: 100}, {“namespaceName”: “FX.apollo”, “notificationId”: 200}]。需要注意的是对于properties类型的namespace，只需要传入namespace的名字即可，如application。对于其它类型的namespace，需要传入namespace的名字加上后缀名，如datasources.json</td>
</tr>
<tr>
<td>config_server_url</td>
<td>是</td>
<td>Apollo配置服务的地址</td>
<td></td>
</tr>
<tr>
<td>clusterName</td>
<td>是</td>
<td>集群名</td>
<td>一般情况下传入 default 即可。 如果希望配置按集群划分，可以参考<a href="https://github.com/ctripcorp/apollo/wiki/%E5%BA%94%E7%94%A8%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#%E4%B8%89%E9%9B%86%E7%BE%A4%E7%8B%AC%E7%AB%8B%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">集群独立配置说明</a>做相关配置，然后在这里填入对应的集群名。</td>
</tr>
<tr>
<td>appId</td>
<td>是</td>
<td>应用的appId</td>
<td></td>
</tr>
</tbody></table>
<p>注1：由于服务端会hold住请求60秒，所以请确保客户端访问服务端的超时时间要大于60秒。<br>注2：别忘了对参数进行<a href="https://en.wikipedia.org/wiki/Percent-encoding">url encode</a><br>6.9.1 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#143-http%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%A0%BC%E5%BC%8F">Http接口返回格式</a><br>该Http接口返回的是JSON格式、UTF-8编码，包含了有变化的namespace和最新的notificationId。<br>返回内容Sample如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token string">"namespaceName"</span><span class="token operator">:</span> <span class="token string">"application"</span><span class="token punctuation">,</span>
    <span class="token string">"notificationId"</span><span class="token operator">:</span> <span class="token number">101</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span></code></pre>
<p>6.9.2 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#144-%E6%B5%8B%E8%AF%95">测试</a><br>6.9.3 <a href="https://github.com/ctripcorp/apollo/wiki/%E5%85%B6%E5%AE%83%E8%AF%AD%E8%A8%80%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97#15-%E9%94%99%E8%AF%AF%E7%A0%81%E8%AF%B4%E6%98%8E">错误码说明</a><br>正常情况下，接口返回的Http状态码是200，下面列举了Apollo会返回的非200错误码说明。</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>错误状态码</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>400 - Bad Request</td>
<td>客户端传入参数的错误，如必选参数没有传入等，客户端需要根据提示信息检查对应的参数是否正确。</td>
</tr>
<tr>
<td>2</td>
<td>404 - Not Found</td>
<td>接口要访问的资源不存在，一般是URL或URL的参数错误，或者是对应的namespace还没有发布过配置。</td>
</tr>
<tr>
<td>3</td>
<td>405 - Method Not Allowed</td>
<td>接口访问的Method不正确，比如应该使用GET的接口使用了POST访问等，客户端需要检查接口访问方式是否正确。</td>
</tr>
<tr>
<td>4</td>
<td>500 - Internal Server Error</td>
<td>其它类型的错误默认都会返回500，对这类错误如果应用无法根据提示信息找到原因的话，可以尝试查看服务端日志来排查问题。</td>
</tr>
</tbody></table>
<p>7.1 什么是yml占位符？举个例子如下:<br>我有2分配置文件,一份application.yml,为私有配置文件<br>该配置有个属性:<br>server:<br>  port: ${server.apollo-test-port}<br>另外有个公有配置文件<br>apollo-test.yml,该配置有个属性,<br>server:<br>  apollo-test-port: 10065</p>
<p>其中私有配置文件,使用到了占位符, 请问下,这种在阿波罗有实现吗?如果有,需要怎么做? 详见参考我之前在github中提交的issues,得到了作者的答复 <a href="https://github.com/ctripcorp/apollo/issues/1596">github issues</a><br>目前非properties格式是通过api方式获取的，ConfigService.getConfigFile,具体使用示例参照<br><a href="https://github.com/ctripcorp/apollo/blob/master/apollo-demo/src/main/java/com/ctrip/framework/apollo/demo/api/ApolloConfigDemo.java#L52">github非properties配置文件读取样例</a><br>好了,到此就先总结这么多,后续还有更新的工作中躺过的坑或使用的问题我会实时更新到这里来,当然最主要的还是希望后续Apollo注册中心服务发挥出更出色的能力为我们的产品发挥出更大的可利用价值。</p>
]]></content>
      <categories>
        <category>Java Apollo config</category>
      </categories>
      <tags>
        <tag>distributed config</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5源码-循环依赖之手写代码模拟spring循环依赖</title>
    <url>/2021/10/17/spring5-circular-dependency-manually-build/</url>
    <content><![CDATA[<ul>
<li><a href="#%E7%9B%AE%E5%BD%95">目录</a><ul>
<li><a href="#%E6%89%8B%E5%86%99spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E6%95%B4%E4%B8%AA%E8%BF%87%E7%A8%8B">手写spring循环依赖的整个过程</a></li>
<li><a href="#spring%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96">spring怎么解决循环依赖</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%92%8C%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98">为什么要二级缓存和三级缓存</a></li>
<li><a href="#spring%E6%9C%89%E6%B2%A1%E6%9C%89%E8%A7%A3%E5%86%B3%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96">spring有没有解决构造函数的循环依赖</a></li>
<li><a href="#spring%E6%9C%89%E6%B2%A1%E6%9C%89%E8%A7%A3%E5%86%B3%E5%A4%9A%E4%BE%8B%E4%B8%8B%E7%9A%84%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96">spring有没有解决多例下的循环依赖</a>  <h3 id="一-什么是循环依赖"><a href="#一-什么是循环依赖" class="headerlink" title="一. 什么是循环依赖?"></a>一. 什么是循环依赖?</h3>如下图所示:<br><img src="/images/spring5-circular-dependency-manually-build/spring5-circular-dependency-manually-build-circular-dependency-example-one.png" alt="manually-build-circular-dependency-example-one.png"><br>A类依赖了B类, 同时B类有依赖了A类. 这就是循环依赖, 形成了一个闭环<br><img src="/images/spring5-circular-dependency-manually-build/spring5-circular-dependency-manually-build-circular-dependency-example-two.png" alt="manually-build-circular-dependency-example-two.png"><br>如上图: A依赖了B, B同时依赖了A和C , C依赖了A. 这也是循环依赖. , 形成了一个闭环<br>那么, 如果出现循环依赖, spring是如何解决循环依赖问题的呢?</li>
</ul>
</li>
</ul>
<h3 id="二-模拟循环依赖"><a href="#二-模拟循环依赖" class="headerlink" title="二. 模拟循环依赖"></a>二. 模拟循环依赖</h3><h4 id="2-1-复现循环依赖"><a href="#2-1-复现循环依赖" class="headerlink" title="2.1 复现循环依赖"></a>2.1 复现循环依赖</h4><p>我们定义三个类:</p>
<h5 id="1-新增类InstanceA"><a href="#1-新增类InstanceA" class="headerlink" title="1. 新增类InstanceA"></a>1. 新增类InstanceA</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>circulardependencies<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceA</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> InstanceB instanceB<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">InstanceA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用 instanceA的构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">InstanceA</span><span class="token punctuation">(</span>InstanceB instanceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>instanceB <span class="token operator">=</span> instanceB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">"I am A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> InstanceB <span class="token function">getInstanceB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instanceB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInstanceB</span><span class="token punctuation">(</span>InstanceB instanceB<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>instanceB <span class="token operator">=</span> instanceB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<p>这是InstanceA, 里面引用了InstanceB.</p>
<h5 id="2-新增类instanceB"><a href="#2-新增类instanceB" class="headerlink" title="2. 新增类instanceB"></a>2. 新增类instanceB</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>circulardependencies<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Scope<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceB</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> InstanceA instanceA<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">InstanceB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用 instanceB的构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> InstanceA <span class="token function">getInstanceA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> instanceA<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInstanceA</span><span class="token punctuation">(</span>InstanceA instanceA<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>instanceA <span class="token operator">=</span> instanceA<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这是InstanceB, 在里面有引用了InstanceA</p>
<h5 id="3-模拟spring是如何创建Bean的"><a href="#3-模拟spring是如何创建Bean的" class="headerlink" title="3:模拟spring是如何创建Bean的"></a>3:模拟spring是如何创建Bean的</h5><p>这个在前面已经说过了, 首先会加载配置类的后置处理器, 将其解析后放入到beanDefinitionMap中. 然后加载配置类, 也将其解析后放入beanDefinitionMap中. 最后解析配置类. 我们这里直接简化掉前两步, 将两个类放入beanDefinitionMap中. 主要模拟第三步解析配置类. 在解析的过程中, 获取bean的时候会出现循环依赖的问题循环依赖.</p>
<h5 id="第一步-将两个类放入到beanDefinitionMap中"><a href="#第一步-将两个类放入到beanDefinitionMap中" class="headerlink" title="第一步: 将两个类放入到beanDefinitionMap中"></a>第一步: 将两个类放入到beanDefinitionMap中</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainStart</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**
     * 读取bean定义, 当然在spring中肯定是根据配置 动态扫描注册的
     *
     * InstanceA和InstanceB都有注解@Component, 所以, 在spring扫描读取配置类的时候, 会把他们两个扫描到BeanDefinitionMap中.
     * 这里, 我们省略这一步, 直接将instanceA和instanceB放到BeanDefinitionMap中.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        RootBeanDefinition aBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>InstanceA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RootBeanDefinition bBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>InstanceB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"instanceA"</span><span class="token punctuation">,</span> aBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"instanceB"</span><span class="token punctuation">,</span> bBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 第一步: 扫描配置类, 读取bean定义</span>
        <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span></code></pre>
<p>上面的代码结构很简单, 再看一下注释应该就能明白了. 这里就是模拟spring将配置类解析放入到beanDefinitionMap的过程.</p>
<h5 id="第二步-循环创建bean"><a href="#第二步-循环创建bean" class="headerlink" title="第二步: 循环创建bean"></a>第二步: 循环创建bean</h5><p>首先,我们已经知道, 创建bean一共有三个步骤: 实例化, 属性赋值, 初始化.<br><img src="/images/spring5-circular-dependency-manually-build/spring5-circular-dependency-manually-build-circular-dependency-create-been.png" alt="circular-dependency-create-been.png"><br>而在属性赋值的时候, 会判断是否引用了其他的Bean, 如果引用了, 那么需要构建此Bean. 下面来看一下代码</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * 获取bean, 根据beanName获取
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/**
         * 第一步: 实例化
         * 我们这里是模拟, 采用反射的方式进行实例化. 调用的也是最简单的无参构造函数
         */</span>
        RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>RootBeanDefinition<span class="token punctuation">)</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 调用无参的构造函数进行实例化</span>
        Object instanceBean <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     　　<span class="token comment" spellcheck="true">/**
         *  第二步: 属性赋值
         *  instanceA这类类里面有一个属性, InstanceB. 所以, 先拿到 instanceB, 然后在判断属性头上有没有Autowired注解.
         *  注意: 这里我们只是判断有没有Autowired注解. spring中还会判断有没有@Resource注解. @Resource注解还有两种方式, 一种是name, 一种是type
         */</span>
        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField<span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 判断每一个属性是否有@Autowired注解</span>
            Autowired annotation <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 设置这个属性是可访问的</span>
                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 那么这个时候还要构建这个属性的bean.</span>
                <span class="token comment" spellcheck="true">/*
                 * 获取属性的名字
                 * 真实情况, spring这里会判断, 是根据名字, 还是类型, 还是构造函数来获取类.
                 * 我们这里模拟, 所以简单一些, 直接根据名字获取.
                 */</span>
                String name <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * 这样, 在这里我们就拿到了 instanceB 的 bean
                 */</span>
                Object fileObject <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 为属性设置类型</span>
                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instanceBean<span class="token punctuation">,</span> fileObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


        <span class="token comment" spellcheck="true">/**
         * 第三步: 初始化
         * 初始化就是设置类的init-method.这个可以设置也可以不设置. 我们这里就不设置了
         */</span>
        <span class="token keyword">return</span> instanceBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>我们看到如上代码.</p>
<p>第一步: 实例化: 使用反射的方式, 根据beanName查找构建一个实例bean.</p>
<p>第二步: 属性赋值: 判断属性中是否有@Autowired属性, 如果有这个属性, 那么需要构建bean. 我们发现在为InstanceA赋值的时候, 里面引用了InstanceB, 所以去创建InstanceB, 而创建InstanceB的时候, 发现里面又有InstanceA, 于是又去创建A. 然后以此类推,继续判断. 就形成了死循环. 无法走出这个环. 这就是循环依赖</p>
<p>第三步: 初始化: 调用init-method, 这个方法不是必须有, 所以,我们这里不模拟了</p>
<p>看看如下图所示<br><img src="/images/spring5-circular-dependency-manually-build/spring5-circular-dependency-manually-build-init-method.png" alt="circular-dependency-manually-build-init-method.png"><br>红色部分就形成了循环依赖.</p>
<h5 id="4-增加一级缓存-解决循环依赖的问题"><a href="#4-增加一级缓存-解决循环依赖的问题" class="headerlink" title="4: 增加一级缓存, 解决循环依赖的问题."></a>4: 增加一级缓存, 解决循环依赖的问题.</h5><p>我们知道上面进行了循环依赖了. 其实, 我们的目标很简单, 如果一个类创建过了, 那么就请不要在创建了.</p>
<p>所以, 我们增加一级缓存</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一级缓存</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

　　 <span class="token comment" spellcheck="true">/**
     * 获取bean, 根据beanName获取
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 增加一个出口. 判断实体类是否已经被加载过了</span>
        Object singleton <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**
         * 第一步: 实例化
         * 我们这里是模拟, 采用反射的方式进行实例化. 调用的也是最简单的无参构造函数
         */</span>
        RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>RootBeanDefinition<span class="token punctuation">)</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 调用无参的构造函数进行实例化</span>
        Object instanceBean <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 第二步: 放入到一级缓存
         */</span>
        singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> instanceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         *  第三步: 属性赋值
         *  instanceA这类类里面有一个属性, InstanceB. 所以, 先拿到 instanceB, 然后在判断属性头上有没有Autowired注解.
         *  注意: 这里我们只是判断有没有Autowired注解. spring中还会判断有没有@Resource注解. @Resource注解还有两种方式, 一种是name, 一种是type
          */</span>
        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField<span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 判断每一个属性是否有@Autowired注解</span>
            Autowired annotation <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 设置这个属性是可访问的</span>
                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 那么这个时候还要构建这个属性的bean.</span>
                <span class="token comment" spellcheck="true">/*
                 * 获取属性的名字
                 * 真实情况, spring这里会判断, 是根据名字, 还是类型, 还是构造函数来获取类.
                 * 我们这里模拟, 所以简单一些, 直接根据名字获取.
                 */</span>
                String name <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * 这样, 在这里我们就拿到了 instanceB 的 bean
                 */</span>
                Object fileObject <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 为属性设置类型</span>
                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instanceBean<span class="token punctuation">,</span> fileObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**
         * 第四步: 初始化
         * 初始化就是设置类的init-method.这个可以设置也可以不设置. 我们这里就不设置了
         */</span>
        <span class="token keyword">return</span> instanceBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>还是上面的获取bean的流程, 不一样的是, 这里增加了以及缓存. 当我们获取到bean实例以后, 将其放入到缓存中. 下次再需要创建之前, 先去缓存里判断,是否已经有了, 如果没有, 那么再创建.</p>
<p>这样就给创建bean增加了一个出口. 不会循环创建了.<br><img src="/images/spring5-circular-dependency-manually-build/spring5-circular-dependency-manually-build-level-cache-solve-circular-dependency.png" alt="level-cache-solve-circular-dependency.png"><br>如上图所示, 在@Autowired的时候, 增加了一个出口. 判断即将要创建的类是否已经存在, 如果存在了, 那么就直接返回, 不在创建</p>
<p>虽然使用了一级缓存解决了循环依赖的问题, 但要是在多线程下, 这个依赖可能就会出现问题.</p>
<p>比如: 有两个线程, 同时创建instanceA 和instanceB, instanceA和instanceB都引用了instanceC. 他们同步进行, 都去创建instanceC. 首先A去创建, A在实例化instanceC以后就将其放入到一级缓存了, 这时候, B去一级缓存里拿. 此时拿到的instanceC是不完整的. 后面的属性赋值, 初始化都还没有执行呢. 所以, 我们增加二级缓存来解决这个问题. </p>
<h5 id="5-增加二级缓存-区分完整的bean和纯净的bean"><a href="#5-增加二级缓存-区分完整的bean和纯净的bean" class="headerlink" title="5. 增加二级缓存, 区分完整的bean和纯净的bean."></a>5. 增加二级缓存, 区分完整的bean和纯净的bean.</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainStart</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 一级缓存</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 二级缓存</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 读取bean定义, 当然在spring中肯定是根据配置 动态扫描注册的
     *
     * InstanceA和InstanceB都有注解@Component, 所以, 在spring扫描读取配置类的时候, 会把他们两个扫描到BeanDefinitionMap中.
     * 这里, 我们省略这一步, 直接将instanceA和instanceB放到BeanDefinitionMap中.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        RootBeanDefinition aBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>InstanceA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RootBeanDefinition bBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>InstanceB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"instanceA"</span><span class="token punctuation">,</span> aBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"instanceB"</span><span class="token punctuation">,</span> bBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 第一步: 扫描配置类, 读取bean定义</span>
        <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 第二步: 循环创建bean</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key<span class="token operator">:</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 第一次: key是instanceA, 所以先创建A类</span>
            <span class="token function">getBean</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 测试: 看是否能执行成功</span>
        InstanceA instanceA <span class="token operator">=</span> <span class="token punctuation">(</span>InstanceA<span class="token punctuation">)</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"instanceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        instanceA<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取bean, 根据beanName获取
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 增加一个出口. 判断实体类是否已经被加载过了</span>
        Object singleton <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**
         * 第一步: 实例化
         * 我们这里是模拟, 采用反射的方式进行实例化. 调用的也是最简单的无参构造函数
         */</span>
        RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>RootBeanDefinition<span class="token punctuation">)</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 调用无参的构造函数进行实例化</span>
        Object instanceBean <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 第二步: 放入到二级缓存
         */</span>
        earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> instanceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         *  第三步: 属性赋值
         *  instanceA这类类里面有一个属性, InstanceB. 所以, 先拿到 instanceB, 然后在判断属性头上有没有Autowired注解.
         *  注意: 这里我们只是判断有没有Autowired注解. spring中还会判断有没有@Resource注解. @Resource注解还有两种方式, 一种是name, 一种是type
          */</span>
        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField<span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 判断每一个属性是否有@Autowired注解</span>
            Autowired annotation <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 设置这个属性是可访问的</span>
                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 那么这个时候还要构建这个属性的bean.</span>
                <span class="token comment" spellcheck="true">/*
                 * 获取属性的名字
                 * 真实情况, spring这里会判断, 是根据名字, 还是类型, 还是构造函数来获取类.
                 * 我们这里模拟, 所以简单一些, 直接根据名字获取.
                 */</span>
                String name <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * 这样, 在这里我们就拿到了 instanceB 的 bean
                 */</span>
                Object fileObject <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 为属性设置类型</span>
                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instanceBean<span class="token punctuation">,</span> fileObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


        <span class="token comment" spellcheck="true">/**
         * 第四步: 初始化
         * 初始化就是设置类的init-method.这个可以设置也可以不设置. 我们这里就不设置了
         */</span>

        <span class="token comment" spellcheck="true">/**
         * 第二步: 放入到一级缓存
         */</span>
        singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> instanceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instanceBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 判断是否是循环引用的出口.
     * @param beanName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 先去一级缓存里拿,如果一级缓存没有拿到,去二级缓存里拿</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObjects<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>如上图所示,增加了一个二级缓存. 首先, 构建出instanceBean以后, 直接将其放入到二级缓存中. 这时只是一个纯净的bean, 里面还没有给属性赋值, 初始化. 在给属性赋值完成, 初始化完成以后, 在将其放入到一级缓存中.</p>
<p>我们判断缓存中是否有某个实例bean的时候, 先去一级缓存中判断是否有完整的bean, 如果没有, 就去二级缓存中判断有没有实例化过这个bean.</p>
<h5 id="总结-一级缓存和二级缓存的作用"><a href="#总结-一级缓存和二级缓存的作用" class="headerlink" title="总结: 一级缓存和二级缓存的作用"></a>总结: 一级缓存和二级缓存的作用</h5><table>
<thead>
<tr>
<th>一级缓存</th>
<th>二级缓存</th>
</tr>
</thead>
<tbody><tr>
<td>解决循环依赖的问题</td>
<td>在创建实例bean和放入到一级缓存之间还有一段间隙. 如果在这之间从一级缓存拿实例, 肯定是返回null的. 为了避免这个问题, 增加了二级缓存.</td>
</tr>
</tbody></table>
<p>我们都知道spring中有一级缓存, 二级缓存, 三级缓存. 一级缓存和二级缓存的作用我们知道了, 那么三级缓存有什么用呢?</p>
<h5 id="6-增加三级缓存"><a href="#6-增加三级缓存" class="headerlink" title="6. 增加三级缓存"></a>6. 增加三级缓存</h5><p>三级缓存有什么作用呢? 这个问题众说纷纭, 有说代理, 有说AOP. 其实AOP的问题可以用二级缓存来解决. 下面就来看看AOP如何用二级缓存解决.</p>
<p>创建AOP动态代理 (不是耦合的, 采用解耦的, 通过BeanPostProcessor bean的后置处理器来创建). 之前讲过, 如下图</p>
<p>在初始化之后, 调用Bean的后置处理器去创建的AOP的动态代理<br><img src="/images/spring5-circular-dependency-manually-build/spring5-circular-dependency-manually-build-init-beanPostProcessor-bean.png" alt="build-init-beanPostProcessor-bean.png"><br>如上图. 我们在创建bean 的时候, 会有很多Bean的后置处理器BeanPostProcessor. 如果有AOP, 会在什么时候创建呢? 在初始化以后, 调用BeanPostProcessor创建动态代理.</p>
<p>结合上面的代码, 我们想一想, 其实在初始化以后创建动态代理就晚了. 为什么呢? 因为, 如果有循环依赖, 在初始化之后才调用, 那就不是动态代理. 其实我们这时候应该在实例化之后, 放入到二级缓存之前调用</p>
<p>问题: 在创建bean的时候, 在哪里创建的动态代理, 这个应该怎么回答呢?<br>很多人会说在初始化之后, 或者在实例化之后.<br>其实更严谨的说, 有两种情况: 第一种是在初始化之后调用 . 第二种是出现了循环依赖, 会在实例化之后调用</p>
<p>我们上面说的就是第二种情况. 也就是说,正常情况下是在初始化之后调用的, 但是如果有循环依赖, 就要在实例化之后调用了.</p>
<p>下面来看看如何在二级缓存加动态代理.</p>
<p>首先, 我们这里有循环依赖, 所以将动态代理放在实例化之后 </p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * 获取bean, 根据beanName获取
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 增加一个出口. 判断实体类是否已经被加载过了</span>
        Object singleton <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**
         * 第一步: 实例化
         * 我们这里是模拟, 采用反射的方式进行实例化. 调用的也是最简单的无参构造函数
         */</span>
        RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>RootBeanDefinition<span class="token punctuation">)</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 调用无参的构造函数进行实例化</span>
        Object instanceBean <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 创建AOP动态代理 (不是耦合的, 采用解耦的, 通过BeanPostProcessor bean的后置处理器得来的.  之前讲过,
         * 在初始化之后, 调用Bean的后置处理器去创建的AOP的动态代理 )
         */</span>
        instanceBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkProxyBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>instanceBean<span class="token punctuation">,</span> <span class="token string">"instanceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 第二步: 放入到二级缓存
         */</span>
        earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> instanceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         *  第三步: 属性赋值
         *  instanceA这类类里面有一个属性, InstanceB. 所以, 先拿到 instanceB, 然后在判断属性头上有没有Autowired注解.
         *  注意: 这里我们只是判断有没有Autowired注解. spring中还会判断有没有@Resource注解. @Resource注解还有两种方式, 一种是name, 一种是type
          */</span>
        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField<span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 判断每一个属性是否有@Autowired注解</span>
            Autowired annotation <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 设置这个属性是可访问的</span>
                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 那么这个时候还要构建这个属性的bean.</span>
                <span class="token comment" spellcheck="true">/*
                 * 获取属性的名字
                 * 真实情况, spring这里会判断, 是根据名字, 还是类型, 还是构造函数来获取类.
                 * 我们这里模拟, 所以简单一些, 直接根据名字获取.
                 */</span>
                String name <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * 这样, 在这里我们就拿到了 instanceB 的 bean
                 */</span>
                Object fileObject <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 为属性设置类型</span>
                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instanceBean<span class="token punctuation">,</span> fileObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


        <span class="token comment" spellcheck="true">/**
         * 第四步: 初始化
         * 初始化就是设置类的init-method.这个可以设置也可以不设置. 我们这里就不设置了
         */</span>
　　　　  <span class="token comment" spellcheck="true">//   正常动态代理创建的时机</span>

        <span class="token comment" spellcheck="true">/**
         * 第五步: 放入到一级缓存
         */</span>
        singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> instanceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instanceBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这里只是简单模拟了动态代理.</p>
<p>我们知道动态代理有两个地方. 如果是普通类动态代理在初始化之后执行, 如果是循环依赖, 那么动态代理是在实例化之后.</p>
<p>上面在实例化之后创建proxy的代码不完整, 为什么不完整呢, 因为没有判断是否是循环依赖.<br>我们简单模拟一个动态代理的实现. </p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkProxyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">SmartInstantiationAwareBeanPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 假设A被切点命中 需要创建代理  @PointCut("execution(* *..InstanceA.*(..))")
     * @param bean the raw bean instance
     * @param beanName the name of the bean
     * @return
     * @throws BeansException
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 假设A被切点命中 需要创建代理  @PointCut("execution(* *..InstanceA.*(..))")</span>

        <span class="token comment" spellcheck="true">/**
         * 这里, 我们简单直接判断bean是不是InstanceA实例, 如果是, 就创建动态代理.
         * 这里没有去解析切点, 解析切点是AspectJ做的事.
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">InstanceA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            JdkDynimcProxy jdkDynimcProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynimcProxy</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> jdkDynimcProxy<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>这里直接判断, 如果bean是InstanceA的实例, 那么就调用bean的动态代理. 动态代理的简单逻辑就是: 解析切面, 然后创建类, 如果类不存在就新增, 如果存在则不在创建, 直接取出来返回.</p>
<p>在来看看动态代理,放在实例化之后. 创建AOP, 但是, 在这里创建AOP动态代理的条件是循环依赖.</p>
<h5 id="问题1-那么如何判断是循环依赖呢"><a href="#问题1-那么如何判断是循环依赖呢" class="headerlink" title="问题1: 那么如何判断是循环依赖呢?"></a>问题1: 那么如何判断是循环依赖呢?</h5><p>二级缓存中bean不是null.</p>
<p>如果一个类在创建的过程中, 会放入到二级缓存, 如果完全创建完了, 会放入到一级缓存, 然后删除二级缓存. 所以, 如果二级缓存中的bean只要存在, 就说明这个类是创建中, 出现了循环依赖.</p>
<h5 id="问题2-什么时候判断呢"><a href="#问题2-什么时候判断呢" class="headerlink" title="问题2: 什么时候判断呢?"></a>问题2: 什么时候判断呢?</h5><p>应该在getSingleton()判断是否是循环依赖的时候判断. 因为这时候我们刚好判断了二级缓存中bean是否为空.</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * 判断是否是循环引用的出口.
     * @param beanName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 先去一级缓存里拿,如果一级缓存没有拿到,去二级缓存里拿</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObjects<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            <span class="token comment" spellcheck="true">/**
             * 第一次创建bean是正常的instanceBean. 他并不是循环依赖. 第二次进来判断, 这个bean已经存在了, 就说明是循环依赖了
             * 这时候通过动态代理创建bean. 然后将这个bean在放入到二级缓存中覆盖原来的instanceBean.
             */</span>
            Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkProxyBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

            earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>这样我们在循环依赖的时候就完成了AOP的创建. 这是在二级缓存里创建的AOP</p>
<h5 id="问题3-那这是不是说就不需要三级缓存了呢"><a href="#问题3-那这是不是说就不需要三级缓存了呢" class="headerlink" title="问题3: 那这是不是说就不需要三级缓存了呢?"></a>问题3: 那这是不是说就不需要三级缓存了呢?</h5><p>那么,来找问题. 这里有两个问题:</p>
<blockquote>
<p>1: 我们发现在创建动态代理的时候, 我们使用的bean的后置处理器JdkProxyBeanPostProcessor.这有点不太符合规则,因为, spring在getBean()的时候并没有使用Bean的后置处理器, 而是在createBean()的时候才去使用的bean的后置处理器.<br> 2: 如果A是AOP, 他一直都是, 最开始创建的时候也应该是. 使用这种方法, 结果是第一次创建出来的bean不是AOP动态代理.</p>
</blockquote>
<p>对于第一个问题: 我们希望在实例化的时候创建AOP, 但是具体判断是在getSingleton()方法里判断. 这里通过三级缓存来实现. 三级缓存里面放的是一个接口定义的钩子方法. 方法的执行在后面调用的时候执行.</p>
<p>对于第二个问题: 我们的二级缓存就不能直接保存instanceBean实例了, 增加一个参数, 用来标记当前这个类是一个正在创建中的类. 这样来判断循环依赖.</p>
<p>下面先来看看创建的三个缓存和一个标识</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一级缓存</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 二级缓存: 为了将成熟的bean和纯净的bean分离. 避免读取到不完整的bean.</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 三级缓存:</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ObjectFactory<span class="token operator">></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 循环依赖的标识---当前正在创建的实例bean</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> singletonsCurrectlyInCreation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>然后在来看看循环依赖的出口</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * 判断是否是循环引用的出口.
     * @param beanName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//先去一级缓存里拿</span>
        Object bean <span class="token operator">=</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 一级缓存中没有, 但是正在创建的bean标识中有, 说明是循环依赖</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> singletonsCurrectlyInCreation<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bean <span class="token operator">=</span> earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 如果二级缓存中没有, 就从三级缓存中拿</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 从三级缓存中取</span>
                ObjectFactory objectFactory <span class="token operator">=</span> singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>objectFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 这里是真正创建动态代理的地方.</span>
                    Object obj <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 然后将其放入到二级缓存中. 因为如果有多次依赖, 就去二级缓存中判断. 已经有了就不在再次创建了</span>
                    earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这里的逻辑是, 先去一级缓存中拿, 一级缓存放的是成熟的bean, 也就是他已经完成了属性赋值和初始化. 如果一级缓存没有, 而正在创建中的类标识是true, 就说明这个类正在创建中, 这是一个循环依赖. 这个时候就去二级缓存中取数据, 二级缓存中的数据是何时放进去的呢, 是后面从三级缓存中创建动态代理后放进去的. 如果二级缓存为空, 说明没有创建过动态代理, 这时候在去三级缓存中拿, 然后创建动态代理. 创建完以后放入二级缓存中, 后面就不用再创建.<br>完成的代码如下:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>circulardependencies<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowire<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>BeanDefinition<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>RootBeanDefinition<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentHashMap<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainStart</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BeanDefinition<span class="token operator">></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 一级缓存</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 二级缓存: 为了将成熟的bean和纯净的bean分离. 避免读取到不完整的bean.</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 三级缓存:</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ObjectFactory<span class="token operator">></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 循环依赖的标识---当前正在创建的实例bean</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> singletonsCurrectlyInCreation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 读取bean定义, 当然在spring中肯定是根据配置 动态扫描注册的
     *
     * InstanceA和InstanceB都有注解@Component, 所以, 在spring扫描读取配置类的时候, 会把他们两个扫描到BeanDefinitionMap中.
     * 这里, 我们省略这一步, 直接将instanceA和instanceB放到BeanDefinitionMap中.
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        RootBeanDefinition aBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>InstanceA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RootBeanDefinition bBeanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>InstanceB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"instanceA"</span><span class="token punctuation">,</span> aBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"instanceB"</span><span class="token punctuation">,</span> bBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 第一步: 扫描配置类, 读取bean定义</span>
        <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 第二步: 循环创建bean</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key<span class="token operator">:</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 第一次: key是instanceA, 所以先创建A类</span>
            <span class="token function">getBean</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 测试: 看是否能执行成功</span>
        InstanceA instanceA <span class="token operator">=</span> <span class="token punctuation">(</span>InstanceA<span class="token punctuation">)</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"instanceA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        instanceA<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 获取bean, 根据beanName获取
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 增加一个出口. 判断实体类是否已经被加载过了</span>
        Object singleton <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 标记bean正在创建</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singletonsCurrectlyInCreation<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            singletonsCurrectlyInCreation<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**
         * 第一步: 实例化
         * 我们这里是模拟, 采用反射的方式进行实例化. 调用的也是最简单的无参构造函数
         */</span>
        RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>RootBeanDefinition<span class="token punctuation">)</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 调用无参的构造函数进行实例化</span>
        Object instanceBean <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment" spellcheck="true">/**
         * 第二步: 放入到三级缓存
         * 每一次createBean都会将其放入到三级缓存中. getObject是一个钩子方法. 在这里不会被调用.
         * 什么时候被调用呢?
         * 在getSingleton()从三级缓存中取数据, 调用创建动态代理的时候
         */</span>
        singletonFactories<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ObjectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkProxyBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//earlySingletonObjects.put(beanName, instanceBean);</span>

        <span class="token comment" spellcheck="true">/**
         *  第三步: 属性赋值
         *  instanceA这类类里面有一个属性, InstanceB. 所以, 先拿到 instanceB, 然后在判断属性头上有没有Autowired注解.
         *  注意: 这里我们只是判断有没有Autowired注解. spring中还会判断有没有@Resource注解. @Resource注解还有两种方式, 一种是name, 一种是type
         */</span>
        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> beanClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field declaredField<span class="token operator">:</span> declaredFields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 判断每一个属性是否有@Autowired注解</span>
            Autowired annotation <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>annotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 设置这个属性是可访问的</span>
                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 那么这个时候还要构建这个属性的bean.</span>
                <span class="token comment" spellcheck="true">/*
                 * 获取属性的名字
                 * 真实情况, spring这里会判断, 是根据名字, 还是类型, 还是构造函数来获取类.
                 * 我们这里模拟, 所以简单一些, 直接根据名字获取.
                 */</span>
                String name <span class="token operator">=</span> declaredField<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * 这样, 在这里我们就拿到了 instanceB 的 bean
                 */</span>
                Object fileObject <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 为属性设置类型</span>
                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instanceBean<span class="token punctuation">,</span> fileObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>


        <span class="token comment" spellcheck="true">/**
         * 第四步: 初始化
         * 初始化就是设置类的init-method.这个可以设置也可以不设置. 我们这里就不设置了
         */</span>


        <span class="token comment" spellcheck="true">/**
         * 第五步: 放入到一级缓存
         *
         * 在这里二级缓存存的是动态代理, 那么一级缓存肯定也要存动态代理的实例.
         * 从二级缓存中取出实例, 放入到一级缓存中
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instanceBean <span class="token operator">=</span> earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        singletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> instanceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instanceBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 判断是否是循环引用的出口.
     * @param beanName
     * @return
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//先去一级缓存里拿,</span>
        Object bean <span class="token operator">=</span> singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 一级缓存中没有, 但是正在创建的bean标识中有, 说明是循环依赖</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> singletonsCurrectlyInCreation<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bean <span class="token operator">=</span> earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 如果二级缓存中没有, 就从三级缓存中拿</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 从三级缓存中取</span>
                ObjectFactory objectFactory <span class="token operator">=</span> singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>objectFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 这里是真正创建动态代理的地方.</span>
                    Object obj <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 然后将其放入到二级缓存中. 因为如果有多次依赖, 就去二级缓存中判断. 已经有了就不在再次创建了</span>
                    earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="/images/spring5-circular-dependency-manually-build/spring5-circular-dependency-manually-build-circulardependencies.png" alt="manually-build-circulardependencies.png"><br>下面就我们的代码分析一下:</p>
<p>第一种情况: 没有循环依赖</p>
<p>第二种情况: 有循环依赖</p>
<p>第三种情况: 有多次循环依赖</p>
<p>我们模拟一个循环依赖的场景, 覆盖这三种情况.<br><img src="/images/spring5-circular-dependency-manually-build/spring5-circular-dependency-manually-build-circulardependencies-diagram.png" alt="manually-build-circulardependencies-diagram.png"><br>用代码表示</p>
<p>类A</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>circulardependencies<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> B b<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> C c<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>类B</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>circulardependencies<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> A a<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> B b<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>类C</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>circulardependencies<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> A a<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>其中类A刚好匹配AOP的切面@PointCut(“execution(* …A.(…))”)</p>
<p>下面分析他们的循环依赖关系.</p>
<p>此时beanDefinitionMap中有三个bean定义. 分别是A, B, C</p>
<ul>
<li>1.先解析类A, 根据上面的流程.<ul>
<li>首先调用getSingleton, 此时一级缓存, 二级缓存都没有, 正在创建标志也是null. 所以, 返回的是null<br>_ 标记当前类正在创建中</li>
<li>实例化</li>
<li>将A放入到三级缓存, 并定义动态代理的钩子方法</li>
<li>属性赋值. A有两个属性, 分别是B和C. 都带有@Autowired注解, 先解析B.</li>
<li>A暂停, 解析B</li>
</ul>
</li>
<li>2.解析A类的属性类B<ul>
<li>首先调用getSingleton, 此时一级缓存, 二级缓存都没有, 正在创建标志也是null. 所以, 返回的是null</li>
<li>标记当前类正在创建中</li>
<li>实例化</li>
<li>将B放入到三级缓存, 并定义动态代理的钩子方法</li>
<li>属性赋值. B有两个属性, 分别是A和C. 都带有@Autowired注解, 先解析A. 在解析C</li>
<li>B暂停, 解析A</li>
</ul>
</li>
<li>3.解析B类的属性A<ul>
<li>首先调用getSingleton, 此时一级缓存中这个属性为null, 正在创建中标志位true, 二级缓存为空, 从三级缓存中创建动态代理, 然后判断是否符合动态代理切面要求, A符合. 所以通过动态代理创建A的代理bean放入到二级缓存. 返回实例bean.</li>
<li>A此时已经存在了, 所以, 直接返回</li>
</ul>
</li>
<li>4.解析B类的属性C<ul>
<li>首先调用getSingleton, 此时一级缓存, 二级缓存都没有, 正在创建标志也是null. 所以, 返回的是null</li>
<li>标记当前类C正在创建中</li>
<li>实例化</li>
<li>将C放入到三级缓存, 并定义动态代理的钩子方法</li>
<li>属性赋值. C有一个属性, 是A. 带有@Autowired注解, 先解析A</li>
<li>C暂停, 解析A</li>
</ul>
</li>
<li>5.解析C中的属性A<ul>
<li>首先调用getSingleton()方法, 此时一级缓存中没有, 标志位为true, 二级缓存中已经有A的动态代理实例了, 所以,直接返回.</li>
<li>A此时已经在存在, 直接返回</li>
</ul>
</li>
<li>6.继续解析B类的属性C<ul>
<li>接着第4步往下走</li>
<li>初始化类C</li>
<li>将类C放入到一级缓存中. 放之前去二级缓存中取, 二级缓存中没有. 所以, 这里存的是C通过反射构建的instanceBean</li>
</ul>
</li>
<li>7.继续解析A类的属性类B<ul>
<li>接着第2步往下走</li>
<li>初始化类B</li>
<li>将类B放入到一级缓存中. 放之前去二级缓存中取.二级缓存中没有, 所以, 这里存的是B通过反射构建的instanceBean</li>
<li>构建结束,返回</li>
</ul>
</li>
<li>8.解析A类的属性类C<ul>
<li>首先调用getSingleton()方法, 此时一级缓存中已经有了类C, 所以直接返回</li>
</ul>
</li>
<li>9.继续解析A类<ul>
<li>接着第1步往下走</li>
<li>初始化类A</li>
<li>将A放入到一级缓存中. 放之前判断二级缓存中有没有实例bean, 我们发现有, 所以, 取出来放入到A的一级缓存中.</li>
<li>构建bean结束, 返回</li>
</ul>
</li>
<li>10.接下来构建beanDefinitionMap中的类B<ul>
<li>首先调用getSingleton()方法, 此时一级缓存中已经有了类B, 所以直接返回</li>
</ul>
</li>
<li>11.接下来构建beanDefinitionMap中的类C<ul>
<li>首先调用getSingleton()方法, 此时一级缓存中已经有了类C, 所以直接返回</li>
</ul>
</li>
</ul>
<p>至此整个构建过程结束.</p>
<h3 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结:"></a>三.总结:</h3><h5 id="再来感受一下三级缓存的作用"><a href="#再来感受一下三级缓存的作用" class="headerlink" title="再来感受一下三级缓存的作用:"></a>再来感受一下三级缓存的作用:</h5><blockquote>
<p>一级缓存: 用来存放成熟的bean. 这个bean如果是切入点, 则是一个动态代理的bean,如果不是切入点, 则是一个普通的类<br>二级缓存: 用来存放循环依赖过程中创建的动态代理bean.<br>三级缓存: 用来存放动态代理的钩子方法. 用来在需要构建动态代理类的时候使用.</p>
</blockquote>
]]></content>
      <categories>
        <category>spring circular dependency</category>
      </categories>
      <tags>
        <tag>spring5</tag>
        <tag>circular dependency</tag>
      </tags>
  </entry>
  <entry>
    <title>spring5源码 - ioc加载整体流程详解</title>
    <url>/2021/10/14/spring5-source-code-ioc-process-description/</url>
    <content><![CDATA[<p>通过上篇文章<a href="https://xiaomozhang.github.io/2021/10/14/spring5-source-code-bean-life-cycle/"><code>spring5源码 - IOC加载过程 Bean的生命周期</code></a>知道了spring ioc的加载过程,<br>具体如下图. 下面我们就来对照下图, 看看ioc加载的源代码.<br><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-sourcecode-info.png" alt="ioc加载的源代码流程图.png"><br>下面在用装修类比, 看看个个组件都是怎么工作的.<br><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-furnish-example.png" alt="装修类比图.png"><br>接下来是源码分析的整体结构图. 对照上面的思路梳理出来的<br><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-annotationConfigapplicationcontext-process.png" alt="ioc-source-code-process.png"></p>
<h3 id="一、源码分析的入口"><a href="#一、源码分析的入口" class="headerlink" title="一、源码分析的入口"></a>一、源码分析的入口</h3><p>通常,我们的入口都是从main方法进入. 这里我们也来定义一个main方法</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainStarter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 第一步: 通过AnnotationConfigApplicationContext读取一个配置类</span>
        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainStarter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"package name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>顺便再来看看还有哪些相关的类</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 这是一个配置类,
 * 在配置类里面定义了扫描的包路径com.lxl.www.iocbeanlifecicle
 * 这是会将这个包下配置了注解的类扫描到ioc容器里面,成为一个成熟的bean
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.lxl.www.iocbeanlifecicle"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span></code></pre>
<p>这个类有一个注解@Configuration, 这样这个类会被扫描成bean</p>
<p>还有一个注解@ComponentScan(backPackage = {“com.lxl.<a href="http://www.iocbeanlifecicle”}/">www.iocbeanlifecicle”}</a>) 他表示, 请扫描com.lxl.<a href="http://www.iocbeanlifecicle包下所有的类/">www.iocbeanlifecicle包下所有的类</a>.</p>
<p>com.lxl.<a href="http://www.iocbeanlifecicle/">www.iocbeanlifecicle</a> 这个包下还有哪些类呢? 我们来看看项目结构<br><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-iocbeanlifecicle-project.png" alt="iocbeanlifecicle-project.png"><br>这是这个包下完整的项目结构.</p>
<p>下面会逐渐说明, 每个类的用途</p>
<h3 id="二-最重要的类BeanFactory"><a href="#二-最重要的类BeanFactory" class="headerlink" title="二. 最重要的类BeanFactory"></a>二. 最重要的类BeanFactory</h3><p>我们知道在将一个class加载为bean的过程中BeanFactory是最最重要的, 那么他是何时被加载的呢?</p>
<p>我们来跟踪一下带有一个参数的构造方法AnnotationConfigApplicationContext</p>
<pre class=" language-text"><code class="language-text">public AnnotationConfigApplicationContext(Class<?>… componentClasses) {
// 进入构造函数, 首先调用自身的构造方法this();
// 调用自身的构造方法之前, 要先调用父类的构造方法
this();
// retister配置注册类
register(componentClasses);
// ioc容器shua新接口–非常重要
refresh();
}</code></pre>
<p>这就是AnnotationConfigApplicationContext初始化的时候做的三件事</p>
<p>第一件事: this(); //调用自身的无参构造方法. 同时调用父类的构造方法</p>
<p>第二件事: register(componentClasses); // 调用注册器, 这里会加载两个BeanDefinitionReader和BeanDefinitionScanner. 这两位的角色是什么呢? 可以回忆一下之前的框架图</p>
<p>第三件事: refresh(); // 这是ioc容器刷新, 非常重要. 无论是spring boot还是spring mvc都有这个方法. 这个方法包含了整个spring ioc加载的全生命流程. 也是我们要重点学习的方法</p>
<p>下面来看看BeanFactory是何时被加载进来的呢?</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotationConfigApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">GenericApplicationContext</span> <span class="token keyword">implements</span> <span class="token class-name">AnnotationConfigRegistry</span> <span class="token punctuation">{</span>
　　<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> </code></pre>
<p>父类是GenericApplicationContext, 其无参构造函数就做了一件事</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 构造了一个BeanFactory.</span>
        <span class="token comment" spellcheck="true">// 在调用GenericApplicationContext父类构造函数, 为ApplicationContext spring上下文对象初始化beanFactory</span>
        <span class="token comment" spellcheck="true">// 为什么初始化的是DefaultListableBeanFactory呢?</span>
        <span class="token comment" spellcheck="true">// 我们在看BeanFactory接口的时候发现DefaultListableBeanFactory是最底层的实现, 功能是最全的.</span>
        <span class="token comment" spellcheck="true">// 查看</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> </code></pre>
<p>初始化DefaultListableBeanFactory.</p>
<p>问题: BeanFactory有很多, 为什么初始化的时候选择DefaultListableBeanFactory呢?</p>
<p>我们来看看DefaultListableBeanFactory的结构. 快捷键option + command + u –&gt; Java Class Diagrams<br><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-java-class-diagramsimage.png" alt="ioc-java-class-diagrams.png"><br>通过观察, 我们发现, DefaultListableBeanFactory实现了各种各样的BeanFactory接口, 同时还是先了BeanDefinitionRegistry接口.</p>
<p>也就是说, DefaultListableBeanFactory不仅仅有BeanFactory的能力, 同时还有BeanDefinitionRegistry的能力. 它的功能是最全的.</p>
<p>所以, 我们使用的是一个功能非常强大的类Bean工厂类.</p>
<blockquote>
<p>AnnotationConfigApplicationContext继承了GenericApplicationContext,<br>而 GenericApplicationContext 实现了AnnotationConfigRegistry接口.<br>所以AnnotationConfigApplicationContext有AnnotationConfigRegistry的能力.</p>
</blockquote>
<h3 id="三-bean定义读取器AnnotatedBeanDefinitionReader"><a href="#三-bean定义读取器AnnotatedBeanDefinitionReader" class="headerlink" title="三. bean定义读取器AnnotatedBeanDefinitionReader"></a>三. bean定义读取器AnnotatedBeanDefinitionReader</h3><p>接着上面, 第一步调用的是this(). 也就是AnnotationConfigApplicationContext的无参构造函数. 在这个无参构造函数里一共做了两件事情</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/**
         * 创建了一个Bean定义的读取器.
         * 完成了spring内部BeanDefinition的注册(主要是后置处理器)
         * 读取了很多spring自定义的配置(主要是后置处理器). 这些类都是spring 的原始类.
         */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 创建BeanDefinition扫描器
         * 可以用来扫描包或者类, 进而转换为bd
         *
         * Spring默认的扫描包不是这个scanner对象
         * 而是自己new的一个ClassPathBeanDefinitionScanner
         * Spring在执行工程后置处理器ConfigurationClassPostProcessor时, 去扫描包时会new一个ClassPathBeanDefinitionScanner
         *
         * 这里的scanner仅仅是为了程序员可以手动调用AnnotationConfigApplicationContext对象的scan方法
         * 通过调用context.scan("package name");扫描处理配置类
         * 扫描
         */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<ul>
<li>初始化AnnotatedBeanDefinitionReader.</li>
<li>初始化ClassPathBeanDefinitionScanner<h5 id="我们先来看看AnnotatedBeanDefinitionReader"><a href="#我们先来看看AnnotatedBeanDefinitionReader" class="headerlink" title="我们先来看看AnnotatedBeanDefinitionReader"></a>我们先来看看AnnotatedBeanDefinitionReader</h5><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-annotatedBeanDefinitionReader-process.png" alt="annotatedBeanDefinitionReader-process.png"><br>在这里的描述中, 我们知道BeanDefinitionReader是要去扫描配置或者注解, 如果理解为销售的话, 就是扫描楼盘. 这里面就有我们的潜在用户. 也就是我们需要将其转换为bean的对象.</li>
</ul>
<p>那么初始化的时候,AnnotatedBeanDefinitionReader做了什么呢?</p>
<p>重点看这句</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">,</span> Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"BeanDefinitionRegistry must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token string">"Environment must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> registry<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionEvaluator</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
　　　　 <span class="token comment" spellcheck="true">// 注册注解类型配置的处理器</span>
        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>注册注解类型配置的处理器<br>AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * Register all relevant annotation post processors in the given registry.
     * @param registry the registry to operate on
     * @param source the configuration source element (already extracted)
     * that this registration was triggered from. May be {@code null}.
     * @return a Set of BeanDefinitionHolders, containing all bean definitions
     * that have actually been registered by this call
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>BeanDefinitionHolder<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>
            BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 获取到beanFactory</span>
        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">unwrapDefaultListableBeanFactory</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 判断beanFactory中是否有AnnotationAwareOrderComparator和ContextAnnotationAutowireCandidateResolver
         * 没有则添加
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getDependencyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">setDependencyComparator</span><span class="token punctuation">(</span>AnnotationAwareOrderComparator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">setAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// BeanDefinitionHolder: 为BeanDefinition设置名字和别名</span>
        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 1. 如果registry中没有ConfigurationClassPostProcessor配置类后置处理器, 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 构建BeanDefinitionHolder, 并添加到beanDefs</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 2. 如果rigistry中, 没有AutowiredAnnotationBeanPostProcessor  Autowired注解bean的后置处理器, 则添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 构建BeanDefinitionHolder, 并添加到beanDefs</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span>
        <span class="token comment" spellcheck="true">// 3. 检查对JSR-250的支持, 如果rigistry中没有CommonAnnotationBeanPostProcessor通用注解后置处理器, 则添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jsr250Present <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>CommonAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 构建BeanDefinitionHolder, 并添加到beanDefs</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span>
        <span class="token comment" spellcheck="true">// 4. 检查对jpa的支持, 如果不包含internalPersistenceAnnotationProcessor, 持久化注解处理器, 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jpaPresent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                def<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span>
                        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                        <span class="token string">"Cannot load optional framework class: "</span> <span class="token operator">+</span> PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 5. 检查对事件监听的支持, 如果不包含事件监听处理器internalEventListenerProcessor, 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>EventListenerMethodProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 6. 如果不包含事件监听工厂处理器internalEventListenerFactory , 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>DefaultEventListenerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> beanDefs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>在这里注册了6个后置处理器<br><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-ioc-register-processor.png" alt="registerAnnotationConfigProcessors.png"></p>
<h3 id="四-bean定义扫描器ClassPathBeanDefinitionScanner"><a href="#四-bean定义扫描器ClassPathBeanDefinitionScanner" class="headerlink" title="四. bean定义扫描器ClassPathBeanDefinitionScanner"></a>四. bean定义扫描器ClassPathBeanDefinitionScanner</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/**
         * 创建了一个Bean定义的读取器.
         * 完成了spring内部BeanDefinition的注册(主要是后置处理器)
         * 读取了很多spring自定义的配置(主要是后置处理器). 这些类都是spring 的原始类.
         */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 创建BeanDefinition扫描器
         * 可以用来扫描包或者类, 进而转换为bd
         *
         * Spring默认的扫描包不是这个scanner对象
         * 而是自己new的一个ClassPathBeanDefinitionScanner
         * Spring在执行工程后置处理器ConfigurationClassPostProcessor时, 去扫描包时会new一个ClassPathBeanDefinitionScanner
         *
         * 这里的scanner仅仅是为了程序员可以手动调用AnnotationConfigApplicationContext对象的scan方法
         * 通过调用context.scan("package name");扫描处理配置类
         * 扫描
         */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>主要看加粗的部分. 这部分初始化了BeanDefinition扫描器. 这里的这个scanner不是spring默认的扫描包. Spring默认的扫描包不是这个scanner对象, 而是自己new的一个ClassPathBeanDefinitionScanner, Spring在执行后置处理器ConfigurationClassPostProcessor时, 去扫描包时会new一个ClassPathBeanDefinitionScanner, 这里的scanner仅仅是为了程序员可以手动调用AnnotationConfigApplicationContext对象的scan方法, 通过调用context.scan(“package name”);扫描处理配置类</p>
<p>比如,我们可以这样使用</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 第一步: 通过AnnotationConfigApplicationContext读取一个配置类</span>
        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainStarter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"package name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-classPathBeanDefinitionScanner-process.png" alt="classPathBeanDefinitionScanner-process.png"><br>首先调用了ClassPathBeanDefinitionScanner(this) 构造方法, 然后调用registerDefaultFilter注册摩尔恩的过滤器, 这里面默认的过滤器有两种: javax.annotation.ManagedBean 和 javax.inject.Named. 同时隐含的会注册所有带有@Component @Repository @Controller关键字的注解</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDefaultFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>includeFilters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ClassLoader cl <span class="token operator">=</span> ClassPathScanningCandidateComponentProvider<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>includeFilters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">)</span> ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.annotation.ManagedBean"</span><span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// JSR-250 1.1 API (as included in Java EE 6) not available - simply skip.</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>includeFilters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>
                    <span class="token punctuation">(</span><span class="token punctuation">(</span>Class<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">)</span> ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.inject.Named"</span><span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"JSR-330 'javax.inject.Named' annotation found and supported for component scanning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// JSR-330 API not available - simply skip.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>在ClassPathBeanDefinitionScanner中, 有一个非常重要的方法, 就是doScan(String …beanPackages). 用来扫描传入的配置文件.</p>
<h3 id="五-注册配置方法"><a href="#五-注册配置方法" class="headerlink" title="五. 注册配置方法"></a>五. 注册配置方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Class<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> componentClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 进入构造函数, 首先调用自身的构造方法this();</span>
        <span class="token comment" spellcheck="true">// 调用自身的构造方法之前, 要先调用父类的构造方法</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// register配置注册类</span>
        <span class="token function">register</span><span class="token punctuation">(</span>componentClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// ioc容器shua新接口--非常重要</span>
        <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这是AnnotationConfigApplicationContext方法的构造函数, 里面第二步调用了register()方法.<br><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-annotationConfigApplicationContext-lazy.png" alt="annotationConfigApplicationContext-lazy.png"></p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">doRegisterBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> beanClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String name<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> qualifiers<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>T<span class="token operator">></span> supplier<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Nullable</span> BeanDefinitionCustomizer<span class="token punctuation">[</span><span class="token punctuation">]</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 将入参beanClass构建成AnnotatedGenericBeanDefinition对象</span>
        AnnotatedGenericBeanDefinition abd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>abd<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        abd<span class="token punctuation">.</span><span class="token function">setInstanceSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ScopeMetadata scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        abd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String beanName <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 处理通用定义注解</span>
        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>qualifiers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> qualifier <span class="token operator">:</span> qualifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>Primary<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    abd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Lazy<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    abd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    abd<span class="token punctuation">.</span><span class="token function">addQualifier</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutowireCandidateQualifier</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>customizers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionCustomizer customizer <span class="token operator">:</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        BeanDefinitionHolder definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        definitionHolder <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<blockquote>
<p>AnnotationConfigUtils.processCommonDefinitionAnnotations(abd);用来加载bean元数据中的注解<br>BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, this.registry);用来注册bean定义. 经过一些列的教研, 没有问题, 然后将其让入到this.beanDefinitionMap.put(beanName, beanDefinition);中<br>具体做了哪些工作, 可以看看上面的结构图</p>
</blockquote>
<h3 id="六-Refresh-–-spring-ioc容器刷新方法"><a href="#六-Refresh-–-spring-ioc容器刷新方法" class="headerlink" title="六. Refresh() – spring ioc容器刷新方法"></a>六. Refresh() – spring ioc容器刷新方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Class<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> componentClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 进入构造函数, 首先调用自身的构造方法this();</span>
        <span class="token comment" spellcheck="true">// 调用自身的构造方法之前, 要先调用父类的构造方法</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// register配置注册类</span>
        <span class="token function">register</span><span class="token punctuation">(</span>componentClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// ioc容器shua新接口--非常重要</span>
        <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>refresh()方法, spring有很多衍生品, 比如spring mvc ,spring boot, 都有这个方法. refresh()里面定义了spring ioc中bean加载的全过程.</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 1. 准备刷新上下文环境</span>
            <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// Tell the subclass to refresh the internal bean factory.</span>
            <span class="token comment" spellcheck="true">//2. 获取告诉子类初始化bean工厂, 不同工厂不同实现</span>
            ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment" spellcheck="true">// Prepare the bean factory for use in this context.</span>
            <span class="token comment" spellcheck="true">//3. 对bean工厂进行填充属性</span>
            <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Allows post-processing of the bean factory in context subclasses.</span>
                <span class="token comment" spellcheck="true">// 4. 留个子类去实现该接口</span>
                <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Invoke factory processors registered as beans in the context.</span>
                <span class="token comment" spellcheck="true">/*
                 * 调用bean工厂的后置处理器
                 * 1. 会再次class扫描成BeanDefinition
                 */</span>
                <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Register bean processors that intercept bean creation.</span>
                <span class="token comment" spellcheck="true">// 注册bean后置处理器</span>
                <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize message source for this context.</span>
                <span class="token comment" spellcheck="true">// 初始化国际化资源处理器</span>
                <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize event multicaster for this context.</span>
                <span class="token comment" spellcheck="true">// 创建事件多播放器</span>
                <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize other special beans in specific context subclasses.</span>
                <span class="token comment" spellcheck="true">// 这个方法通用也是留个子类实现的, spring boot也是从这个方法进行启动</span>
                <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Check for listener beans and register them.</span>
                <span class="token comment" spellcheck="true">// 将事件监听器注册到多播放器上</span>
                <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>
                <span class="token comment" spellcheck="true">// 实例化剩余的单实例bean</span>
                <span class="token comment" spellcheck="true">/**
                 * 这个方法就是循环遍历BeanDefinitionMap, 调用getBean, 去生产bean
                 */</span>
                <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Last step: publish corresponding event.</span>
                <span class="token comment" spellcheck="true">//最后容器刷新 发布刷新时间(spring cloud是从这里启动的 )</span>
                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>
                            <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>
                <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>
                <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Propagate exception to caller.</span>
                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>
                <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>
                <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>这是refresh()的源码, 在refresh()中做了很多很多事情, 我们这次主要看和ioc中beanFactory创建bean有关的部分.</p>
<p>一个是: invokeBeanFactoryPostProcessors(beanFactory);</p>
<p>另一个是: finishBeanFactoryInitialization(beanFactory);</p>
<h4 id="6-1-invokeBeanFactoryPostProcessors-beanFactory-调用BeanFactory的后置处理器"><a href="#6-1-invokeBeanFactoryPostProcessors-beanFactory-调用BeanFactory的后置处理器" class="headerlink" title="6.1 invokeBeanFactoryPostProcessors(beanFactory) 调用BeanFactory的后置处理器"></a>6.1 invokeBeanFactoryPostProcessors(beanFactory) 调用BeanFactory的后置处理器</h4><p>在AnnotatedBeanDefinitionReader这里扫描了所有后置处理器, 将其解析到beanDefinitionMap, 在这里调用后置处理器</p>
<h5 id="6-2-finishBeanFactoryInitialization-实例化剩余的单实例bean"><a href="#6-2-finishBeanFactoryInitialization-实例化剩余的单实例bean" class="headerlink" title="6.2 finishBeanFactoryInitialization 实例化剩余的单实例bean"></a>6.2 finishBeanFactoryInitialization 实例化剩余的单实例bean</h5><p>这个方法就是循环遍历BeanDefinitionMap, 调用getBean, 去生产bean</p>
<p>这里第一个是: 冻结配置类, 意思是说, 我马上就要开始制造bean了, bean配置文件不能再修改了, 所以被冻结</p>
<p>原理是有一个变量标记, 设为true标记冻结.</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>configurationFrozen <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>frozenBeanDefinitionNames <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>第二个是实例化创建bean</p>
<pre class=" language-java"><code class="language-java">Override
    <span class="token keyword">protected</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        RootBeanDefinition mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Make sure bean class is actually resolved at this point, and</span>
        <span class="token comment" spellcheck="true">// clone the bean definition in case of a dynamically resolved Class</span>
        <span class="token comment" spellcheck="true">// which cannot be stored in the shared merged bean definition.</span>
        <span class="token comment" spellcheck="true">// 确保此时的bean已经被解析了</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Prepare method overrides.</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/**
             * 验证和准备覆盖方法(近在xml方式中)
             * lookup-method 和 replace-method
             * 这两个配置存放在BeanDefinition中的methodOverrides(仅在XML方式中)
             * 在XML方式中, bean实例化的过程中如果检测到存在methodOverrides
             * 则会动态的为当前bean生成代理并使用对应的拦截器为bean做增强处理
             * 具体的实现我们后续分析. 现在先看mbdtoUse.prepareMethodOverrides()代码块
             */</span>
            mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>
            <span class="token comment" spellcheck="true">/**
             * 初始化之前的解析
             * 第一次调用bean后置处理器
             * 铜鼓bean的后置处理器来进行后置处理生成代理对象, 一般情况下在此处不会生成代理对象
             * 为什么不能生成代理对象? 不管是我们的JDK还是cglib代理都不会在此处进行代理, 因为我们的真实对象没有生成,
             * 所以在这里不会生成代理对象
             * 这一步是aop和事务的关键, 因为在这解析我们的aop切面信息进行缓存.
             */</span>
            Object bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>
                    <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/*
             * 执行创建bean, 这里就是执行创建bean的三个步骤
             * 1. 实例化
             * 2. 填充属性, @Autowired @Value
             * 3. 初始化  初始化initMethod方法和初始化destroy方法
             */</span>
            Object beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> <span class="token operator">|</span> ImplicitlyAppearedSingletonException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// A previously detected exception with proper bean creation context already,</span>
            <span class="token comment" spellcheck="true">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>
                    mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Unexpected exception during bean creation"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>创建bean的三个步骤</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// Instantiate the bean.</span>
        BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/**
             * 第一步: 实例化
             * 这里面的调用链非常深, 后面再看
             * bean实例化有两种方式
             * 1. 使用反射:  使用反射也有两种方式,
             *         a. 通过无参构造函数 (默认的方式)
             *             从beanDefinition中可以得到beanClass,
             *             ClassName = BeanDefinition.beanclass
             *             Class clazz = Class.forName(ClassName);
             *             clazz.newInstance();
             *             这样就可以实例化bean了
             *
             *         b. 通过有参函数.
             *            ClassName = BeanDefinition.beanclass
             *             Class clazz = Class.forName(ClassName);
             *             Constractor con = class.getConstractor(args....)
             *             con.newInstance();
             *
             * 2. 使用工厂
             *         我们使用@Bean的方式, 就是使用的工厂模式, 自己控制实例化过程
             *
             */</span>
            instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 这里使用了装饰器的设计模式</span>
        <span class="token keyword">final</span> Object bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> NullBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Allow post-processors to modify the merged bean definition.</span>
        <span class="token comment" spellcheck="true">// 允许后置处理器修改已经合并的beanDefinition</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>postProcessingLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span>postProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token function">applyMergedBeanDefinitionPostProcessors</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>
                            <span class="token string">"Post-processing of merged bean definition failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                mbd<span class="token punctuation">.</span>postProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Eagerly cache singletons to be able to resolve circular references</span>
        <span class="token comment" spellcheck="true">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span>
        <span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>
                <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
                        <span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Initialize the bean instance.</span>
        Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 第二步:填充属性, 给属性赋值(调用set方法)  这里也是调用的后置处理器</span>
            <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第三步: 初始化.</span>
            exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BeanCreationException</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>
                        mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Initialization of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            Object earlySingletonReference <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonReference <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">==</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    exposedObject <span class="token operator">=</span> earlySingletonReference<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowRawInjectionDespiteWrapping <span class="token operator">&amp;&amp;</span> <span class="token function">hasDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependentBeans <span class="token operator">=</span> <span class="token function">getDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> actualDependentBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>dependentBeans<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String dependentBean <span class="token operator">:</span> dependentBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">removeSingletonIfCreatedForTypeCheckOnly</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            actualDependentBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>actualDependentBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>
                                <span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' has been injected into other beans ["</span> <span class="token operator">+</span>
                                StringUtils<span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>actualDependentBeans<span class="token punctuation">)</span> <span class="token operator">+</span>
                                <span class="token string">"] in its raw version as part of a circular reference, but has eventually been "</span> <span class="token operator">+</span>
                                <span class="token string">"wrapped. This means that said other beans do not use the final version of the "</span> <span class="token operator">+</span>
                                <span class="token string">"bean. This is often the result of over-eager type matching - consider using "</span> <span class="token operator">+</span>
                                <span class="token string">"'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Register bean as disposable.</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>
                    mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Invalid destruction signature"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>具体结构如下:<br><img src="/images/spring5-source-code-ioc-process-description/spring5-source-code-ioc-process-description-doCreateBean-process.png" alt="doCreateBean-process.png"></p>
]]></content>
      <categories>
        <category>spring5 ioc process</category>
      </categories>
      <tags>
        <tag>spring5</tag>
        <tag>IOC process</tag>
      </tags>
  </entry>
  <entry>
    <title>java8新特性原理以及实战应用-lambda函数式编程与日期篇</title>
    <url>/2021/10/10/java8-lambda-with-date-process/</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1:简介"></a>1:简介</h2><p>目前截止2021年9月java最新的jdk版本为17,而我们目前大部分公司现在的java项目都还在运行的是java8的版本,对于我们目前的项目而言,java8已经能够满足我们大部分工作中的应用场景。而且截止目前为止oracle公司还仍在继续维护着java8的更新操作。其实java8早在2014年就已经推出了发型版。那么java8都有哪些新特性呢?我们是否都一一掌握了？我想如果我们都掌握并熟知了java8的新特性以及应用技巧之后,一定会对我们日常的开发效率会有或多或少的帮助,提升我们的撸码效率,避免踩坑。规避项目中一些不必要的风险。总之我们可以这么想,如果我们都不了解java8新特新的魅力,又怎会体验到java14的快乐。(哈哈😝,题外话)</p>
<h2 id="2-新特性介绍与序言"><a href="#2-新特性介绍与序言" class="headerlink" title="2:新特性介绍与序言"></a>2:新特性介绍与序言</h2><p>在开始介绍java8新特性之前,必须先引出一篇oracle官方非常具有权威的<a href="https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html">java8新特性(相对于java8以前的版本)</a>其实可以参考我们如下这张图<br><img src="/images/java8-lambda-with-date-process/jdk1.8-new-characteristic.png" alt="JDK8新特性.png"><br>简单介绍jdeps类依赖分析器工具的使用。着重讲解Lambda特性和Stram、日期,配合起来用可以极大提高生产力，写出高效率、干净、简洁的代码。</p>
<h2 id="3-jdeps工具的使用"><a href="#3-jdeps工具的使用" class="headerlink" title="3:jdeps工具的使用"></a>3:jdeps工具的使用</h2><p>熟悉java的小伙伴应该清楚jdk在默认给我们自带了一些方便的tools执行工具如:<br>jps:是JDK 1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况。</p>
<p>javac: 该工具可以将后缀名为.java的源文件编译为后缀名为.class的可以运行于Java虚拟机的字节码.</p>
<p>java: 执行启动java服务,可以执行.class后缀文件或者是jar file</p>
<p>javap:javap是jdk自带的反解析工具。它的作用就是根据class字节码文件，反解析出当前类对应的code区（汇编指令）、本地变量表、异常表和代码行偏移量映射表、常量池等等信息。</p>
<p>jjs 等等…..<br>这样的命令工具有好多,我们接下来看下jdeps</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将java文件编译为class文件</span>
javac <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>ideaProjects<span class="token operator">/</span>java8feature<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>xes<span class="token operator">/</span>sample<span class="token operator">/</span>function<span class="token operator">/</span>OptionalTest<span class="token punctuation">.</span>java
<span class="token comment" spellcheck="true">//jdeps命令执行可以看到class的依赖关系</span>
jdeps <span class="token operator">/</span>Users<span class="token operator">/</span>xiaozhangge<span class="token operator">/</span>ideaProjects<span class="token operator">/</span>java8feature<span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>xes<span class="token operator">/</span>sample<span class="token operator">/</span>function<span class="token operator">/</span>OptionalTest<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name">OptionalTest<span class="token punctuation">.</span>class</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">/</span>Library<span class="token operator">/</span>Java<span class="token operator">/</span>JavaVirtualMachines<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_231<span class="token punctuation">.</span>jdk<span class="token operator">/</span>Contents<span class="token operator">/</span>Home<span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>rt<span class="token punctuation">.</span>jar
   com<span class="token punctuation">.</span>xes<span class="token punctuation">.</span>sample<span class="token punctuation">.</span><span class="token function">function</span> <span class="token punctuation">(</span>OptionalTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
      <span class="token operator">-</span><span class="token operator">></span> java<span class="token punctuation">.</span>io
      <span class="token operator">-</span><span class="token operator">></span> java<span class="token punctuation">.</span>lang
      <span class="token operator">-</span><span class="token operator">></span> java<span class="token punctuation">.</span>time
      <span class="token operator">-</span><span class="token operator">></span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format
      <span class="token operator">-</span><span class="token operator">></span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal
<span class="token comment" spellcheck="true">//不仅可以分析class文件还可以分析jar包,感兴趣的小伙伴可以自行尝试</span></code></pre>
<h2 id="4-Stream流编程实战"><a href="#4-Stream流编程实战" class="headerlink" title="4:Stream流编程实战"></a>4:Stream流编程实战</h2><p>现在我们开始进入jdk1.8 stream流编程,这是jdk1.8中最大的亮点,也是最有用的一个特性。<br>概念:<br>  首先stream是一个高级的迭代器,单向,不可往复,数据只能遍历一次,遍历过一次后即用尽了,就好比流水从面前流过,一去不复返。它不是一个数据结构,也不是一个集合,它不会存放数据,stream最关注的事情<br>是如何将数据进行高效的处理,它其实就是将数据在流水线一样的环境中进行处理(parallelStream)。<br>而和传统迭代器又不同的是,Stream可以并行化操作,迭代器只能命令式地、串行化操作。顾名思义,当使用串行方式去遍历时,每个item读完后再读下一个 item。而使用并行去遍历时,数据会被分成多个段，<br>其中每一个都在不同的线程中处理,然后将结果一起输出。Stream的并行操作依赖于Java7中引入的Fork/Join框架（JSR166y）来拆分任务和加速处理过程。</p>
<h3 id="4-1-初识Stream"><a href="#4-1-初识Stream" class="headerlink" title="4.1:初识Stream:"></a>4.1:初识Stream:</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>IntStream<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemeo2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//使用Stream内部迭代</span>
        <span class="token comment" spellcheck="true">//map就是中间操作(返回Stream的操作)</span>
        <span class="token comment" spellcheck="true">//sum就是终止操作</span>
         <span class="token keyword">int</span> sum <span class="token operator">=</span> IntStream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> intNum <span class="token operator">=</span> IntStream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StreamDemeo2<span class="token operator">:</span><span class="token operator">:</span>integerNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"惰性求值就是最终没有调用的情况下,中间操作不会被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        IntStream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>StreamDemeo2<span class="token operator">:</span><span class="token operator">:</span>integerNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 求值运算
     *
     * @param i
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">integerNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了乘以2操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>通过以上的例子我们可以看到,如果方法返回的数据类型是stream流对象,那么默认程序是不会做任何操作的,只有真正最后有取值操作才会进行中间过程的逻辑运算。</p>
<h3 id="4-2-Stream流编程创建"><a href="#4-2-Stream流编程创建" class="headerlink" title="4.2:Stream流编程创建:"></a>4.2:Stream流编程创建:</h3><table>
    <tbody><tr bgcolor="gray">
        <td>类别</td> 
        <td>相关方法</td> 
   </tr>
   <tr>
        <td>集合</td> 
        <td>Collection.stream/parallelStream</td> 
   </tr>
   <tr>
        <td>数组</td> 
        <td>Arrays.stream</td> 
   </tr>
    <tr>
        <td rowspan="2">数字Stream</td>    
        <td>IntSream/LongStream</td>  
    </tr>
    <tr>
        <td>Random.ins/longs/doubles</td>  
    </tr>
<tr>
        <td>自己创建</td> 
        <td>Stream.generate/iterate</td> 
   </tr>
</tbody></table>

<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>IntStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//从结合创建'</span>
        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//从数组创建</span>
        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//创建数字流</span>
        IntStream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        IntStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//使用random创建一个无限流</span>
        <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Random random<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//自己产生流</span>
        Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4-3-Stream流编程-中间操作"><a href="#4-3-Stream流编程-中间操作" class="headerlink" title="4.3:Stream流编程-中间操作"></a>4.3:Stream流编程-中间操作</h3><table>
    <tbody><tr>
        <td colspan="2">相关方法</td> 
        <td>描述</td> 
   </tr>
    <tr>
        <td rowspan="5">无状态操作</td>    
        <td>map/mapToXxx</td>  
        <td rowspan="5">无状态就表示我当前的操作跟其它元素的前后没有依赖关系</td>   
    </tr>
    <tr>
        <td>flatMap/flatMapToXxx</td>  
    </tr>
    <tr>
        <td>filter</td>  
    </tr>
<tr>
        <td>peek</td>  
    </tr>
<tr>
        <td>unordered</td>  
    </tr>
 <tr>
        <td rowspan="3">有状态操作</td>    
        <td>distinct</td>  
        <td rowspan="3">有状态的结果需要依赖于其它元素</td>   
    </tr>
  <tr>
        <td>sorted</td>  
    </tr>  
<tr>
        <td>limit/skip</td>  
    </tr>
</tbody></table>


<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String str <span class="token operator">=</span> <span class="token string">"my name is 007"</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//输出每个单词的长度</span>
        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>world <span class="token operator">-</span><span class="token operator">></span> world<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//输出符合长度的单词</span>
        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>world <span class="token operator">-</span><span class="token operator">></span> world<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//长度大于3单词的长度分别有哪些</span>
        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>world <span class="token operator">-</span><span class="token operator">></span> world<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>world <span class="token operator">-</span><span class="token operator">></span> world<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//flatMap操作</span>
        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//peek操作 peek主要用于debug 是中间操作 而forEach是终止操作</span>
        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//limit使用主要用于无限流</span>
        <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">></span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4-4-Stream流编程-终止操作"><a href="#4-4-Stream流编程-终止操作" class="headerlink" title="4.4:Stream流编程-终止操作"></a>4.4:Stream流编程-终止操作</h3><table>
    <tbody><tr>
        <td colspan="2">相关方法</td> 
        <td>描述</td> 
   </tr>
   <tr>
        <td rowspan="4">非短路操作</td> 
        <td>forEach/forEachOrderd</td> 
        <td rowspan="4">只有将所有的数据进行汇总完毕才会中断流程</td>    
   </tr>
    <tr> 
        <td>collect/toArray</td>  
    </tr>
    <tr>
        <td>reduce</td>  
    </tr>
    <tr>
        <td>min/max/count</td>  
    </tr>
 <tr>
        <td rowspan="2">短路操作</td> 
        <td>findFirst/findAny</td> 
        <td rowspan="2">我们不需要所有的结果计算完就可以结束这个流的操作</td>    
   </tr>
    <tr> 
        <td>allMatch/anyMatch/noneMatch</td>  
    </tr>
</tbody></table>


<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>OptionalInt<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        String str <span class="token operator">=</span> <span class="token string">"my name is 007"</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======================非短路操作===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//使用并行流操作</span>
        str<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//使用forEachOrdered来保证有序</span>
        str<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEachOrdered</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//收集list</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//reduce结果集</span>
        Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> reduce <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1 <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//max操作</span>
        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======================短路操作===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        OptionalInt first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="4-5-Stream流编程-并行流"><a href="#4-5-Stream流编程-并行流" class="headerlink" title="4.5:Stream流编程-并行流"></a>4.5:Stream流编程-并行流</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ForkJoinPool<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>IntStream<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//同步执行</span>
        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>StreamDemo<span class="token operator">:</span><span class="token operator">:</span>debug<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//并行流执行</span>
        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>StreamDemo<span class="token operator">:</span><span class="token operator">:</span>debug<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//先并行在串行</span>
        <span class="token comment" spellcheck="true">//结论:多次调用parallel和sequential,以最后一次调用为准</span>
        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//调用parallel产生并行流</span>
                <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>StreamDemo<span class="token operator">:</span><span class="token operator">:</span>debug<span class="token punctuation">)</span>
                <span class="token comment" spellcheck="true">//调用sequential产生串行流</span>
                <span class="token punctuation">.</span><span class="token function">sequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>StreamDemo<span class="token operator">:</span><span class="token operator">:</span>debug2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//并行流使用的线程池为ForkJoinPool.commonPool</span>
        <span class="token comment" spellcheck="true">//默认线程池数是当前机器的cpu个数,可以通过以下参数进行修改线程数,我们可以通过java.util.concurrent.ForkJoinPool类的</span>
        <span class="token comment" spellcheck="true">//makeCommonPool()方法进行参考:</span>
        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"java.util.concurrent.ForkJoinPool.common.parallelism"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>StreamDemo<span class="token operator">:</span><span class="token operator">:</span>debug<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//使用自己的线程池,不使用默认的,防止任务被阻塞</span>
        ForkJoinPool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>StreamDemo<span class="token operator">:</span><span class="token operator">:</span>debug<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                pool<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"debug"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">debug2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"debug"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span></code></pre>
<h3 id="4-6-Stream流编程-收集器"><a href="#4-6-Stream流编程-收集器" class="headerlink" title="4.6:Stream流编程-收集器"></a>4.6:Stream流编程-收集器</h3><p>收集器言外之意就是要将我们流处理的数据收集起来。它可以返回List、Map等。使用收集器的地方比较多,比如sum/count/distinct/group by</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>MapUtils<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>IntSummaryStatistics<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeSet<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 性别
 */</span>
<span class="token keyword">enum</span> Gender <span class="token punctuation">{</span>
    MALE<span class="token punctuation">,</span> FEMALE
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * 班级
 */</span>
<span class="token keyword">enum</span> Grade <span class="token punctuation">{</span>
    ONE<span class="token punctuation">,</span> TWO<span class="token punctuation">,</span> THREE<span class="token punctuation">,</span> FOUR<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * 学生 对象
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**
     * 姓名
     */</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 年龄
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 性别
     */</span>
    <span class="token keyword">private</span> Gender gender<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 班级
     */</span>
    <span class="token keyword">private</span> Grade grade<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> Gender gender<span class="token punctuation">,</span> Grade grade<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"[name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", gender="</span> <span class="token operator">+</span> gender
                <span class="token operator">+</span> <span class="token string">", grade="</span> <span class="token operator">+</span> grade <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 测试数据</span>
        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>ONE<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"大明"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>THREE<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小白"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>FEMALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>TWO<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小黑"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>FEMALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>FOUR<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>FEMALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>THREE<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小黄"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>ONE<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小青"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>FEMALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>THREE<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小紫"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>FEMALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>TWO<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>ONE<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小李"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>ONE<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小马"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>FEMALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>FOUR<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小刘"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">,</span> Grade<span class="token punctuation">.</span>FOUR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 得到所有学生的年龄列表</span>
        <span class="token comment" spellcheck="true">// s -> s.getAge() --> Student::getAge , 不会多生成一个类似 lambda$0这样的函数</span>
        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ages <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span>TreeSet<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有学生的年龄:"</span> <span class="token operator">+</span> ages<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 统计汇总信息</span>
        IntSummaryStatistics agesSummaryStatistics <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄汇总信息:"</span> <span class="token operator">+</span> agesSummaryStatistics<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 分块</span>
        Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> genders <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>
                Collectors<span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// System.out.println("男女学生列表:" + genders);</span>
        MapUtils<span class="token punctuation">.</span><span class="token function">verbosePrint</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span> <span class="token string">"男女学生列表"</span><span class="token punctuation">,</span> genders<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 分组</span>
        Map<span class="token operator">&lt;</span>Grade<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> grades <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getGrade<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MapUtils<span class="token punctuation">.</span><span class="token function">verbosePrint</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span> <span class="token string">"学生班级列表"</span><span class="token punctuation">,</span> grades<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 得到所有班级学生的个数</span>
        Map<span class="token operator">&lt;</span>Grade<span class="token punctuation">,</span> Long<span class="token operator">></span> gradesCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors
                <span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getGrade<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MapUtils<span class="token punctuation">.</span><span class="token function">verbosePrint</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span> <span class="token string">"班级学生个数列表"</span><span class="token punctuation">,</span> gradesCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h2 id="5-从入门开始深度理解lambda"><a href="#5-从入门开始深度理解lambda" class="headerlink" title="5:从入门开始深度理解lambda"></a>5:从入门开始深度理解lambda</h2><p>先从几段代码中进行简单去理解:</p>
<pre class=" language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span>predicate test<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment" spellcheck="true">//断言测试,输入任意类型,输出boolean</span>
Predicate<span class="token operator">&lt;</span>Integer<span class="token operator">></span> predicate <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//只接收int值的断言</span>
IntPredicate intPredicate <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">></span> i<span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intPredicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//接收两个参数的断言判断</span>
BiPredicate<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> biPredicate <span class="token operator">=</span> <span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> i1 <span class="token operator">+</span> i2 <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>biPredicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span>Consumer test简单版使用<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment" spellcheck="true">//消费函数,只有输入无任何返回,箭头左边为方法入参,箭头右边为函数执行过程</span>
Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> content <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"小张哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//由于左侧的输入参数和右侧的输出参数相同,所我们完全可以使用方法引用的方式继续精简其输出</span>
Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> simplify <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">;</span>
simplify<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"简化版"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="5-1-日常开发中高级使用—方法引用"><a href="#5-1-日常开发中高级使用—方法引用" class="headerlink" title="5.1:日常开发中高级使用—方法引用:"></a>5.1:日常开发中高级使用—方法引用:</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>IntUnaryOperator<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>UnaryOperator<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"小黄"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> food <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 狗叫的静态方法
     *
     * @param dog
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog <span class="token operator">+</span> <span class="token string">"叫了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 吃狗粮
     *
     * @param num
     * @return 还剩多少斤
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃了"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"斤狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">-=</span> num<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//静态方法引用</span>
        Consumer<span class="token operator">&lt;</span>Dog<span class="token operator">></span> dogConsumer <span class="token operator">=</span> Dog<span class="token operator">:</span><span class="token operator">:</span>bark<span class="token punctuation">;</span>
        dogConsumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//非静态方法使用对象实例引用,eat方法符合输入/输出参数的形式</span>
        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> eatFunction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>eat<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eatFunction还剩"</span> <span class="token operator">+</span> eatFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"斤狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//由于输入和输出的参数类型一致,我们可以替换为一元函数形式调用</span>
        UnaryOperator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> unaryDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>eat<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unaryDog还剩"</span> <span class="token operator">+</span> unaryDog<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"斤狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//当然jdk1.8针对输入和输出参数相同的操作还指定了具体类型的一元函数,这样我们在操作医院还是就不需要再指明参具体参数的泛型</span>
        IntUnaryOperator intUnaryDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>eat<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"intUnaryDog还剩"</span> <span class="token operator">+</span> intUnaryDog<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"斤狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>反思:上面的代码示例中调用静态方法可以使用Dog::bark;进行引用方法的实例。那么非静态的方法我们该如何进行使用Dog::eat方式来进行引用呢?这里牵涉到不同的语言里面对this的实现方法。我们知道静态方法和实例方法的区别是实例方法有this，静态方法没有。java里面是怎么样实现this的呢？<br><strong>java里面默认把this作为参数,放到实例(非静态)方法的第一个参数</strong><br>就是说</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃了"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"斤狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">-=</span> num<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>编译之后和下面这样的代码编译之后是一样的！</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">eat</span><span class="token punctuation">(</span>Dog <span class="token keyword">this</span><span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃了"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"斤狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">-=</span> num<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>执行 javap -c -s -v -l Dog.class 其中我们看到如下:<br><img src="/images/java8-lambda-with-date-process/jdk1.8-lambda-this-problem.png" alt="非静态方法this原理.png"><br>本地变量表查看:<br><img src="/images/java8-lambda-with-date-process/jdk1.8-local-variable-table.png" alt="非静态方法本地变量表.png"><br>所以,我的理解,java里面的所有方法都是静态方法,只是有些方法有this变量,有些没有。<br>所以,成员方法我们也可以写成静态方法的方法引用。如下：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>BiFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Supplier<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"小黄"</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> food <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 狗叫的静态方法
     *
     * @param dog
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog <span class="token operator">+</span> <span class="token string">"叫了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">/**
     * 吃狗粮
     *
     * @param num
     * @return 还剩多少斤
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃了"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">"斤狗粮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>food <span class="token operator">-=</span> num<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>food<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//实例方法通过类名引用</span>
        BiFunction<span class="token operator">&lt;</span>Dog<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> biFunction <span class="token operator">=</span> Dog<span class="token operator">:</span><span class="token operator">:</span>eat<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>biFunction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//无参数构造引用</span>
        Supplier<span class="token operator">&lt;</span>Dog<span class="token operator">></span> supplierDog <span class="token operator">=</span> Dog<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplierDog<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//带参数的构造引用</span>
        Function<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Dog<span class="token operator">></span> functionDog <span class="token operator">=</span> Dog<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>functionDog<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"小花"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="5-2-日常开发中高级使用—类型推断-有时需要我们进行显示进行类型转换"><a href="#5-2-日常开发中高级使用—类型推断-有时需要我们进行显示进行类型转换" class="headerlink" title="5.2:日常开发中高级使用—类型推断(有时需要我们进行显示进行类型转换):"></a>5.2:日常开发中高级使用—类型推断(有时需要我们进行显示进行类型转换):</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">IMath</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">IMath2</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//变量类型定义</span>
        IMath lambda <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//数组定义</span>
        IMath<span class="token punctuation">[</span><span class="token punctuation">]</span> lambdas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//强转类型</span>
        Object lambdaObj <span class="token operator">=</span> <span class="token punctuation">(</span>IMath<span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//通过方法返回类型</span>
        IMath createLambda <span class="token operator">=</span> <span class="token function">createLambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">executeIMath</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeIMath</span><span class="token punctuation">(</span>IMath iMath<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//    public static void executeIMath(IMath2 iMath) {</span>
<span class="token comment" spellcheck="true">//</span>
<span class="token comment" spellcheck="true">//    }</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> IMath <span class="token function">createLambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="5-3-日常开发中高级使用—变量引用"><a href="#5-3-日常开发中高级使用—变量引用" class="headerlink" title="5.3:日常开发中高级使用—变量引用:"></a>5.3:日常开发中高级使用—变量引用:</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/**
         * 匿名内部类引用外部变量为什么必须是final?
         * 原因是java的传递是值传递而不是引用传递。如果是值传递的话,假设外面的参数值进行了修改,
         * 那么会导致内部类中的计算实现不正确性。lambda为了避免这样的问题所以隐式的给为内部类外面的
         * 变量设置为了final,如果是引用传递,那么匿名内部类就不需要这样的考虑了。
         */</span>
        String str <span class="token operator">=</span> <span class="token string">"我们的时间"</span><span class="token punctuation">;</span>
        Consumer<span class="token operator">&lt;</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"20191022"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>值传递:<br><img src="/images/java8-lambda-with-date-process/jdk1.8-pass-by-value.png" alt="值传递.png"><br>引用传递:<br><img src="/images/java8-lambda-with-date-process/jdk1.8-pass-by-reference.png" alt="引用传递.png"></p>
<h3 id="5-4-日常开发中高级使用—级联表达式及柯里化"><a href="#5-4-日常开发中高级使用—级联表达式及柯里化" class="headerlink" title="5.4:日常开发中高级使用—级联表达式及柯里化:"></a>5.4:日常开发中高级使用—级联表达式及柯里化:</h3><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。<br>这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的，尽管它是Moses Schönfinkel和戈特洛布·弗雷格发明的。—–摘自维基百科(wikipedia)</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>IntFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>IntUnaryOperator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Author zyf
 * @Date 2019/12/15 8:50 PM
 * @Description 级联表达式和柯里化
 * 柯里化:将多个参数的函数转换为只有一个参数的函数
 * 柯里化的目的:函数的标准化
 * 高阶函数:返回函数的函数
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurryDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//实现x+y的级联表达式(嵌套多层Function)</span>
        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> fun <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> y <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        IntFunction<span class="token operator">&lt;</span>IntFunction<span class="token operator">&lt;</span>IntUnaryOperator<span class="token operator">>></span> f <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> y <span class="token operator">-</span><span class="token operator">></span> z <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> z<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//54</span>

        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        Function funObj <span class="token operator">=</span> fun<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>funObj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Object obj <span class="token operator">=</span> funObj<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    funObj <span class="token operator">=</span> <span class="token punctuation">(</span>Function<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用结束了"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="5-4-日常开发中高级使用—级联表达式及柯里化-1"><a href="#5-4-日常开发中高级使用—级联表达式及柯里化-1" class="headerlink" title="5.4:日常开发中高级使用—级联表达式及柯里化:"></a>5.4:日常开发中高级使用—级联表达式及柯里化:</h3><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。<br>这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的，尽管它是Moses Schönfinkel和戈特洛布·弗雷格发明的。—–摘自维基百科(wikipedia)</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>IntFunction<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>IntUnaryOperator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Author zyf
 * @Date 2019/12/15 8:50 PM
 * @Description 级联表达式和柯里化
 * 柯里化:将多个参数的函数转换为只有一个参数的函数
 * 柯里化的目的:函数的标准化
 * 高阶函数:返回函数的函数
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurryDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//实现x+y的级联表达式(嵌套多层Function)</span>
        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">>></span> fun <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> y <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        IntFunction<span class="token operator">&lt;</span>IntFunction<span class="token operator">&lt;</span>IntUnaryOperator<span class="token operator">>></span> f <span class="token operator">=</span> x <span class="token operator">-</span><span class="token operator">></span> y <span class="token operator">-</span><span class="token operator">></span> z <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> z<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//54</span>

        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        Function funObj <span class="token operator">=</span> fun<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>funObj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Object obj <span class="token operator">=</span> funObj<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    funObj <span class="token operator">=</span> <span class="token punctuation">(</span>Function<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用结束了"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="6-深入理解函数式接口-amp-自定义lambda"><a href="#6-深入理解函数式接口-amp-自定义lambda" class="headerlink" title="6:深入理解函数式接口&amp;自定义lambda"></a>6:深入理解函数式接口&amp;自定义lambda</h3><p>要想真正彻底的理解函数式接口以及lambda的真正实现细节原理,我们必须先得熟悉和理解以下几个函数式接口。</p>
<pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function中定义了几组类型的函数式接口以及针对基本数据类型的子接口。
Predicate <span class="token operator">--</span> 传入一个参数，返回一个bool结果<span class="token punctuation">,</span>方法为<span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>
Consumer <span class="token operator">--</span> 传入一个参数<span class="token punctuation">,</span>无返回值<span class="token punctuation">,</span>纯消费。 方法为<span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>
Function <span class="token operator">--</span> 传入一个参数<span class="token punctuation">,</span>返回一个结果<span class="token punctuation">,</span>方法为R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>
Supplier <span class="token operator">--</span> 无参数传入<span class="token punctuation">,</span>返回一个结果<span class="token punctuation">,</span>方法为T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
UnaryOperator <span class="token operator">--</span> 一元操作符<span class="token punctuation">,</span> 继承Function<span class="token punctuation">,</span>传入参数的类型和返回类型相同。
BiFunction<span class="token operator">--</span> 二元操作符<span class="token punctuation">,</span> 传入两个参数返回一个结果。这个结果的类型可以与任一参数的类型不相同。
BinaryOperator <span class="token operator">--</span> 二元操作符<span class="token punctuation">,</span> 传入的两个参数的类型和返回类型相同<span class="token punctuation">,</span>继承BiFunction</code></pre>
<p><a href="https://www.runoob.com/java/java8-functional-interfaces.html">详细更多请参考</a><br>下面截图中列出了这些接口在jdk rt.jar包下的java.util.function包<br><img src="/images/java8-lambda-with-date-process/jdk1.8-lambda-function-detail-info.png" alt="函数表达式常用interface接口.png"></p>
<h3 id="6-1初识java-lambda表达式"><a href="#6-1初识java-lambda表达式" class="headerlink" title="6.1初识java lambda表达式"></a>6.1初识java lambda表达式</h3><p>想要初步了解java中的lambda表达式,先来看下一个非常简单的例子,透过例子来熟悉lambda表达式的简洁与强大。</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>IntStream<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayMin</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">660</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                min <span class="token operator">=</span> num<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
        min <span class="token operator">=</span> IntStream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//当然数据量过大的话我们也可以使用并发的方式进行处理我们的数据信息</span>
        min <span class="token operator">=</span> IntStream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>对程序员来说最直观的感受就是用Lambda表达式可以简化很多代码。使用它可以很轻松的将很多行代码缩减成一行。也可以更有效提高我们代码的执行效率,Java Lambda表达式的一个重要用法是简化某些匿名内部类(Anonymous Classes)的写法。<br>在jdk1.8以下,无法将函数作为参数进行传递给一个方法,也无法声明返回一个函数的方法。所以需要lambda函数式编程。</p>
<h3 id="6-2lambda匿名内部类知识点"><a href="#6-2lambda匿名内部类知识点" class="headerlink" title="6.2lambda匿名内部类知识点:"></a>6.2lambda匿名内部类知识点:</h3><p>   1:lambda匿名内部类的运行原理<br>            匿名内部类仍然是一个类,只是不需要程序员显示指定类名,编译器会自动为该类取名.因此如果有如下形式的代码,编译之后将会产生两个class文件：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAnonymousClass</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Anonymous Class Thread run()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>执行命令 javac MainAnonymousClass.java,编译之后文件分布如下,两个class文件分别是主类和匿名内部类产生的：<br><img src="/images/java8-lambda-with-date-process/jdk1.8-javac-command-show-detail.png" alt="lambda匿名内部类核心实现.png"><br>进一步分析主类MainAnonymousClass.class的字节码,可发现其创建了匿名内部类的对象：</p>
<pre class=" language-java"><code class="language-java">xiaozhanggedeMacBook<span class="token operator">-</span>Pro<span class="token operator">:</span>Desktop xiaozhangge$ javap <span class="token operator">-</span>c MainAnonymousClass<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name">Compiled</span> from <span class="token string">"MainAnonymousClass.java"</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAnonymousClass</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">MainAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment" spellcheck="true">// Method java/lang/Object."&lt;init>":()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Code<span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment" spellcheck="true">// class java/lang/Thread</span>
       <span class="token number">3</span><span class="token operator">:</span> dup
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">3</span>                  <span class="token comment" spellcheck="true">// class MainAnonymousClass$1 创建了内部类对象</span>
       <span class="token number">7</span><span class="token operator">:</span> dup
       <span class="token number">8</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment" spellcheck="true">// Method MainAnonymousClass$1."&lt;init>":()V</span>
      <span class="token number">11</span><span class="token operator">:</span> invokespecial #<span class="token number">5</span>                  <span class="token comment" spellcheck="true">// Method java/lang/Thread."&lt;init>":(Ljava/lang/Runnable;)V</span>
      <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment" spellcheck="true">// Method java/lang/Thread.start:()V</span>
      <span class="token number">17</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span></code></pre>
<p>2:lambda匿名内部类this的作用域<br>lambda表达式最终会返回一个实现了指定接口的实例,看上去和内部匿名类很像,但有一个最大的区别就是代码里面的this,内部匿名类<br><strong>this指向的就是匿名类,而lambda表达式里面的this指向的当前类。</strong></p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * lambda表达式的this
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisDemo</span> <span class="token punctuation">{</span>

  <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"ThisDemo"</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 匿名类实现</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

      <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"Runnable"</span><span class="token punctuation">;</span>

      <span class="token annotation punctuation">@Override</span>
      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里的this指向匿名类:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment" spellcheck="true">// lambda实现</span>
    <span class="token comment" spellcheck="true">// 下面会自动生成lambda$0方法,由于使用了this,所以是非static方法</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里的this指向当前的ThisDemo类:"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// lambda实现</span>
    <span class="token comment" spellcheck="true">// 下面会自动生成lambda$1方法,由于没有使用了this,所以是static方法</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这里没有引用this,生成的lambda1方法是static的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ThisDemo demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThisDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    demo<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-javac-class-information.png" alt="编译后字节码详情.png"><br>使用javap -s -p 类名,可以看出一个是static,一个是非staic的<br><img src="/images/java8-lambda-with-date-process/jdk1.8-javap-show-class-information.png" alt="javap反编译详情.png"><br>这就是为什么lambda表达式里面的this指向当前类的底层机制！因为代码就是在本类的一个方法里面执行的。<br>额外说一句，自动生成的方法是否带参数取决于lambda是否有参数，例子中表达式没有参数（箭头左边是空的），所以自动生成的也没有。</p>
<h3 id="6-3自定义实现lambda表达式"><a href="#6-3自定义实现lambda表达式" class="headerlink" title="6.3自定义实现lambda表达式"></a>6.3自定义实现lambda表达式</h3><p>自定义函数接口很容易，只需要编写一个只有一个抽象方法的接口即可。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//无参数样例</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">MyInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/**
 * @Author zyf
 * @Date 2019/12/10 5:01 PM
 * @Description 无参数function
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotParamFunctionInterface</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printContent</span><span class="token punctuation">(</span>MyInterface myInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        myInterface<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        NotParamFunctionInterface<span class="token punctuation">.</span><span class="token function">printContent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭方法~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        MyInterface myInterface <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认函数接口实现"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myInterface<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//有参数样例</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">interface</span> <span class="token class-name">ConsumerInterface</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ParamterCustomInterface</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myForEach</span><span class="token punctuation">(</span>ConsumerInterface<span class="token operator">&lt;</span>T<span class="token operator">></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 1</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ParamterCustomInterface<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParamterCustomInterface</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span>list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span><span class="token function">myForEach</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用自定义函数接口书写Lambda表达式</span>
        ConsumerInterface consumerInterface <span class="token operator">=</span> str <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumerInterface<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"函数式调用!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerInterface<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>其实很多java 1.8中的lambda表达式使用了以上方式进行实现,比如:list–&gt;forEach/Stream—–&gt;peek<br><strong>知识点:</strong><br>1.如果一个接口只有一个抽象方法,那么该接口就是一个函数式接口。<br>2. 如果我们在某个接口上声明了@FunctionalInterface注解,那么编译器就会按照函数式接口的定义来要求该接口。<br>3. 如果某个接口只有一个抽象方法,但我们并没有给接口声明@FunctionalInterface注解,那么编译器依旧会将该接口看做是函数式接口。</p>
<h2 id="7-Optional-类的引入"><a href="#7-Optional-类的引入" class="headerlink" title="7:Optional 类的引入"></a>7:Optional 类的引入</h2><p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。<br>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。<br>Optional 类的引入很好的解决空指针异常。<br>在我们的开发中，NullPointerException可谓是随时随处可见，为了避免空指针异常，我们常常需要进行一些防御式的检查，所以在代码中常常可见if(obj != null) 这样的判断。幸好在JDK1.8中，java为我们提供了一个Optional类，Optional类能让我们省掉繁琐的非空的判断。下面先说一下Optional中为我们提供的方法.<br><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-method-detail-info.png" alt="Optional类相关常用方法.png"><br>下面我们写几个例子来具体看一下每个方法的作用：<br>of</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个值为张三的String类型的Optional</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> ofOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//如果我们用of方法创建Optional对象时，所传入的值为null，则抛出NullPointerException如下图所示</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> nullOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-of-example.png" alt="option.off()运行结果"><br>ofNullable</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//为指定的值创建Optional对象，不管所传入的值为null不为null，创建的时候都不会报错</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> nullOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> nullOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>empty</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个空的String类型的Optional对象</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> emptyOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>get<br>如果我们创建的Optional对象中有值存在则返回此值，如果没有值存在，则会抛出NoSuchElementException异常。小demo如下：</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-get-example.png" alt="option.get()运行结果"></p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> emptyOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emptyOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-empty-example.png" alt="option.empty()运行结果"><br>orElse<br>如果创建的Optional中有值存在，则返回此值，否则返回一个默认值</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> emptyOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emptyOptional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-orElse-example.png" alt="option.orElse()运行结果"><br>orElseGet<br>如果创建的Optional中有值存在，则返回此值，否则返回一个由Supplier接口生成的值</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> emptyOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emptyOptional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"orElseGet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-orElseGet-example.png" alt="option.orElseGet()运行结果"><br>orElseThrow<br>如果创建的Optional中有值存在，则返回此值，否则抛出一个由指定的Supplier接口生成的异常</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span>CustomException<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> emptyOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emptyOptional<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span>CustomException<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CustomException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>4399699891687593264L<span class="token punctuation">;</span>

   <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"自定义异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token function">CustomException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
  <span class="token punctuation">}</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-orElseThrow-example.png" alt="option.orElseThrow()运行结果"><br>filter<br>如果创建的Optional中的值满足filter中的条件，则返回包含该值的Optional对象，否则返回一个空的Optional对象</p>
<pre class=" language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-filter-example.png" alt="option.filter()运行结果"><br>注意Optional中的filter方法和Stream中的filter方法是有点不一样的，Stream中的filter方法是对一堆元素进<br>行过滤，而Optional中的filter方法只是对一个元素进行过滤，可以把Optional看成是最多只包含一个元素的Stream。<br>map<br>如果创建的Optional中的值存在，对该值执行提供的Function函数调用</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//map方法执行传入的lambda表达式参数对Optional实例的值进行修改,修改后的返回值仍然是一个Optional对象</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-map-example.png" alt="option.map()运行结果"><br>flagMap<br>如果创建的Optional中的值存在，就对该值执行提供的Function函数调用，返回一个Optional类型的值，否<br>则就返回一个空的Optional对象.flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回<br>值必须是Optional，map方法的mapping函数返回值可以是任何类型T。调用结束时，flatMap不会对结果<br>用Optional封装。</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//map方法中的lambda表达式返回值可以是任意类型，在map函数返回之前会包装为Optional。 </span>
<span class="token comment" spellcheck="true">//但flatMap方法中的lambda表达式返回值必须是Optionl实例</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringOptional<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-flatMap-example.png" alt="option.flagMap()运行结果"><br>ifPresent</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//ifPresent方法的参数是一个Consumer的实现类，Consumer类包含一个抽象方法，该抽象方法对传入的值进行处理，只处理没有返回值。</span>
Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> stringOptional <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我被处理了。。。"</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><img src="/images/java8-lambda-with-date-process/jdk1.8-optional-ifPresent-example.png" alt="option.ifPresent()运行结果"></p>
<h2 id="8-java8日期和时间"><a href="#8-java8日期和时间" class="headerlink" title="8:java8日期和时间"></a>8:java8日期和时间</h2><p>Java 8通过发布新的Date-Time API 来进一步加强对日期与时间的处理。<br>在旧版的 Java 中，日期时间 API 存在诸多问题，其中有：<br>非线程安全 − java.util.Date 是非线程安全的，所有的日期类都是可变的，这是Java日期类最大的问题之一。<br>          用于格式化日期的类DateFormat被放在java.text包中,它是一个抽象类，所以我们需要实例化一个SimpleDateFormat对象来处理日期格式化，并且DateFormat也是非线程安全，这意味着如果你在多线程程序中调用同一个DateFormat对象,会得到意想不到的结果。<br>设计很差 − Java的日期/时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义。java.util.Date同时包含日期和时间，而java.sql.Date仅包含日期，将其纳入java.sql包并不合理。另外这两个类都有相同的名字，这本身就是一个非常糟糕的设计。<br>时区处理麻烦 − 日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calendar和java.util.TimeZone类，但他们同样存在上述所有的问题。<br>        对日期的计算方式繁琐，而且容易出错，因为月份是从0开始的，从Calendar中获取的月份需要加一才能表示当前月份.<br>Java 8 在 java.time 包下提供了很多新的 API。以下为两个比较重要的 API：<br>Local(本地) − 简化了日期时间的处理，没有时区的问题。<br>Zoned(时区) − 通过制定的时区处理日期时间。<br>新的java.time包涵盖了所有处理日期,时间,日期/时间，时区，时刻（instants），过程（during）与时钟（clock）的操作。</p>
<p>Java 8日期/时间类<br>Java 8的日期和时间类包含LocalDate、LocalTime、Instant、Duration以及Period，这些类都包含在java.time包中，下面我们看看这些类的用法。<br>LocalDate和LocalTime<br>LocalDate类表示一个具体的日期，但不包含具体时间，也不包含时区信息。可以通过LocalDate的静态方法of()创建一个实例，LocalDate也包含一些方法用来获取年份，月份，天，星期几</p>
<pre class=" language-java"><code class="language-java">LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 初始化一个日期：2017-01-04</span>
<span class="token keyword">int</span> year <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 年份：2017</span>
Month month <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 月份：JANUARY</span>
<span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 月份中的第几天：4</span>
DayOfWeek dayOfWeek <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 一周的第几天：WEDNESDAY</span>
<span class="token keyword">int</span> length <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">lengthOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 月份的天数：31</span>
<span class="token keyword">boolean</span> leapYear <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 是否为闰年：false</span></code></pre>
<p>也可以调用静态方法now()来获取当前日期：</p>
<pre class=" language-java"><code class="language-java">LocalDate now <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>LocalTime和LocalDate类似，他们之间的区别在于LocalDate不包含具体时间，而LocalTime包含具体时间，例如：</p>
<pre class=" language-java"><code class="language-java">LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 初始化一个时间：17:23:52</span>
<span class="token keyword">int</span> hour <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// 时：17</span>
<span class="token keyword">int</span> minute <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 分：23</span>
<span class="token keyword">int</span> second <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 秒：52</span></code></pre>
<p>LocalDateTime<br>LocalDateTime类是LocalDate和LocalTime的结合体，可以通过of()方法直接创建，也可以调用LocalDate的atTime()方法或LocalTime的atDate()方法将LocalDate或LocalTime合并成一个LocalDateTime：</p>
<pre class=" language-java"><code class="language-java">LocalDateTime ldt1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JANUARY<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JANUARY<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime ldt2 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>LocalDateTime也提供用于向LocalDate和LocalTime的转化：</p>
<pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> ldt1<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalTime time <span class="token operator">=</span> ldt1<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Instant<br>Instant用于表示一个时间戳，它与我们常使用的System.currentTimeMillis()有些类似，不过Instant可以精确到纳秒（Nano-Second），System.currentTimeMillis()方法只精确到毫秒（Milli-Second）。如果查看Instant源码，发现它的内部使用了两个常量，seconds表示从1970-01-01 00:00:00开始到现在的秒数，nanos表示纳秒部分（nanos的值不会超过999,999,999）。Instant除了使用now()方法创建外，还可以通过ofEpochSecond方法创建：</p>
<pre class=" language-java"><code class="language-java">Instant instant <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>ofEpochSecond()方法的第一个参数为秒，第二个参数为纳秒，上面的代码表示从1970-01-01 00:00:00开始后两分钟的10万纳秒的时刻，控制台上的输出为：</p>
<pre class=" language-java"><code class="language-java"><span class="token number">1970</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span>01T00<span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">.</span>000100Z</code></pre>
<p>Duration<br>Duration的内部实现与Instant类似，也是包含两部分：seconds表示秒，nanos表示纳秒。两者的区别是Instant用于表示一个时间戳（或者说是一个时间点），而Duration表示一个时间段，所以Duration类中不包含now()静态方法。可以通过Duration.between()方法创建Duration对象：</p>
<pre class=" language-java"><code class="language-java">LocalDateTime from <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>JANUARY<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2017-01-05 10:07:00</span>
LocalDateTime to <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>FEBRUARY<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 2017-02-05 10:07:00</span>
Duration duration <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 表示从 2017-01-05 10:07:00 到 2017-02-05 10:07:00 这段时间</span>

<span class="token keyword">long</span> days <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toDays</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 这段时间的总天数</span>
<span class="token keyword">long</span> hours <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这段时间的小时数</span>
<span class="token keyword">long</span> minutes <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这段时间的分钟数</span>
<span class="token keyword">long</span> seconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 这段时间的秒数</span>
<span class="token keyword">long</span> milliSeconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这段时间的毫秒数</span>
<span class="token keyword">long</span> nanoSeconds <span class="token operator">=</span> duration<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 这段时间的纳秒数</span></code></pre>
<p>Duration对象还可以通过of()方法创建，该方法接受一个时间段长度，和一个时间单位作为参数：</p>
<pre class=" language-java"><code class="language-java">Duration duration1 <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 5天</span>
Duration duration2 <span class="token operator">=</span> Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MILLIS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1000毫秒</span></code></pre>
<p>Period<br>Period在概念上和Duration类似，区别在于Period是以年月日来衡量一个时间段，比如2年3个月6天：</p>
<pre class=" language-java"><code class="language-java">Period period <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>Period对象也可以通过between()方法创建，值得注意的是，由于Period是以年月日衡量时间段，所以between()方法只能接收LocalDate类型的参数：</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 2017-01-05 到 2017-02-05 这段时间</span>
Period period <span class="token operator">=</span> Period<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>
                LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>日期的操作和格式化<br>增加和减少日期<br>Java 8中的日期/时间类都是不可变的，这是为了保证线程安全。当然，新的日期/时间类也提供了方法用于创建对象的可变版本，比如增加一天或者减少一天：</p>
<pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 2017-01-05</span>

LocalDate date1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2016</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 修改为 2016-01-05</span>
LocalDate date2 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withMonth</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 修改为 2017-02-05</span>
LocalDate date3 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 修改为 2017-01-01</span>

LocalDate date4 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 增加一年 2018-01-05</span>
LocalDate date5 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 减少两个月 2016-11-05</span>
LocalDate date6 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 增加5天 2017-01-10</span></code></pre>
<p>上面例子中对于日期的操作比较简单，但是有些时候我们要面临更复杂的时间操作，比如将时间调到下一个工作日，或者是下个月的最后一天，这时候我们可以使用with()方法的另一个重载方法，它接收一个TemporalAdjuster参数，可以使我们更加灵活的调整日期：</p>
<pre class=" language-java"><code class="language-java">LocalDate date7 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token function">nextOrSame</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SUNDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 返回下一个距离当前时间最近的星期日</span>
LocalDate date9 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token function">lastInMonth</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回本月最后一个星期六</span></code></pre>
<p>要使上面的代码正确编译，你需要使用静态导入TemporalAdjusters对象：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>temporal<span class="token punctuation">.</span>TemporalAdjusters<span class="token punctuation">.</span>*<span class="token punctuation">;</span></code></pre>
<p>TemporalAdjusters类中包含了很多静态方法可以直接使用，下面的表格列出了一些方法：<br><img src="/images/java8-lambda-with-date-process/jdk1.8-TemporalAdjusters-method-example.png" alt="TemporalAdjusters相关静态方法.png"><br>如果上面表格中列出的方法不能满足你的需求，你还可以创建自定义的TemporalAdjuster接口的实现，TemporalAdjuster也是一个函数式接口，所以我们可以使用Lambda表达式：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TemporalAdjuster</span> <span class="token punctuation">{</span>
    Temporal <span class="token function">adjustInto</span><span class="token punctuation">(</span>Temporal temporal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>比如给定一个日期，计算该日期的下一个工作日（不包括星期六和星期天）：</p>
<pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>temporal <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 当前日期</span>
    DayOfWeek dayOfWeek <span class="token operator">=</span> DayOfWeek<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>temporal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 正常情况下，每次增加一天</span>
    <span class="token keyword">int</span> dayToAdd <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 如果是星期五，增加三天</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayOfWeek <span class="token operator">==</span> DayOfWeek<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dayToAdd <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// 如果是星期六，增加两天</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dayOfWeek <span class="token operator">==</span> DayOfWeek<span class="token punctuation">.</span>SATURDAY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dayToAdd <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> temporal<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>dayToAdd<span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>格式化日期<br>新的日期API中提供了一个DateTimeFormatter类用于处理日期格式化操作，它被包含在java.time.format包中，Java 8的日期类有一个format()方法用于将日期格式化为字符串，该方法接收一个DateTimeFormatter类型参数：</p>
<pre class=" language-java"><code class="language-java">LocalDateTime dateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
String strDate1 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>BASIC_ISO_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 20170105</span>
String strDate2 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2017-01-05</span>
String strDate3 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 14:20:16.998</span>
String strDate4 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 2017-01-05</span>
String strDate5 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"今天是：YYYY年 MMMM DD日 E"</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span>CHINESE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 今天是：2017年 一月 05日 星期四</span></code></pre>
<p>同样，日期类也支持将一个字符串解析成一个日期对象，例如：</p>
<pre class=" language-java"><code class="language-java">String strDate6 <span class="token operator">=</span> <span class="token string">"2017-01-05"</span><span class="token punctuation">;</span>
String strDate7 <span class="token operator">=</span> <span class="token string">"2017-01-05 12:30:05"</span><span class="token punctuation">;</span>
LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strDate6<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime dateTime1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strDate7<span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>时区<br>Java 8中的时区操作被很大程度上简化了，新的时区类java.time.ZoneId是原有的java.util.TimeZone类的替代品。ZoneId对象可以通过ZoneId.of()方法创建，也可以通过ZoneId.systemDefault()获取系统默认时区：</p>
<pre class=" language-java"><code class="language-java">ZoneId shanghaiZoneId <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ZoneId systemZoneId <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>of()方法接收一个“区域/城市”的字符串作为参数，你可以通过getAvailableZoneIds()方法获取所有合法的“区域/城市”字符串：</p>
<pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>String<span class="token operator">></span> zoneIds <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">getAvailableZoneIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>对于老的时区类TimeZone，Java 8也提供了转化方法：</p>
<pre class=" language-java"><code class="language-java">ZoneId oldToNewZoneId <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>有了ZoneId，我们就可以将一个LocalDate、LocalTime或LocalDateTime对象转化为ZonedDateTime对象：</p>
<pre class=" language-java"><code class="language-java">LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ZonedDateTime zonedDateTime <span class="token operator">=</span> ZonedDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> shanghaiZoneId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>将zonedDateTime打印到控制台为：</p>
<pre class=" language-java"><code class="language-java"><span class="token number">2019</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span>26T16<span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">41.971</span><span class="token operator">+</span><span class="token number">08</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">[</span>Asia<span class="token operator">/</span>Shanghai<span class="token punctuation">]</span></code></pre>
<p>ZonedDateTime对象由两部分构成，LocalDateTime和ZoneId，其中2017-01-05T15:26:56.147部分为LocalDateTime，+08:00[Asia/Shanghai]部分为ZoneId。<br>另一种表示时区的方式是使用ZoneOffset，它是以当前时间和世界标准时间（UTC）/格林威治时间（GMT）的偏差来计算，例如：</p>
<pre class=" language-java"><code class="language-java">ZoneOffset zoneOffset <span class="token operator">=</span> ZoneOffset<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"+09:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
OffsetDateTime offsetDateTime <span class="token operator">=</span> OffsetDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">,</span> zoneOffset<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>其他历法<br>Java中使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。<br>此外Java 8还提供了4套其他历法（很奇怪为什么没有汉族人使用的农历），每套历法都包含一个日期类，分别是：<br>ThaiBuddhistDate：泰国佛教历<br>MinguoDate：中华民国历<br>JapaneseDate：日本历<br>HijrahDate：伊斯兰历<br>每个日期类都继承ChronoLocalDate类，所以可以在不知道具体历法的情况下也可以操作。不过这些历法一般不常用，除非是有某些特殊需求情况下才会使用。<br>这些不同的历法也可以用于向公历转换：</p>
<pre class=" language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
JapaneseDate jpDate <span class="token operator">=</span> JapaneseDate<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>由于它们都继承ChronoLocalDate类，所以在不知道具体历法情况下，可以通过ChronoLocalDate类操作日期：</p>
<pre class=" language-java"><code class="language-java">Chronology jpChronology <span class="token operator">=</span> Chronology<span class="token punctuation">.</span><span class="token function">ofLocale</span><span class="token punctuation">(</span>Locale<span class="token punctuation">.</span>JAPANESE<span class="token punctuation">)</span><span class="token punctuation">;</span>
ChronoLocalDate jpChronoLocalDate <span class="token operator">=</span> jpChronology<span class="token punctuation">.</span><span class="token function">dateNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我们在开发过程中应该尽量避免使用ChronoLocalDate，尽量用与历法无关的方式操作时间，因为不同的历法计算日期的方式不一样，比如开发者会在程序中做一些假设，假设一年中有12个月，如果是中国农历中包含了闰月，一年有可能是13个月，但开发者认为是12个月，多出来的一个月属于明年的。再比如假设年份是累加的，过了一年就在原来的年份上加一，但日本天皇在换代之后需要重新纪年，所以过了一年年份可能会从1开始计算。<br>在实际开发过程中建议使用LocalDate，包括存储、操作、业务规则的解读；除非需要将程序的输入或者输出本地化，这时可以使用ChronoLocalDate类。</p>
<p>最后推荐一篇非常不错切实用性很好的深度理解lambda表达式博客,这个博客总结了好几篇不错的labda表达式与Stream流的工作中常用到的案例能够更好的帮助到大家去理解和使用lambda表达式这个利器帮助我们快速的在工作中进行迭代开发,高效撸码~<a href="https://www.cnblogs.com/CarpenterLee/category/965121.html">深入理解Java函数式编程</a></p>
]]></content>
      <categories>
        <category>Jdk8 lambda表达式</category>
      </categories>
      <tags>
        <tag>Java8 lambda</tag>
        <tag>Stream Programming</tag>
        <tag>LocalDate、LocalTime、Instant、Duration</tag>
      </tags>
  </entry>
  <entry>
    <title>spring5源码-内置的后置处理器PostProcess加载源码解析</title>
    <url>/2021/10/15/spring5-postprocess-source-code-analysis/</url>
    <content><![CDATA[<h3 id="一-研究目标-解析spring如何加载配置类"><a href="#一-研究目标-解析spring如何加载配置类" class="headerlink" title="一. 研究目标: 解析spring如何加载配置类"></a>一. 研究目标: 解析spring如何加载配置类</h3><p>我们经常会在一个类上打上@Configuration, @Component, @Bean等. 带有这些注解的类, 我们在spring启动的时候,是如何被加载的呢?</p>
<p>下面就以此为目的,分析spring源码. 本节的内容是对上一节内容的实战分析, 同时更加详细的解读spring源码<br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-spring-context-run-process.png" alt="spring-context-run-process.png"><br>我们知道, spring启动的时候做了3件事, 就是上面的三件事.</p>
<blockquote>
<p>第一件事: 调用this()自身的无参构造函数. 初始化了BeanDefinitionReader和BeanDefinitionScanner, 同时初始化了很多spring的原始后置处理器, 这些处理器是用来加载在定义bean的<br>第二件事: 调用register(…)<br>第三件事: refresh(…) 这里包含了整个ioc创建bean的全生命周期</p>
</blockquote>
<h3 id="二-自定义配置类"><a href="#二-自定义配置类" class="headerlink" title="二. 自定义配置类"></a>二. 自定义配置类</h3><p>我们先定义好要分析加载的配置类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>iocbeanlifecicle<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 这是一个配置类,
 * 在配置类里面定义了扫描的包路径com.lxl.www.iocbeanlifecicle
 * 这是会将这个包下配置了注解的类扫描到ioc容器里面,成为一个成熟的bean
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.lxl.www.iocbeanlifecicle"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span></code></pre>
<p>这个配置类很简单, 使用@ComponentScan注解指定了扫描的包. @Configuration指定当前是一个配置类</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>iocbeanlifecicle<span class="token punctuation">;</span>


<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainStarter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 第一步: 通过AnnotationConfigApplicationContext读取一个配置类</span>
        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//context.addBeanFactoryPostProcessor();</span>
        Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>在main里, 通过AnnotationConfigurationApplicationContext读取配置类MainConfig.class.</p>
<p>配置类被传进来以后, 到底是怎么被解析的呢? 这就是我们分析的线索</p>
<p>始终不要忘记我们的整体架构图. 对照这个图来分析. 思路更清晰. 整体内容讲解在这里:<a href="https://xiaomozhang.github.io/2021/10/14/spring5-source-code-ioc-process-description/"><code>spring5源码 - ioc加载整体流程详解</code></a><br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-annotationConfigApplicationContext-run-process.png" alt="annotationConfigApplicationContext-run-process.png"><br>下面, 从入口进入. 我们的入口就是这里</p>
<blockquote>
<p>new AnnotationConfigApplicationContext(MainConfig.class);</p>
</blockquote>
<p>下面进入AnnotationConfigApplicationContext的构造方法</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> componentClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 进入构造函数, 首先调用自身的构造方法this();</span>
        <span class="token comment" spellcheck="true">// 调用自身的构造方法之前, 要先调用父类的构造方法</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// register配置注册类</span>
        <span class="token function">register</span><span class="token punctuation">(</span>componentClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// ioc容器shua新接口--非常重要</span>
        <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<h3 id="三、读取配置类后置处理器ConfigurationClassPostProcessor"><a href="#三、读取配置类后置处理器ConfigurationClassPostProcessor" class="headerlink" title="三、读取配置类后置处理器ConfigurationClassPostProcessor"></a>三、读取配置类后置处理器ConfigurationClassPostProcessor</h3><h4 id="3-1-this-无参构造函数"><a href="#3-1-this-无参构造函数" class="headerlink" title="3.1 this()无参构造函数"></a>3.1 this()无参构造函数</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/**
         * 创建了一个Bean定义的读取器.
         * 完成了spring内部BeanDefinition的注册(主要是后置处理器)
         * 读取了很多spring自定义的配置(主要是后置处理器). 这些类都是spring 的原始类(也就是创世纪的类).
         */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 创建BeanDefinition扫描器
         * 可以用来扫描包或者类, 进而转换为bd
         *
         * Spring默认的扫描包不是这个scanner对象
         * 而是自己new的一个ClassPathBeanDefinitionScanner
         * Spring在执行工程后置处理器ConfigurationClassPostProcessor时, 去扫描包时会new一个ClassPathBeanDefinitionScanner
         *
         * 这里的scanner仅仅是为了程序员可以手动调用AnnotationConfigApplicationContext对象的scan方法
         * 通过调用context.scan("package name");扫描处理配置类
         * 扫描
         */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>在初始化AnnotatedBeanDefinitionReader(this);的时候, 注册了很多后置处理器</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * Register all relevant annotation post processors in the given registry.
     * @param registry the registry to operate on
     * @param source the configuration source element (already extracted)
     * that this registration was triggered from. May be {@code null}.
     * @return a Set of BeanDefinitionHolders, containing all bean definitions
     * that have actually been registered by this call
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>
            BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 获取到beanFactory</span>
        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">unwrapDefaultListableBeanFactory</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 判断beanFactory中是否有AnnotationAwareOrderComparator和ContextAnnotationAutowireCandidateResolver
         * 没有则添加
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getDependencyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">setDependencyComparator</span><span class="token punctuation">(</span>AnnotationAwareOrderComparator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">setAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// BeanDefinitionHolder: 为BeanDefinition设置名字和别名</span>
        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 如果registry中没有ConfigurationClassPostProcessor配置类后置处理器, 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 构建BeanDefinitionHolder, 并添加到beanDefs</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 如果rigistry中, 没有AutowiredAnnotationBeanPostProcessor  Autowired注解bean的后置处理器, 则添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 构建BeanDefinitionHolder, 并添加到beanDefs</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span>
        <span class="token comment" spellcheck="true">// 检查对JSR-250的支持, 如果rigistry中没有 CommonAnnotationBeanPostProcessor 通用注解后置处理器, 则添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jsr250Present <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>CommonAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 构建BeanDefinitionHolder, 并添加到beanDefs</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span>
        <span class="token comment" spellcheck="true">// 检查对jpa的支持, 如果不包含 internalPersistenceAnnotationProcessor, 持久化注解处理器, 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jpaPresent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                def<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span>
                        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                        <span class="token string">"Cannot load optional framework class: "</span> <span class="token operator">+</span> PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 检查对事件监听的支持, 如果不包含事件监听处理器 internalEventListenerProcessor, 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>EventListenerMethodProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 如果不包含事件监听工厂处理器 internalEventListenerFactory , 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>DefaultEventListenerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> beanDefs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>我们看到, 注册了6个原始bean, 这些bean是spring自己提前定义好的, 他们的加载是整个spring的基础. 用于解析spring 中其他的类</p>
<p>而这一次我们要读取配置, 所以重点关注的是下面这个类</p>
<blockquote>
<p>ConfigurationClassPostProcessor.class</p>
</blockquote>
<p>这里还有很多其他的原始类被注册了, 但我们的目标是分析配置类是如何被读取的, 所以, 其他的先忽略, 只看ConfigurationClassPostProcessor.</p>
<h4 id="3-2-ConfigurationClassPostProcessor的继承结构"><a href="#3-2-ConfigurationClassPostProcessor的继承结构" class="headerlink" title="3.2 ConfigurationClassPostProcessor的继承结构"></a>3.2 ConfigurationClassPostProcessor的继承结构</h4><p><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-configurationClassPostProcessor-diagram.png" alt="configurationClassPostProcessor-diagram.png"><br>可以看到ConfigurationClassPostProcessor是同时实现了BeanDefinitionRegistryPostProcessor和BeanFactoryPostProcessor. 这一点我们需要记住, 后面会使用到</p>
<h4 id="2-3-ConfigurationClassPostProcessor是如何被注册的"><a href="#2-3-ConfigurationClassPostProcessor是如何被注册的" class="headerlink" title="2.3 ConfigurationClassPostProcessor是如何被注册的"></a>2.3 ConfigurationClassPostProcessor是如何被注册的</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 如果registry中没有ConfigurationClassPostProcessor配置类后置处理器, 就添加一个</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 构建BeanDefinitionHolder, 并添加到beanDefs</span>
            beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span></code></pre>
<p>首先,构建了一个RootBeanDefinition. 然后调用了registerPostProcessor方法, 三个入参分别是</p>
<pre class=" language-java"><code class="language-java">registry<span class="token operator">:</span> BeanDefinitionRegistry注册器<span class="token punctuation">,</span> 用于注册BeanDefinition
def<span class="token operator">:</span> 刚刚构建的RootBeanDefinition
CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token operator">:</span> 构建BeanDefinition使用的beanName是org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>internalConfigurationAnnotationProcessor</code></pre>
<p>然后调用registerPostProcessor方法</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinition beanDefinition<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>

        Assert<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Bean name must not be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> <span class="token string">"BeanDefinition must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>
                        <span class="token string">"Validation of bean definition failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 从BeanDefinition的一级缓存BeanDefinitionMap中读取BeanDefinition对象, 判断是否已经存在</span>
        BeanDefinition existingDefinition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingDefinition <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 判断是否允许BeanDefinition重写</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionOverrideException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">,</span> existingDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>existingDefinition<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Overriding user-defined bean definition for bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
                            <span class="token string">"' with a framework-generated bean definition: replacing ["</span> <span class="token operator">+</span>
                            existingDefinition <span class="token operator">+</span> <span class="token string">"] with ["</span> <span class="token operator">+</span> beanDefinition <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanDefinition<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>existingDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Overriding bean definition for bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
                            <span class="token string">"' with a different definition: replacing ["</span> <span class="token operator">+</span> existingDefinition <span class="token operator">+</span>
                            <span class="token string">"] with ["</span> <span class="token operator">+</span> beanDefinition <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Overriding bean definition for bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
                            <span class="token string">"' with an equivalent definition: replacing ["</span> <span class="token operator">+</span> existingDefinition <span class="token operator">+</span>
                            <span class="token string">"] with ["</span> <span class="token operator">+</span> beanDefinition <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment" spellcheck="true">// 以上情况都没有限制, 重置一级缓存的bean定义</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 处理循环引用的问题</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanCreationStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Cannot modify startup-time collection elements anymore (for stable iteration)</span>
                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    List<span class="token operator">&lt;</span>String<span class="token operator">></span> updatedDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    updatedDefinitions<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    updatedDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames <span class="token operator">=</span> updatedDefinitions<span class="token punctuation">;</span>
                    <span class="token function">removeManualSingletonName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Still in startup registration phase</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">removeManualSingletonName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>frozenBeanDefinitionNames <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingDefinition <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resetBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConfigurationFrozen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearByTypeCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>这里面的关键代码是标红的部分, 将ConfigurationClassPostProcessor放入到了beanDefinitionMap里面</p>
<p>下面的else是处理循环引用的问题, 暂时先不要看. 后面有专门的章节讲解循环引用.</p>
<h4 id="2-4-对照整体框架-我们知道ConfigurationClassPostProcessor被解析成beanDefinition放入到BeanDefinitionMap中了"><a href="#2-4-对照整体框架-我们知道ConfigurationClassPostProcessor被解析成beanDefinition放入到BeanDefinitionMap中了" class="headerlink" title="2.4 对照整体框架, 我们知道ConfigurationClassPostProcessor被解析成beanDefinition放入到BeanDefinitionMap中了"></a>2.4 对照整体框架, 我们知道ConfigurationClassPostProcessor被解析成beanDefinition放入到BeanDefinitionMap中了</h4><p><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-configurationClassPostProcessor-beanDefinitionMap.png" alt="configurationClassPostProcessor-beanDefinitionMap.png"><br>ConfigurationClassPostProcessor是一个工具类, 这个类的作用是解析配置类.</p>
<p>工具类有了, 那么还得有主角呀, 那就是我们上面的配置类. 下面看看配置类的加载</p>
<h4 id="2-5-初始化ClassPathBeanDefinitionScanner"><a href="#2-5-初始化ClassPathBeanDefinitionScanner" class="headerlink" title="2.5 初始化ClassPathBeanDefinitionScanner"></a>2.5 初始化ClassPathBeanDefinitionScanner</h4><p>在this()构造方法里, 还初始化了ClassPathBeanDefinitionScanner, 这里只说一句.</p>
<blockquote>
<p>this.scanner = new ClassPathBeanDefinitionScanner(this);</p>
</blockquote>
<p>我们在扫描配置类的时候, 确实使用的是ClassPathBeanDefinitionScanner, 但是, 不是this.scanner对象. 而是自己new的一个ClassPathBeanDefinitionScanner.</p>
<p>这里的scanner仅仅是为了程序员可以手动调用AnnotationConfigApplicationContext对象的scan方法</p>
<p>通过调用context.scan(“package name”);扫描处理配置类</p>
<p>使用方式如下:</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 第一步: 通过AnnotationConfigApplicationContext读取一个配置类</span>
        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>到目前为止完成了后置处理器注册为BeanDefinition</p>
<h3 id="四-读取自定义配置类MainConfig"><a href="#四-读取自定义配置类MainConfig" class="headerlink" title="四. 读取自定义配置类MainConfig"></a>四. 读取自定义配置类MainConfig</h3><p>注册配置类,入口自然是这里了</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> componentClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 进入构造函数, 首先调用自身的构造方法this();</span>
        <span class="token comment" spellcheck="true">// 调用自身的构造方法之前, 要先调用父类的构造方法</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// register配置注册类</span>
        <span class="token function">register</span><span class="token punctuation">(</span>componentClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// ioc容器shua新接口--非常重要</span>
        <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>跟踪进去找到doRegisterBean(…)方法</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">doRegisterBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> beanClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String name<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> qualifiers<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>T<span class="token operator">></span> supplier<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Nullable</span> BeanDefinitionCustomizer<span class="token punctuation">[</span><span class="token punctuation">]</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">// 将入参的配置类beanClass构建成AnnotatedGenericBeanDefinition对象</span>
        AnnotatedGenericBeanDefinition abd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>abd<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        abd<span class="token punctuation">.</span><span class="token function">setInstanceSupplier</span><span class="token punctuation">(</span>supplier<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 读取配置类的元数据</span>
        ScopeMetadata scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        abd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String beanName <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 处理主类通用定义注解</span>
        AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>qualifiers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> qualifier <span class="token operator">:</span> qualifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>Primary<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    abd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Lazy<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    abd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    abd<span class="token punctuation">.</span><span class="token function">addQualifier</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutowireCandidateQualifier</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>customizers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionCustomizer customizer <span class="token operator">:</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 将MainConfig.java配置类进行解析.放到BeanDefinitionHolder</span>
        BeanDefinitionHolder definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        definitionHolder <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>重点就是红色这句话, 其他可以略过, 因为我们的配置类很简单, 直接看BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, this.registry);<br>我们找到 registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());方法, 进入到DefaultListableBeanFactory查看方法, 这个方法之前我们已经调用过一次</p>
<p>就是在注册ConfigurationClassPostProcessor的时候, 我们需要将其解析为BeanDefinition然后放到BeanDefinitionMap中, 这里也是一样的, 将我们的配置类MainConfig解析成BeanDefinition放入到BeanDefinitionMap中.</p>
<p>这里的代码在整个框架中处于什么位置呢? 将MainConfig解析为BeanDefinition放入到BeanDefinitionMap中<br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-spring-context-run-process.png" alt="spring-context-run-process.png"><br>以上两步, 一个是将ConfigurationClassPostProcessor配置类后置处理器, 也就是解析配置的工具类, 解析成BeanDefinition放入到BeanDefinitionMap中</p>
<p>另一个是将我们的目标配置类MainConfig加载到内存, 组装成BeanDefinition放入到BeanDefinitionMap中.<br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-mainConfig-init-process.png" alt="mainConfig-init-process.png"></p>
<h3 id="五-调用bean工厂的后置处理器invokeBeanFactoryPostProcessors-beanFactory"><a href="#五-调用bean工厂的后置处理器invokeBeanFactoryPostProcessors-beanFactory" class="headerlink" title="五. 调用bean工厂的后置处理器invokeBeanFactoryPostProcessors(beanFactory)"></a>五. 调用bean工厂的后置处理器invokeBeanFactoryPostProcessors(beanFactory)</h3><p>在refresh()中有很多步骤, 我们重点来看invokeBeanFactoryPostProcessors(beanFactory);</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * refresh是spring最核心的方法, 里面包含了整个spring ioc的全过程, 包括spring加载bean到销毁bean的全过程
     * 学习spring, 就是学习里面的13个方法, 如果13个方法都学完了, 基本上就打通了
     * @throws BeansException
     * @throws IllegalStateException
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 1. 准备刷新上下文环境</span>
            <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// Tell the subclass to refresh the internal bean factory.</span>
            <span class="token comment" spellcheck="true">//2. 获取告诉子类初始化bean工厂, 不同工厂不同实现</span>
            ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment" spellcheck="true">// Prepare the bean factory for use in this context.</span>
            <span class="token comment" spellcheck="true">//3. 对bean工厂进行填充属性</span>
            <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Allows post-processing of the bean factory in context subclasses.</span>
                <span class="token comment" spellcheck="true">// 4. 留个子类去实现该接口</span>
                <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Invoke factory processors registered as beans in the context.</span>
                <span class="token comment" spellcheck="true">/*
                 *
                 * 调用bean工厂的后置处理器
                 * 我们之前在Reader的时候读取了很多创世纪的PostProcessor后置处理器.
                 * 这里要调用bean工厂的后置处理器. 这么多创世纪的PostProcessor, 只有一个PostProcessor实现了
                 * BeanFactoryPostProcessor. 那个类就是 ConfigurationClassPostProcessor
                 * 前面已经将ConfigurationClassPostProcessor放入到BeanDefinitionMap中了,
                 * 对应的BeanDefinitionName 是 internalConfigurationAnnotationProcessor
                 *
                 *
                 *
                 */</span>
                <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Register bean processors that intercept bean creation.</span>
                <span class="token comment" spellcheck="true">// 注册bean后置处理器</span>
                <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize message source for this context.</span>
                <span class="token comment" spellcheck="true">// 初始化国际化资源处理器</span>
                <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize event multicaster for this context.</span>
                <span class="token comment" spellcheck="true">// 创建事件多播放器</span>
                <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Initialize other special beans in specific context subclasses.</span>
                <span class="token comment" spellcheck="true">// 这个方法通用也是留个子类实现的, spring boot也是从这个方法进行启动</span>
                <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Check for listener beans and register them.</span>
                <span class="token comment" spellcheck="true">// 将事件监听器注册到多播放器上</span>
                <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>
                <span class="token comment" spellcheck="true">// 实例化剩余的单实例bean</span>
                <span class="token comment" spellcheck="true">/**
                 * 这个方法就是循环遍历BeanDefinitionMap, 调用getBean, 去生产bean
                 */</span>
                <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// Last step: publish corresponding event.</span>
                <span class="token comment" spellcheck="true">//最后容器刷新 发布刷新时间(spring cloud是从这里启动的 )</span>
                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span></code></pre>
<p>invokeBeanFactoryPostProcessors(beanFactory);看名字, 调用的是Bean工厂的后置处理器, 我们在第二部分说了, 初始化的时候初始化了很多spring原生的后置处理器, 这么多后置处理器, 其实,<br>只有一个后置处理器实现了BeanFactoryPostProcessor, 它就是ConfigurationClassPostProcessor, 还记得上面让大家记住的结构图么, 拿下来, 再看一遍.<br>这里调用的时候, 原生处理器只会调用ConfigurationClassPostProcessor.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">/**
         * 获取两处存储BeanFactoryPostProcessor的对象, 传入供接下来调用
         * 1. 当前bean工厂
         * 2. 和我们自己调用addBeanFacoryPostProcessor自定义BeanFactoryPostProcessor
         *
         * 参数: getBeanFactoryPostProcessors() 传了一个工厂的后置处理器的List, 这个时候list是空的
         * getBeanFactoryPostProcessors()里面的值是怎么来的呢?
         * 通过在自定义main方法中调用context.addBeanFactoryPostProcessor(...);来添加
         *
         * public static void main(String[] args) {
         *         // 第一步: 通过AnnotationConfigApplicationContext读取一个配置类
         *         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(MainConfig.class);
         *         context.addBeanFactoryPostProcessor(...);
         *         Car car = (Car) context.getBean("car");
         *         System.out.println(car.getName());
         *         context.close();
         * }
         */</span>
        PostProcessorRegistrationDelegate<span class="token punctuation">.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token function">getBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span>
        <span class="token comment" spellcheck="true">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getTempClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>LOAD_TIME_WEAVER_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>这里要调用bean工厂的后置处理器了. 看上面的注释, 注释写的很清晰.</p>
<p>在调用PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());的时候调用了getBeanFactoryPostProcessors()方法.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> <span class="token function">getBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactoryPostProcessors<span class="token punctuation">;</span>
   <span class="token punctuation">}</span></code></pre>
<p>getBeanFactoryPostProcessors() 返回的是一个工厂的后置处理器的List, 这个时候list是空的<br>getBeanFactoryPostProcessors()里面的值是怎么来的呢?<br>通过在自定义main方法中调用context.addBeanFactoryPostProcessor(…);来添加. 也就是通过main 方法手动添加的beanFactory</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token comment" spellcheck="true">// 第一步: 通过AnnotationConfigApplicationContext读取一个配置类</span>
           AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           context<span class="token punctuation">.</span><span class="token function">addBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>接下来重点来了. PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors()); 方法实现一共分为两大步:</p>
<blockquote>
<p>第一步: 调用所有实现了 BeanDefinitionRegistryPostProcessor 接口的bean定义. (BeanDefinitionRegistryPostProcessor带注册功能的后置处理器)<br> 第二步: 调用BeanFactoryPostProcessor Bean工厂的后置处理器</p>
</blockquote>
<h4 id="第一步-调用所有实现了-BeanDefinitionRegistryPostProcessor-接口的bean定义"><a href="#第一步-调用所有实现了-BeanDefinitionRegistryPostProcessor-接口的bean定义" class="headerlink" title="第一步: 调用所有实现了 BeanDefinitionRegistryPostProcessor 接口的bean定义."></a>第一步: 调用所有实现了 BeanDefinitionRegistryPostProcessor 接口的bean定义.</h4><p>来看看源码是如何定义的. 重点看代码的注释, 每一部分的功能都有明确标出, 注释写的很详细</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>
            ConfigurableListableBeanFactory beanFactory<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">/**
         * 首先,调用BeanDefinitionRegistryPostProcessors的后置处理器
         * 定义已处理的后置处理器
         */</span>
        <span class="token comment" spellcheck="true">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span>
        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 这里一共分为两大步:
         * 第一步: 调用所有实现了 BeanDefinitionRegistryPostProcessor 接口的bean定义. (BeanDefinitionRegistryPostProcessor带注册功能的后置处理器)
         * 第二步: 调用BeanFactoryPostProcessor Bean工厂的后置处理器
         */</span>

        <span class="token comment" spellcheck="true">/**********************第一步: 调用所有实现了BeanDefinitionRegistryPostProcessor接口的bean定义  begin****************************/</span>
        <span class="token comment" spellcheck="true">// 判断beanFactory是否实现了BeanDefinitionRegistry, 实现了该结构就有注册和获取Bean定义的能力</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BeanDefinitionRegistry registry <span class="token operator">=</span> <span class="token punctuation">(</span>BeanDefinitionRegistry<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>
            List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> regularPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> registryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanFactoryPostProcessor postProcessor <span class="token operator">:</span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    BeanDefinitionRegistryPostProcessor registryProcessor <span class="token operator">=</span>
                            <span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">)</span> postProcessor<span class="token punctuation">;</span>
                    registryProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    registryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    regularPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>postProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>
            <span class="token comment" spellcheck="true">// uninitialized to let the bean factory post-processors apply to them!</span>
            <span class="token comment" spellcheck="true">// Separate between BeanDefinitionRegistryPostProcessors that implement</span>
            <span class="token comment" spellcheck="true">// PriorityOrdered, Ordered, and the rest.</span>
            <span class="token comment" spellcheck="true">/**
             * 这是一个集合, 存马上即将要被调用的BeanDefinitionRegistryPostProcessor
             */</span>
            List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> currentRegistryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第一步, 调用实现了PriorityOrdered的BeanDefinitionRegistryPostProcessors</span>
            <span class="token comment" spellcheck="true">// 在所有创世纪的后置处理器中, 只有 internalConfigurationAnnotationProcessor 实现了 BeanDefinitionRegistryPostProcessors 和 PriorityOrdered</span>
            <span class="token comment" spellcheck="true">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>
                    beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 判断beanFactory是否实现了PriorityOrdered接口. 如果实现了,是最优先调用.</span>
                <span class="token comment" spellcheck="true">// 在整个加载过程中,会调用四次BeanDefinitionRegistryPostProcessor, 而实现了PriorityOrdered的接口最先调用</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 调用beanFactory.getBean实例化创世界的类ppName</span>
                    currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/**
             * 第一次调用BeanDefinitionRegistryPostProcessors
             * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
             * 用于进行bean定义的加载 比如我们的包扫描 @import 等
             */</span>
            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 处理完了,清空currentRegistryProcessors</span>
            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment" spellcheck="true">// 第二步: 调用实现 Ordered 的 BeanDefinitionRegistryPostProcessors。</span>
            <span class="token comment" spellcheck="true">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span>
            postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 这时实现了PriorityOrdered.class的postProcessor就不会再被加载进来了, 因为processedBeans.contains(ppName) == true</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 将其放入到currentRegistryProcessors, 马上就要被调用</span>
                    currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// 对所有的处理器进行排序. 调用了Ordered的方法, 会返回排序(一个数字), 然后根据数字排序即可</span>
            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/**
             * 第二次调用BeanDefinitionRegistryPostProcessors
             * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
             * 用于进行bean定义的加载 比如我们的包扫描 @import 等
             */</span>
            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment" spellcheck="true">// 第三步. 调用没有实现任何优先级接口的 BeanDefinitionRegistryPostProcessor</span>
            <span class="token comment" spellcheck="true">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span>
            <span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                reiterate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 获取</span>
                postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 已处理过的postProcessor不再处理</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
                registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/**
                 * 第三次调用BeanDefinitionRegistryPostProcessors
                 * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
                 * 用于进行bean定义的加载 比如我们的包扫描 @import 等
                 */</span>
                <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span>
            <span class="token comment" spellcheck="true">/*
             * 调用bean工厂的后置处理器
             * registryProcessors: 带有注册功能的bean工厂的后置处理器
             * regularPostProcessors: 不带注册功能的bean工厂的后置处理器
             */</span>
            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/*
             * 如果当前的beanFactory没有实现BeanDefinitionRegistry 说明没有注册Bean定义的能力
             * 那么就直接调用 BeanDefinitionRegistryPostProcessor.postProcessBeanFactory方法
             */</span>

            <span class="token comment" spellcheck="true">// Invoke factory processors registered with the context instance.</span>
            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactoryPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**********************第一步: 调用所有实现了BeanDefinitionRegistryPostProcessor接口的bean定义  end****************************/</span>

        <span class="token comment" spellcheck="true">/**********************第二步: 调用BeanFactoryPostProcessor Bean工厂的后置处理器  begin****************************/</span>

        <span class="token comment" spellcheck="true">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>
        <span class="token comment" spellcheck="true">// uninitialized to let the bean factory post-processors apply to them!</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span>
        <span class="token comment" spellcheck="true">// Ordered, and the rest.</span>
        <span class="token comment" spellcheck="true">// 优先排序的后置处理器</span>
        List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// skip - already processed in first phase above</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 首先, 调用有优先级排序的后置处理器</span>
        <span class="token comment" spellcheck="true">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span>
        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 第二, 调用实现了Ordered排序的后置处理器</span>
        <span class="token comment" spellcheck="true">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span>
        List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 最后, 调用没有实现任何排序接口的beanFactory后置处理器</span>
        <span class="token comment" spellcheck="true">// Finally, invoke all other BeanFactoryPostProcessors.</span>
        List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>nonOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**********************第二步: 调用BeanFactoryPostProcessor Bean工厂的后置处理器  end****************************/</span>
        <span class="token comment" spellcheck="true">// Clear cached merged bean definitions since the post-processors might have</span>
        <span class="token comment" spellcheck="true">// modified the original metadata, e.g. replacing placeholders in values...</span>
        beanFactory<span class="token punctuation">.</span><span class="token function">clearMetadataCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-beanDefinitionRegistryPostProcessor-init.png" alt="beanDefinitionRegistryPostProcessor-init.png"><br>来看看源码是如何定义的. 重点看代码的注释, 每一部分的功能都有明确标出, 注释写的很详细</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>
            ConfigurableListableBeanFactory beanFactory<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment" spellcheck="true">/**
         * 首先,调用BeanDefinitionRegistryPostProcessors的后置处理器
         * 定义已处理的后置处理器
         */</span>
        <span class="token comment" spellcheck="true">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span>
        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 这里一共分为两大步:
         * 第一步: 调用所有实现了 BeanDefinitionRegistryPostProcessor 接口的bean定义. (BeanDefinitionRegistryPostProcessor带注册功能的后置处理器)
         * 第二步: 调用BeanFactoryPostProcessor Bean工厂的后置处理器
         */</span>

        <span class="token comment" spellcheck="true">/**********************第一步: 调用所有实现了BeanDefinitionRegistryPostProcessor接口的bean定义  begin****************************/</span>
        <span class="token comment" spellcheck="true">// 判断beanFactory是否实现了BeanDefinitionRegistry, 实现了该结构就有注册和获取Bean定义的能力</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BeanDefinitionRegistry registry <span class="token operator">=</span> <span class="token punctuation">(</span>BeanDefinitionRegistry<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>
            List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> regularPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> registryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanFactoryPostProcessor postProcessor <span class="token operator">:</span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    BeanDefinitionRegistryPostProcessor registryProcessor <span class="token operator">=</span>
                            <span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">)</span> postProcessor<span class="token punctuation">;</span>
                    registryProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    registryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    regularPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>postProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>
            <span class="token comment" spellcheck="true">// uninitialized to let the bean factory post-processors apply to them!</span>
            <span class="token comment" spellcheck="true">// Separate between BeanDefinitionRegistryPostProcessors that implement</span>
            <span class="token comment" spellcheck="true">// PriorityOrdered, Ordered, and the rest.</span>
            <span class="token comment" spellcheck="true">/**
             * 这是一个集合, 存马上即将要被调用的BeanDefinitionRegistryPostProcessor
             */</span>
            List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> currentRegistryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 第一步, 调用实现了PriorityOrdered的BeanDefinitionRegistryPostProcessors</span>
            <span class="token comment" spellcheck="true">// 在所有创世纪的后置处理器中, 只有 internalConfigurationAnnotationProcessor 实现了 BeanDefinitionRegistryPostProcessors 和 PriorityOrdered</span>
            <span class="token comment" spellcheck="true">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>
                    beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 判断beanFactory是否实现了PriorityOrdered接口. 如果实现了,是最优先调用.</span>
                <span class="token comment" spellcheck="true">// 在整个加载过程中,会调用四次BeanDefinitionRegistryPostProcessor, 而实现了PriorityOrdered的接口最先调用</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 调用beanFactory.getBean实例化创世界的类ppName</span>
                    currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/**
             * 第一次调用BeanDefinitionRegistryPostProcessors
             * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
             * 用于进行bean定义的加载 比如我们的包扫描 @import 等
             */</span>
            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 处理完了,清空currentRegistryProcessors</span>
            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment" spellcheck="true">// 第二步: 调用实现 Ordered 的 BeanDefinitionRegistryPostProcessors。</span>
            <span class="token comment" spellcheck="true">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span>
            postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 这时实现了PriorityOrdered.class的postProcessor就不会再被加载进来了, 因为processedBeans.contains(ppName) == true</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 将其放入到currentRegistryProcessors, 马上就要被调用</span>
                    currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// 对所有的处理器进行排序. 调用了Ordered的方法, 会返回排序(一个数字), 然后根据数字排序即可</span>
            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/**
             * 第二次调用BeanDefinitionRegistryPostProcessors
             * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
             * 用于进行bean定义的加载 比如我们的包扫描 @import 等
             */</span>
            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


            <span class="token comment" spellcheck="true">// 第三步. 调用没有实现任何优先级接口的 BeanDefinitionRegistryPostProcessor</span>
            <span class="token comment" spellcheck="true">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span>
            <span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                reiterate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 获取</span>
                postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 已处理过的postProcessor不再处理</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
                registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/**
                 * 第三次调用BeanDefinitionRegistryPostProcessors
                 * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
                 * 用于进行bean定义的加载 比如我们的包扫描 @import 等
                 */</span>
                <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span>
            <span class="token comment" spellcheck="true">/*
             * 调用bean工厂的后置处理器
             * registryProcessors: 带有注册功能的bean工厂的后置处理器
             * regularPostProcessors: 不带注册功能的bean工厂的后置处理器
             */</span>
            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/*
             * 如果当前的beanFactory没有实现BeanDefinitionRegistry 说明没有注册Bean定义的能力
             * 那么就直接调用 BeanDefinitionRegistryPostProcessor.postProcessBeanFactory方法
             */</span>

            <span class="token comment" spellcheck="true">// Invoke factory processors registered with the context instance.</span>
            <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactoryPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">/**********************第一步: 调用所有实现了BeanDefinitionRegistryPostProcessor接口的bean定义  end****************************/</span>

        <span class="token comment" spellcheck="true">/**********************第二步: 调用BeanFactoryPostProcessor Bean工厂的后置处理器  begin****************************/</span>

        <span class="token comment" spellcheck="true">// Do not initialize FactoryBeans here: We need to leave all regular beans</span>
        <span class="token comment" spellcheck="true">// uninitialized to let the bean factory post-processors apply to them!</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>
                beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span>
        <span class="token comment" spellcheck="true">// Ordered, and the rest.</span>
        <span class="token comment" spellcheck="true">// 优先排序的后置处理器</span>
        List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// skip - already processed in first phase above</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 首先, 调用有优先级排序的后置处理器</span>
        <span class="token comment" spellcheck="true">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span>
        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 第二, 调用实现了Ordered排序的后置处理器</span>
        <span class="token comment" spellcheck="true">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span>
        List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 最后, 调用没有实现任何排序接口的beanFactory后置处理器</span>
        <span class="token comment" spellcheck="true">// Finally, invoke all other BeanFactoryPostProcessors.</span>
        List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>nonOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**********************第二步: 调用BeanFactoryPostProcessor Bean工厂的后置处理器  end****************************/</span>
        <span class="token comment" spellcheck="true">// Clear cached merged bean definitions since the post-processors might have</span>
        <span class="token comment" spellcheck="true">// modified the original metadata, e.g. replacing placeholders in values...</span>
        beanFactory<span class="token punctuation">.</span><span class="token function">clearMetadataCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-beanDefinitionRegistryPostProcessor-init.png" alt="beanDefinitionRegistryPostProcessor-init.png"><br>下面我们就来分析上图所示的内容.</p>
<h4 id="1-对照源码和上图-我们来看第一次调用"><a href="#1-对照源码和上图-我们来看第一次调用" class="headerlink" title="1. 对照源码和上图, 我们来看第一次调用"></a>1. 对照源码和上图, 我们来看第一次调用</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第一次, 调用实现了PriorityOrdered的BeanDefinitionRegistryPostProcessors</span>
            <span class="token comment" spellcheck="true">// 在所有创世纪的后置处理器中, 只有 internalConfigurationAnnotationProcessor 实现了 BeanDefinitionRegistryPostProcessors 和 PriorityOrdered</span>
            <span class="token comment" spellcheck="true">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>
                    beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 判断beanFactory是否实现了PriorityOrdered接口. 如果实现了,是最优先调用.</span>
                <span class="token comment" spellcheck="true">// 在整个加载过程中,会调用四次BeanDefinitionRegistryPostProcessor, 而实现了PriorityOrdered的接口最先调用</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 调用beanFactory.getBean实例化创世界的类ppName</span>
                    currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/**
             * 第一次调用BeanDefinitionRegistryPostProcessors
             * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
             * 用于进行bean定义的加载 比如我们的包扫描 @import 等
             */</span>
            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 处理完了,清空currentRegistryProcessors</span>
            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>首先, 拿到了所有实现了BeanDefinitionRegistryPostProcessor的后置处理器, 上面我们做过铺垫,只有ConfigurationClassPostProcessor实现了BeanDefinitionRegistryPostProcessor后置处理器</p>
<p>所以,这里过滤出来的postProcessorNames只有一个值, 接下来, 判断, 这个类是否实现了PriorityOrdered 优先排序的接口, 如果实现了, 那么放入到currentRegistryProcessors中, 后面会进行调用.</p>
<p>接下来, 执行invokeBeanDefinitionRegistryPostProcessors</p>
<p>这是第一次调用BeanDefinitionRegistryPostProcessors</p>
<h4 id="第二次调用BeanDefinitionRegistryPostProcessors"><a href="#第二次调用BeanDefinitionRegistryPostProcessors" class="headerlink" title="第二次调用BeanDefinitionRegistryPostProcessors"></a>第二次调用BeanDefinitionRegistryPostProcessors</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第二步: 调用实现 Ordered 的 BeanDefinitionRegistryPostProcessors。</span>
            <span class="token comment" spellcheck="true">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span>
            postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// 这时实现了PriorityOrdered.class的postProcessor就不会再被加载进来了, 因为processedBeans.contains(ppName) == true</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 将其放入到currentRegistryProcessors, 马上就要被调用</span>
                    currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">// 对所有的处理器进行排序. 调用了Ordered的方法, 会返回排序(一个数字), 然后根据数字排序即可</span>
            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/**
             * 第二次调用BeanDefinitionRegistryPostProcessors
             * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
             * 用于进行bean定义的加载 比如我们的包扫描 @import 等
             */</span>
            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>第二次调用的时候 ,依然是获取所有的实现了BeanDefinitionRegistryPostProcessor接口的后置处理器, 且这个处理器没有实现过PriorityOrdered也就是没有被上面调用过. 且实现了Ordered接口</p>
<p>这一类添加到currentRegistryProcessors集合中, 然后调用invokeBeanDefinitionRegistryPostProcessors处理</p>
<p>这是第二次调用BeanDefinitionRegistryPostProcessor</p>
<h4 id="3-第三次调用BeanDefinitionRegistryPostProcessor"><a href="#3-第三次调用BeanDefinitionRegistryPostProcessor" class="headerlink" title="3. 第三次调用BeanDefinitionRegistryPostProcessor"></a>3. 第三次调用BeanDefinitionRegistryPostProcessor</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 第三步. 调用没有实现任何优先级接口的 BeanDefinitionRegistryPostProcessor</span>
            <span class="token comment" spellcheck="true">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span>
            <span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                reiterate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 获取</span>
                postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment" spellcheck="true">// 已处理过的postProcessor不再处理</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
                registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/**
                 * 第三次调用BeanDefinitionRegistryPostProcessors
                 * 在这里典型的BeanDefinitionRegistryPostProcessors就是ConfigurationClassPostProcessor
                 * 用于进行bean定义的加载 比如我们的包扫描 @import 等
                 */</span>
                <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>
                currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span></code></pre>
<p>第三次调用的是没有实现过任何排序接口的后置处理器. 并将其放入到currentRegistryProcessors, 然后执行invokeBeanDefinitionRegistryPostProcessors</p>
<h4 id="4-第四次调用"><a href="#4-第四次调用" class="headerlink" title="4. 第四次调用"></a>4. 第四次调用</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span>
<span class="token comment" spellcheck="true">/*
 * 调用bean工厂的后置处理器
 * registryProcessors: 带有注册功能的bean工厂的后置处理器
 * regularPostProcessors: 不带注册功能的bean工厂的后置处理器
 */</span>
<span class="token comment" spellcheck="true">// 调用BeanDefinitionRegistryPostProcessor.postProcessBeanFactory方法----为什么是调用BeanDefinitionRegistryPostProcessor? 因为</span>
<span class="token comment" spellcheck="true">// ConfigurationClassPostProcessor 实现了 BeanDefinitionRegistryPostProcessor 和 BeanFactoryPostProcessors</span>
<span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 调用BeanFactoryPostProcessor 自设的(ConfigurationClassPostProcessor没有)</span>
<span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>ConfigurationClassPostProcessor同时实现了BeanDefinitionRegistryPostProcessor 和 BeanFactoryPostProcessors, 调用的是</p>
<p>一共进行了4次调用</p>
<p>总结: 优先处理的是实现了PriorityOrdered的后置处理器, 然后调用实现了Order接口的后置处理器, 最后调用了没有实现任何排序方法的后置处理器. 最后调用工厂类方法.</p>
<p>下面我们来具体分析invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</p>
<h4 id="5-提问-检验一下是否理解了上面四个步骤"><a href="#5-提问-检验一下是否理解了上面四个步骤" class="headerlink" title="5. 提问: 检验一下是否理解了上面四个步骤"></a>5. 提问: 检验一下是否理解了上面四个步骤</h4><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span> ConfigurationClassPostProcessor会调用<span class="token number">1234</span>哪几步<span class="token operator">?</span>

因为ConfigurationClassPostProcessor实现了BeanDefinitionRegistryPostProcessor和BeanFactoryPostProcessor<span class="token punctuation">,</span>PriorityOrdered<span class="token punctuation">,</span> 因此会调用<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span>

<span class="token number">2</span><span class="token punctuation">.</span> 如果自己定义了一个MyBeanFactoryPostProcessor会调用<span class="token number">1234</span>那几步<span class="token operator">?</span>

<span class="token keyword">package</span> com<span class="token punctuation">.</span>lxl<span class="token punctuation">.</span>www<span class="token punctuation">.</span>iocbeanlifecicle<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>BeansException<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ConfigurableListableBeanFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionRegistry<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span>RootBeanDefinition<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>

   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>

   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
因为MyBeanFactoryPostProcessor是自定义的<span class="token punctuation">,</span> 没有实现任何PriorityOrdered 或者 Order<span class="token punctuation">,</span> 因此<span class="token punctuation">,</span> 会调用<span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span></code></pre>
<h4 id="6-详细研究第四步-invokeBeanFactoryPostProcessors-registryProcessors-beanFactory-的逻辑"><a href="#6-详细研究第四步-invokeBeanFactoryPostProcessors-registryProcessors-beanFactory-的逻辑" class="headerlink" title="6. 详细研究第四步, invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);的逻辑."></a>6. 详细研究第四步, invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);的逻辑.</h4><p>我们在这一步打个断点, 然后跟着断点一步一步点击进去<br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-invokeBeanFactoryPostProcessors.png" alt="invokeBeanFactoryPostProcessors.png"><br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-registryProcessors.png" alt="registryProcessors.png"><br>这是registryProcessors里面只有一个后置处理器, 就是ConfigurationClassPostProcessor.</p>
<p>然后进入到ConfigurationClassPostProcessor.postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)方法</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> factoryId <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>factoriesPostProcessed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>factoryId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                    <span class="token string">"postProcessBeanFactory already called on this post-processor against "</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>factoriesPostProcessed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factoryId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>registriesPostProcessed<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>factoryId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// BeanDefinitionRegistryPostProcessor hook apparently not supported...</span>
            <span class="token comment" spellcheck="true">// Simply call processConfigurationClasses lazily at this point then.</span>
            <span class="token function">processConfigBeanDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BeanDefinitionRegistry<span class="token punctuation">)</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 使用 cglib 配置类进行代理, 因为@Bean方法到时候要进行创建Bean的实例.</span>
        <span class="token function">enhanceConfigurationClasses</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImportAwareBeanPostProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>这里先看enhanceConfigurationClasses(beanFactory);个方法</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enhanceConfigurationClasses</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractBeanDefinition<span class="token operator">></span> configBeanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            BeanDefinition beanDef <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Object configClassAttr <span class="token operator">=</span> beanDef<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span>CONFIGURATION_CLASS_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            MethodMetadata methodMetadata <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                methodMetadata <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFactoryMethodMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>configClassAttr <span class="token operator">!=</span> null <span class="token operator">||</span> methodMetadata <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment" spellcheck="true">// Configuration class (full or lite) or a configuration-derived @Bean method</span>
                <span class="token comment" spellcheck="true">// -> resolve bean class at this point...</span>
                AbstractBeanDefinition abd <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>abd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        abd<span class="token punctuation">.</span><span class="token function">resolveBeanClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                                <span class="token string">"Cannot load configuration class: "</span> <span class="token operator">+</span> beanDef<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">/**
             * 只有full版配置才会创建cglib代理
             * full是怎么来的呢? 我们使用@Configuration注解了, 在加载的时候, 就会设置为full
             * 当设置为full以后, 我们在调用的时候, 就会创建一个cglib动态代理.
             *
             * 为什么要创建动态代理呢?
             * 动态代理可以保证, 每次创建的bean对象只有一个
             *
             * 那么加@Configuration和不加本质上的区别是什么?
             * 当在配置类中一个@Bean使用方法的方式引入另一个Bean的时候, 如果不加@Configuration注解, 就会重复加载Bean
             * 如果加了@Configuration, 则会在这里创建一个cglib代理, 当调用了@Bean方法是会先检测容器中是否存在这个Bean, 如果不存在则创建, 存在则直接使用.
             */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span>CONFIGURATION_CLASS_FULL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>configClassAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"Cannot enhance @Configuration bean definition '"</span> <span class="token operator">+</span>
                            beanName <span class="token operator">+</span> <span class="token string">"' since it is not stored in an AbstractBeanDefinition subclass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Cannot enhance @Configuration bean definition '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
                            <span class="token string">"' since its singleton instance has been created too early. The typical cause "</span> <span class="token operator">+</span>
                            <span class="token string">"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor "</span> <span class="token operator">+</span>
                            <span class="token string">"return type: Consider declaring such methods as 'static'."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                configBeanDefs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>configBeanDefs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// nothing to enhance -> return immediately</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        ConfigurationClassEnhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AbstractBeanDefinition<span class="token operator">></span> entry <span class="token operator">:</span> configBeanDefs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            AbstractBeanDefinition beanDef <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// If a @Configuration class gets proxied, always proxy the target class</span>
            beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>AutoProxyUtils<span class="token punctuation">.</span>PRESERVE_TARGET_CLASS_ATTRIBUTE<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// Set enhanced subclass of the user-specified bean class</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configClass <span class="token operator">=</span> beanDef<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> enhancedClass <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">enhance</span><span class="token punctuation">(</span>configClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>configClass <span class="token operator">!=</span> enhancedClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Replacing bean definition '%s' existing class '%s' with "</span> <span class="token operator">+</span>
                            <span class="token string">"enhanced class '%s'"</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> enhancedClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                beanDef<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>enhancedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>粗体部分就是判断是否需要进行cglib代理. 进行cglib代理的条件是, beanDefinition中属性configurationClass的值是full. 只有full版配置才会创建cglib代理</p>
<p>那么有下面几个问题:</p>
<p>问题1: full版本配置是什么呢?</p>
<p>我们使用@Configuration注解了, 在加载的时候, 就会将configurationClass属性设置为full.当设置为full以后, 我们在调用的时候, 就会创建一个cglib动态代理.</p>
<p>问题2: 为什么要创建动态代理呢?</p>
<p>动态代理可以保证, 每次创建的bean对象只有一个</p>
<p>问题3:那么加@Configuration和不加本质上的区别是什么?</p>
<p>当在配置类中一个@Bean使用方法的方式引入另一个Bean的时候, 如果不加@Configuration注解, 就会重复加载Bean.如果加了@Configuration, 则会在这里创建一个cglib代理, 当调用了@Bean方法是会先检测容器中是否存在这个Bean, 如果不存在则创建, 存在则直接使用.</p>
<p>问题4:full是怎么来的呢?<br>这是在上面调用invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);接口的时候, 标记的是full还是Lite</p>
<p>下面来看一下源码<br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-postProcessorRegistrationDelegate.png" alt="postProcessorRegistrationDelegate.png"><br>在这里一步,执行的时候,进行了这个类是full的还是lite,继续忘下看<br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-invokeBeanDefinitionRegistryPostProcessors-detail.png" alt="invokeBeanDefinitionRegistryPostProcessors-detail.png"><br>此时满足条件的postProcessor只有一个, 那就是ConfigurationClassPostProcessor. 下面直接看ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry()方法<br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-postProcessBeanDefinitionRegistry-detail.png" alt="postProcessBeanDefinitionRegistry-detail.png"><br>前面都是一些条件判断, 重点看processConfigBeanDefinitions(registry);<br><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-processConfigBeanDefinitions-detail.png" alt="processConfigBeanDefinitions-detail.png"><br>在这里,这个方法判断了, 这个类是full的还是lite的. 下面直接上代码</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
     * Check whether the given bean definition is a candidate for a configuration class
     * (or a nested component class declared within a configuration/component class,
     * to be auto-registered as well), and mark it accordingly.
     * @param beanDef the bean definition to check
     * @param metadataReaderFactory the current factory in use by the caller
     * @return whether the candidate qualifies as (any kind of) configuration class
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>
            BeanDefinition beanDef<span class="token punctuation">,</span> MetadataReaderFactory metadataReaderFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        String className <span class="token operator">=</span> beanDef<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>className <span class="token operator">==</span> null <span class="token operator">||</span> beanDef<span class="token punctuation">.</span><span class="token function">getFactoryMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        AnnotationMetadata metadata<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取元数据</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span> <span class="token operator">&amp;&amp;</span>
                className<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Can reuse the pre-parsed metadata from the given BeanDefinition...</span>
            metadata <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDef <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// Check already loaded Class if present...</span>
            <span class="token comment" spellcheck="true">// since we possibly can't even load the class file for this Class.</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span>
                    BeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span>
                    AopInfrastructureBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span>
                    EventListenerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            metadata <span class="token operator">=</span> AnnotationMetadata<span class="token punctuation">.</span><span class="token function">introspect</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                MetadataReader metadataReader <span class="token operator">=</span> metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
                metadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Could not find class file for introspecting configuration annotations: "</span> <span class="token operator">+</span>
                            className<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// 判断元数据中是否包含Configuration注解</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> config <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>Configuration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * 判断, proxyBeanMethods属性是否为true, 如果为true就是一个完全的类,
         * 也就是带有@Configuration注解, 设置Configuration_class属性为full
         *
         * proxyBeanMethods配置类是用来指定@Bean注解标注的方法是否使用代理，
         * 默认是true使用代理，直接从IOC容器之中取得对象；
         * 如果设置为false,也就是不使用注解，每次调用@Bean标注的方法获取到的对象和IOC容器中的都不一样，是一个新的对象，所以我们可以将此属性设置为false来提高性能。
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"proxyBeanMethods"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>CONFIGURATION_CLASS_ATTRIBUTE<span class="token punctuation">,</span> CONFIGURATION_CLASS_FULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 判断是不是带了@Component, @ComponentScan @Import @ImportResource @Bean注解,</span>
        <span class="token comment" spellcheck="true">// 如果带有这几种注解, 就将其Configuration_class属性为lite类型的配置类</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token function">isConfigurationCandidate</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>CONFIGURATION_CLASS_ATTRIBUTE<span class="token punctuation">,</span> CONFIGURATION_CLASS_LITE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment" spellcheck="true">// It's a full or lite configuration candidate... Let's determine the order value, if any.</span>
        Integer order <span class="token operator">=</span> <span class="token function">getOrder</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>ORDER_ATTRIBUTE<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span></code></pre>
<p>上面主要是获取元数据, 然后判断元数据中是否有Configuration注解. 如果有,返回其属性. 我们判断其属性中proxyBeanMethods是否true, 如果是true, 那么将其设置为full.</p>
<p>如果配置中带有@Component, @ComponentScan @Import @ImportResource @Bean这几种属性之一, 那么就将其设置为lite.<br>问题5: cglib动态代理做了什么事情呢? 不看源码的情况下, 简单可以理解为, 去ioc工厂里面通过getBean(“car”) 查询了看ioc中是否有这个对象, 如果有就取出来, 不再另创建.<br>这也是@Configuration 和其他注解类似@Component和@ComponentScan的本质区别:</p>
<p>当在配置类中一个@Bean使用方法的方式引入另一个Bean的时候, 如果不加@Configuration注解, 就会重复加载Bean</p>
<p>如果加了@Configuration, 则会在这里创建一个cglib代理, 当调用了@Bean方法是会先检测容器中是否存在这个Bean, 如果不存在则创建, 存在则直接使用.</p>
<p>下面来看个例子</p>
<pre class=" language-jav"><code class="language-jav">基础类:
public class Car  {
    private String name;
    private Tank tank;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Tank getTank() {
        return tank;
    }

    public void setTank(Tank tank) {
        this.tank = tank;
    }
}

public class Tank {
    private String name;

    public Tank() {
        System.out.println("创建一个tank");
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

}</code></pre>
<p>这是定义的car和tank的基础类</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.lxl.www.iocbeanlifecicle"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Car <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 这里调用了Tank类, tank是通过@Bean注解注入的. </span>
        car<span class="token punctuation">.</span><span class="token function">setTank</span><span class="token punctuation">(</span><span class="token function">tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> car<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Tank <span class="token function">tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>当配置类使用了@Configuration注解的时候, 运行main方法</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainStarter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 第一步: 通过AnnotationConfigApplicationContext读取一个配置类</span>
        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//context.addBeanFactoryPostProcessor();</span>
        Car car <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Car car2 <span class="token operator">=</span> <span class="token punctuation">(</span>Car<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-main-task.png" alt="spring5-postprocess-source-code-analysis-main-task.png"><br>当去掉@Configuration注解的时候, 再次运行, 我们看到创建了两次tank</p>
<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.lxl.www.iocbeanlifecicle"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Car <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        car<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 这里调用了Tank类, tank是通过@Bean注解注入的. </span>
        car<span class="token punctuation">.</span><span class="token function">setTank</span><span class="token punctuation">(</span><span class="token function">tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> car<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> Tank <span class="token function">tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p><img src="/images/spring5-postprocess-source-code-analysis/spring5-postprocess-source-code-analysis-task-rank-detail.png" alt="analysis-task-rank-detail.png"><br>在main方法中调用了两次(Car) context.getBean(“car”);</p>
<p>在new一个对象的时候, 如果不取ioc容器中取, 那么每一次都会创建一个新的.</p>
<p>在ioc容器中, car对象只有一个, 但是在构建car的时候, 调用了tank, tank在ioc容器中却不一定只有一份. 只有使用了@Configuration, 表示需要使用cglib动态代理查找tank类, 保证ioc容器中只有一份.</p>
<p>以上详细研究了配置类加载的过程, 以及配置类中设置@Configuration和@Component的区别.</p>
<p>后面还会继续分析,加载@ComponentScan的时候, 都做了哪些事.</p>
]]></content>
      <categories>
        <category>spring5 postProcess</category>
      </categories>
      <tags>
        <tag>spring5</tag>
        <tag>postProcess</tag>
      </tags>
  </entry>
</search>
